# Stubs for tensorflow.python.keras.engine.network (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python import pywrap_tensorflow as pywrap_tensorflow
from tensorflow.python.eager import context as context
from tensorflow.python.framework import errors as errors, errors_impl as errors_impl, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.keras import backend as backend
from tensorflow.python.keras.engine import base_layer as base_layer, saving as saving
from tensorflow.python.keras.utils import generic_utils as generic_utils, layer_utils as layer_utils, tf_utils as tf_utils
from tensorflow.python.keras.utils.io_utils import ask_to_proceed_with_overwrite as ask_to_proceed_with_overwrite
from tensorflow.python.ops import variables as variables
from tensorflow.python.training import checkpoint_management as checkpoint_management
from tensorflow.python.training.checkpointable import data_structures as data_structures
from tensorflow.python.util import tf_inspect as tf_inspect
from typing import Any as Any, Optional as Optional

class Network(base_layer.Layer):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def add_variable(self, name: Any, shape: Any, dtype: Optional[Any] = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., trainable: bool = ..., constraint: Optional[Any] = ...) -> None: ...
    def add_loss(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def uses_learning_phase(self): ...
    @property
    def stateful(self): ...
    def reset_states(self) -> None: ...
    @property
    def state_updates(self): ...
    def get_weights(self): ...
    def set_weights(self, weights: Any) -> None: ...
    def compute_mask(self, inputs: Any, mask: Any): ...
    @property
    def layers(self): ...
    def get_layer(self, name: Optional[Any] = ..., index: Optional[Any] = ...): ...
    @property
    def updates(self): ...
    @property
    def losses(self): ...
    @property
    def trainable_weights(self): ...
    @property
    def non_trainable_weights(self): ...
    @property
    def input_spec(self): ...
    built: bool = ...
    def build(self, input_shape: Any) -> None: ...
    def call(self, inputs: Any, training: Optional[Any] = ..., mask: Optional[Any] = ...): ...
    def compute_output_shape(self, input_shape: Any): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ...): ...
    def save(self, filepath: Any, overwrite: bool = ..., include_optimizer: bool = ...) -> None: ...
    def save_weights(self, filepath: Any, overwrite: bool = ..., save_format: Optional[Any] = ...) -> None: ...
    def load_weights(self, filepath: Any, by_name: bool = ...): ...
    def to_json(self, **kwargs: Any): ...
    def to_yaml(self, **kwargs: Any): ...
    def summary(self, line_length: Optional[Any] = ..., positions: Optional[Any] = ..., print_fn: Optional[Any] = ...) -> None: ...
