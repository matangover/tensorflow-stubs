# Stubs for tensorflow.python.keras.engine.sequential (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.eager import context as context
from tensorflow.python.framework import ops as ops
from tensorflow.python.keras.engine import base_layer as base_layer
from tensorflow.python.keras.engine.input_layer import Input as Input, InputLayer as InputLayer
from tensorflow.python.keras.engine.network import Network as Network
from tensorflow.python.keras.engine.training import Model as Model
from tensorflow.python.keras.utils import layer_utils as layer_utils
from tensorflow.python.util import tf_inspect as tf_inspect
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

class Sequential(Model):
    supports_masking: bool = ...
    def __init__(self, layers: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    @property
    def layers(self): ...
    built: bool = ...
    outputs: Any = ...
    inputs: Any = ...
    def add(self, layer: Any) -> None: ...
    def pop(self) -> None: ...
    def build(self, input_shape: Optional[Any] = ...) -> None: ...
    def call(self, inputs: Any, training: Optional[Any] = ..., mask: Optional[Any] = ...): ...
    def compute_output_shape(self, input_shape: Any): ...
    def compute_mask(self, inputs: Any, mask: Any): ...
    def predict_proba(self, x: Any, batch_size: int = ..., verbose: int = ...): ...
    def predict_classes(self, x: Any, batch_size: int = ..., verbose: int = ...): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ...): ...

def get_input_shape_and_dtype(layer: Any): ...
