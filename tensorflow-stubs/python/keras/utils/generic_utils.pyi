# Stubs for tensorflow.python.keras.utils.generic_utils (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.util import nest as nest, tf_decorator as tf_decorator, tf_inspect as tf_inspect
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

class CustomObjectScope:
    custom_objects: Any = ...
    backup: Any = ...
    def __init__(self, *args: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args: Any, **kwargs: Any) -> None: ...

def custom_object_scope(*args: Any): ...
def get_custom_objects(): ...
def serialize_keras_object(instance: Any): ...
def deserialize_keras_object(identifier: Any, module_objects: Optional[Any] = ..., custom_objects: Optional[Any] = ..., printable_module_name: str = ...): ...
def func_dump(func: Any): ...
def func_load(code: Any, defaults: Optional[Any] = ..., closure: Optional[Any] = ..., globs: Optional[Any] = ...): ...
def has_arg(fn: Any, name: Any, accept_all: bool = ...): ...

class Progbar:
    target: Any = ...
    width: Any = ...
    verbose: Any = ...
    interval: Any = ...
    stateful_metrics: Any = ...
    def __init__(self, target: Any, width: int = ..., verbose: int = ..., interval: float = ..., stateful_metrics: Optional[Any] = ...) -> None: ...
    def update(self, current: Any, values: Optional[Any] = ...) -> None: ...
    def add(self, n: Any, values: Optional[Any] = ...) -> None: ...

def make_batches(size: Any, batch_size: Any): ...
def slice_arrays(arrays: Any, start: Optional[Any] = ..., stop: Optional[Any] = ...): ...
def to_list(x: Any): ...
def object_list_uid(object_list: Any): ...
def to_snake_case(name: Any): ...
def is_all_none(iterable_or_element: Any): ...
