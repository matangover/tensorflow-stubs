# Stubs for tensorflow.python.keras.layers.local (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.keras import activations as activations, constraints as constraints, initializers as initializers, regularizers as regularizers
from tensorflow.python.keras.engine.base_layer import InputSpec as InputSpec, Layer as Layer
from tensorflow.python.keras.utils import conv_utils as conv_utils, tf_utils as tf_utils
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

class LocallyConnected1D(Layer):
    filters: Any = ...
    kernel_size: Any = ...
    strides: Any = ...
    padding: Any = ...
    data_format: Any = ...
    activation: Any = ...
    use_bias: Any = ...
    kernel_initializer: Any = ...
    bias_initializer: Any = ...
    kernel_regularizer: Any = ...
    bias_regularizer: Any = ...
    activity_regularizer: Any = ...
    kernel_constraint: Any = ...
    bias_constraint: Any = ...
    implementation: Any = ...
    input_spec: Any = ...
    def __init__(self, filters: Any, kernel_size: Any, strides: int = ..., padding: str = ..., data_format: Optional[Any] = ..., activation: Optional[Any] = ..., use_bias: bool = ..., kernel_initializer: str = ..., bias_initializer: str = ..., kernel_regularizer: Optional[Any] = ..., bias_regularizer: Optional[Any] = ..., activity_regularizer: Optional[Any] = ..., kernel_constraint: Optional[Any] = ..., bias_constraint: Optional[Any] = ..., implementation: int = ..., **kwargs: Any) -> None: ...
    output_length: Any = ...
    kernel_shape: Any = ...
    kernel: Any = ...
    kernel_mask: Any = ...
    bias: Any = ...
    built: bool = ...
    def build(self, input_shape: Any) -> None: ...
    def compute_output_shape(self, input_shape: Any): ...
    def call(self, inputs: Any): ...
    def get_config(self): ...

class LocallyConnected2D(Layer):
    filters: Any = ...
    kernel_size: Any = ...
    strides: Any = ...
    padding: Any = ...
    data_format: Any = ...
    activation: Any = ...
    use_bias: Any = ...
    kernel_initializer: Any = ...
    bias_initializer: Any = ...
    kernel_regularizer: Any = ...
    bias_regularizer: Any = ...
    activity_regularizer: Any = ...
    kernel_constraint: Any = ...
    bias_constraint: Any = ...
    implementation: Any = ...
    input_spec: Any = ...
    def __init__(self, filters: Any, kernel_size: Any, strides: Any = ..., padding: str = ..., data_format: Optional[Any] = ..., activation: Optional[Any] = ..., use_bias: bool = ..., kernel_initializer: str = ..., bias_initializer: str = ..., kernel_regularizer: Optional[Any] = ..., bias_regularizer: Optional[Any] = ..., activity_regularizer: Optional[Any] = ..., kernel_constraint: Optional[Any] = ..., bias_constraint: Optional[Any] = ..., implementation: int = ..., **kwargs: Any) -> None: ...
    output_row: Any = ...
    output_col: Any = ...
    kernel_shape: Any = ...
    kernel: Any = ...
    kernel_mask: Any = ...
    bias: Any = ...
    built: bool = ...
    def build(self, input_shape: Any) -> None: ...
    def compute_output_shape(self, input_shape: Any): ...
    def call(self, inputs: Any): ...
    def get_config(self): ...

def get_locallyconnected_mask(input_shape: Any, kernel_shape: Any, strides: Any, padding: Any, data_format: Any, dtype: Any): ...
def local_conv_matmul(inputs: Any, kernel: Any, kernel_mask: Any, output_shape: Any): ...
def make_2d(tensor: Any, split_dim: Any): ...
