# Stubs for tensorflow.python.keras.layers.merge (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.keras.engine.base_layer import Layer as Layer
from tensorflow.python.keras.utils import tf_utils as tf_utils
from tensorflow.python.ops import array_ops as array_ops, math_ops as math_ops, nn as nn
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

class _Merge(Layer):
    supports_masking: bool = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def build(self, input_shape: Any) -> None: ...
    def call(self, inputs: Any): ...
    def compute_output_shape(self, input_shape: Any): ...
    def compute_mask(self, inputs: Any, mask: Optional[Any] = ...): ...

class Add(_Merge): ...

class Subtract(_Merge):
    def build(self, input_shape: Any) -> None: ...

class Multiply(_Merge): ...
class Average(_Merge): ...
class Maximum(_Merge): ...
class Minimum(_Merge): ...

class Concatenate(_Merge):
    axis: Any = ...
    supports_masking: bool = ...
    def __init__(self, axis: int = ..., **kwargs: Any) -> None: ...
    def build(self, input_shape: Any) -> None: ...
    def compute_output_shape(self, input_shape: Any): ...
    def compute_mask(self, inputs: Any, mask: Optional[Any] = ...): ...
    def get_config(self): ...

class Dot(_Merge):
    axes: Any = ...
    normalize: Any = ...
    supports_masking: bool = ...
    def __init__(self, axes: Any, normalize: bool = ..., **kwargs: Any) -> None: ...
    def build(self, input_shape: Any) -> None: ...
    def compute_output_shape(self, input_shape: Any): ...
    def compute_mask(self, inputs: Any, mask: Optional[Any] = ...) -> None: ...
    def get_config(self): ...

def add(inputs: Any, **kwargs: Any): ...
def subtract(inputs: Any, **kwargs: Any): ...
def multiply(inputs: Any, **kwargs: Any): ...
def average(inputs: Any, **kwargs: Any): ...
def maximum(inputs: Any, **kwargs: Any): ...
def minimum(inputs: Any, **kwargs: Any): ...
def concatenate(inputs: Any, axis: int = ..., **kwargs: Any): ...
def dot(inputs: Any, axes: Any, normalize: bool = ..., **kwargs: Any): ...
