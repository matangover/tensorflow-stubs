# Stubs for tensorflow.python.keras.layers.core (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.eager import context as context
from tensorflow.python.framework import common_shapes as common_shapes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.keras import activations as activations, constraints as constraints, initializers as initializers, regularizers as regularizers
from tensorflow.python.keras.engine.base_layer import InputSpec as InputSpec, Layer as Layer
from tensorflow.python.keras.utils import conv_utils as conv_utils, generic_utils as generic_utils, tf_utils as tf_utils
from tensorflow.python.ops import array_ops as array_ops, gen_math_ops as gen_math_ops, math_ops as math_ops, nn as nn, nn_ops as nn_ops, standard_ops as standard_ops
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

class Masking(Layer):
    supports_masking: bool = ...
    mask_value: Any = ...
    def __init__(self, mask_value: float = ..., **kwargs: Any) -> None: ...
    def compute_mask(self, inputs: Any, mask: Optional[Any] = ...): ...
    def call(self, inputs: Any): ...
    def compute_output_shape(self, input_shape: Any): ...
    def get_config(self): ...

class Dropout(Layer):
    rate: Any = ...
    noise_shape: Any = ...
    seed: Any = ...
    supports_masking: bool = ...
    def __init__(self, rate: Any, noise_shape: Optional[Any] = ..., seed: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def call(self, inputs: Any, training: Optional[Any] = ...): ...
    def compute_output_shape(self, input_shape: Any): ...
    def get_config(self): ...

class SpatialDropout1D(Dropout):
    input_spec: Any = ...
    def __init__(self, rate: Any, **kwargs: Any) -> None: ...

class SpatialDropout2D(Dropout):
    data_format: Any = ...
    input_spec: Any = ...
    def __init__(self, rate: Any, data_format: Optional[Any] = ..., **kwargs: Any) -> None: ...

class SpatialDropout3D(Dropout):
    data_format: Any = ...
    input_spec: Any = ...
    def __init__(self, rate: Any, data_format: Optional[Any] = ..., **kwargs: Any) -> None: ...

class Activation(Layer):
    supports_masking: bool = ...
    activation: Any = ...
    def __init__(self, activation: Any, **kwargs: Any) -> None: ...
    def call(self, inputs: Any): ...
    def compute_output_shape(self, input_shape: Any): ...
    def get_config(self): ...

class Reshape(Layer):
    target_shape: Any = ...
    def __init__(self, target_shape: Any, **kwargs: Any) -> None: ...
    def compute_output_shape(self, input_shape: Any): ...
    def call(self, inputs: Any): ...
    def get_config(self): ...

class Permute(Layer):
    dims: Any = ...
    input_spec: Any = ...
    def __init__(self, dims: Any, **kwargs: Any) -> None: ...
    def compute_output_shape(self, input_shape: Any): ...
    def call(self, inputs: Any): ...
    def get_config(self): ...

class Flatten(Layer):
    data_format: Any = ...
    input_spec: Any = ...
    def __init__(self, data_format: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def call(self, inputs: Any): ...
    def compute_output_shape(self, input_shape: Any): ...
    def get_config(self): ...

class RepeatVector(Layer):
    n: Any = ...
    input_spec: Any = ...
    def __init__(self, n: Any, **kwargs: Any) -> None: ...
    def compute_output_shape(self, input_shape: Any): ...
    def call(self, inputs: Any): ...
    def get_config(self): ...

class Lambda(Layer):
    function: Any = ...
    arguments: Any = ...
    supports_masking: bool = ...
    mask: Any = ...
    def __init__(self, function: Any, output_shape: Optional[Any] = ..., mask: Optional[Any] = ..., arguments: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def compute_output_shape(self, input_shape: Any): ...
    def call(self, inputs: Any, mask: Optional[Any] = ...): ...
    def compute_mask(self, inputs: Any, mask: Optional[Any] = ...): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ...): ...

class Dense(Layer):
    units: Any = ...
    activation: Any = ...
    use_bias: Any = ...
    kernel_initializer: Any = ...
    bias_initializer: Any = ...
    kernel_regularizer: Any = ...
    bias_regularizer: Any = ...
    kernel_constraint: Any = ...
    bias_constraint: Any = ...
    supports_masking: bool = ...
    input_spec: Any = ...
    def __init__(self, units: Any, activation: Optional[Any] = ..., use_bias: bool = ..., kernel_initializer: str = ..., bias_initializer: str = ..., kernel_regularizer: Optional[Any] = ..., bias_regularizer: Optional[Any] = ..., activity_regularizer: Optional[Any] = ..., kernel_constraint: Optional[Any] = ..., bias_constraint: Optional[Any] = ..., **kwargs: Any) -> None: ...
    kernel: Any = ...
    bias: Any = ...
    built: bool = ...
    def build(self, input_shape: Any) -> None: ...
    def call(self, inputs: Any): ...
    def compute_output_shape(self, input_shape: Any): ...
    def get_config(self): ...

class ActivityRegularization(Layer):
    supports_masking: bool = ...
    l1: Any = ...
    l2: Any = ...
    def __init__(self, l1: float = ..., l2: float = ..., **kwargs: Any) -> None: ...
    def compute_output_shape(self, input_shape: Any): ...
    def get_config(self): ...
