# Stubs for tensorflow.python.training.checkpoint_management (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.core.protobuf import saver_pb2 as saver_pb2
from tensorflow.python.eager import context as context
from tensorflow.python.framework import errors as errors, ops as ops
from tensorflow.python.lib.io import file_io as file_io
from tensorflow.python.ops import variable_scope as variable_scope
from tensorflow.python.training import training_util as training_util
from tensorflow.python.training.checkpoint_state_pb2 import CheckpointState as CheckpointState
from tensorflow.python.util import compat as compat
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def generate_checkpoint_state_proto(save_dir: Any, model_checkpoint_path: Any, all_model_checkpoint_paths: Optional[Any] = ..., all_model_checkpoint_timestamps: Optional[Any] = ..., last_preserved_timestamp: Optional[Any] = ...): ...
def update_checkpoint_state(save_dir: Any, model_checkpoint_path: Any, all_model_checkpoint_paths: Optional[Any] = ..., latest_filename: Optional[Any] = ..., all_model_checkpoint_timestamps: Optional[Any] = ..., last_preserved_timestamp: Optional[Any] = ...) -> None: ...
def update_checkpoint_state_internal(save_dir: Any, model_checkpoint_path: Any, all_model_checkpoint_paths: Optional[Any] = ..., latest_filename: Optional[Any] = ..., save_relative_paths: bool = ..., all_model_checkpoint_timestamps: Optional[Any] = ..., last_preserved_timestamp: Optional[Any] = ...) -> None: ...
def get_checkpoint_state(checkpoint_dir: Any, latest_filename: Optional[Any] = ...): ...
def latest_checkpoint(checkpoint_dir: Any, latest_filename: Optional[Any] = ...): ...
def checkpoint_exists(checkpoint_prefix: Any): ...
def get_checkpoint_mtimes(checkpoint_prefixes: Any): ...
def remove_checkpoint(checkpoint_prefix: Any, checkpoint_format_version: Any = ..., meta_graph_suffix: str = ...) -> None: ...
def meta_graph_filename(checkpoint_filename: Any, meta_graph_suffix: str = ...): ...

class CheckpointManager:
    def __init__(self, checkpoint: Any, directory: Any, max_to_keep: Any, keep_checkpoint_every_n_hours: Optional[Any] = ...) -> None: ...
    @property
    def latest_checkpoint(self): ...
    @property
    def checkpoints(self): ...
    def save(self, session: Optional[Any] = ..., checkpoint_number: Optional[Any] = ...): ...
