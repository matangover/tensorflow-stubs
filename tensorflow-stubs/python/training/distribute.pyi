# Stubs for tensorflow.python.training.distribute (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.data.ops import dataset_ops as dataset_ops
from tensorflow.python.framework import ops as ops
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, resource_variable_ops as resource_variable_ops, variable_scope as variable_scope
from tensorflow.python.ops.losses import losses_impl as losses_impl
from tensorflow.python.platform import tf_logging as tf_logging
from tensorflow.python.training import device_util as device_util, distribution_strategy_context as distribution_strategy_context
from tensorflow.python.util import deprecation as deprecation, nest as nest
from typing import Any as Any, Optional as Optional

def get_update_device(): ...

class UpdateContext:
    def __init__(self, device: Any) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exception_type: Any, exception_value: Any, traceback: Any) -> None: ...

def get_loss_reduction(): ...
def require_tower_context(tower_ctx: Any) -> None: ...

class _CurrentDistributionContext:
    def __init__(self, distribution_strategy: Any, var_creator_scope: Any, var_scope: Optional[Any] = ..., default_device: Optional[Any] = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exception_type: Any, exception_value: Any, traceback: Any) -> None: ...

class _SameScopeAgainContext:
    def __init__(self, distribution_strategy: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exception_type: Any, exception_value: Any, traceback: Any) -> None: ...

class DistributionStrategy:
    def __init__(self) -> None: ...
    def scope(self): ...
    def read_var(self, v: Any) -> None: ...
    def colocate_vars_with(self, colocate_with_variable: Any): ...
    def distribute_dataset(self, dataset_fn: Any) -> None: ...
    def broadcast(self, tensor: Any, destinations: Optional[Any] = ...): ...
    def initialize(self): ...
    def finalize(self): ...
    def run_steps_on_dataset(self, fn: Any, iterator: Any, iterations: int = ..., initial_loop_values: Optional[Any] = ...): ...
    def call_for_each_tower(self, fn: Any, *args: Any, **kwargs: Any): ...
    def reduce(self, aggregation: Any, value: Any, destinations: Any): ...
    def batch_reduce(self, aggregation: Any, value_destination_pairs: Any): ...
    def update(self, var: Any, fn: Any, *args: Any, **kwargs: Any): ...
    def update_non_slot(self, colocate_with: Any, fn: Any, *args: Any, **kwargs: Any): ...
    def unwrap(self, value: Any): ...
    def value_container(self, value: Any) -> None: ...
    def group(self, value: Any, name: Optional[Any] = ...): ...
    @property
    def is_single_tower(self) -> None: ...
    @property
    def num_towers(self) -> None: ...
    @property
    def worker_devices(self) -> None: ...
    @property
    def parameter_devices(self) -> None: ...
    def non_slot_devices(self, var_list: Any) -> None: ...
    @property
    def worker_device_index(self): ...
    @property
    def between_graph(self) -> None: ...
    def configure(self, session_config: Optional[Any] = ..., cluster_spec: Optional[Any] = ..., task_type: Optional[Any] = ..., task_id: Optional[Any] = ...) -> None: ...
    @property
    def should_init(self) -> None: ...
    @property
    def should_checkpoint(self) -> None: ...
    @property
    def should_save_summary(self) -> None: ...

class TowerContext:
    def __init__(self, distribution_strategy: Any, tower_id: Any) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exception_type: Any, exception_value: Any, traceback: Any) -> None: ...
    def merge_call(self, merge_fn: Any, *args: Any, **kwargs: Any): ...
    @property
    def is_single_tower(self): ...
    @property
    def num_towers(self): ...
    @property
    def tower_id(self): ...
    @property
    def distribution_strategy(self): ...
    @property
    def device(self): ...

class _DefaultDistributionStrategy(DistributionStrategy):
    def scope(self): ...
    def colocate_vars_with(self, colocate_with_variable: Any): ...
    def distribute_dataset(self, dataset_fn: Any): ...
    def read_var(self, tower_local_var: Any): ...
    def value_container(self, value: Any): ...
    @property
    def is_single_tower(self): ...
    @property
    def num_towers(self): ...
    @property
    def worker_devices(self) -> None: ...
    @property
    def parameter_devices(self) -> None: ...
    def non_slot_devices(self, var_list: Any): ...

def increment_var(v: Any, amount: int = ...): ...
