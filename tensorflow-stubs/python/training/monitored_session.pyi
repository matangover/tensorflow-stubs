# Stubs for tensorflow.python.training.monitored_session (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.core.protobuf import config_pb2 as config_pb2
from tensorflow.python.distribute import distribute_coordinator_context as distribute_coordinator_context
from tensorflow.python.framework import errors as errors, ops as ops
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, lookup_ops as lookup_ops, resources as resources, variables as variables
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import basic_session_run_hooks as basic_session_run_hooks, coordinator as coordinator, queue_runner as queue_runner, session_run_hook as session_run_hook
from tensorflow.python.util import function_utils as function_utils
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

USE_DEFAULT: Any

class Scaffold:
    def __init__(self, init_op: Optional[Any] = ..., init_feed_dict: Optional[Any] = ..., init_fn: Optional[Any] = ..., ready_op: Optional[Any] = ..., ready_for_local_init_op: Optional[Any] = ..., local_init_op: Optional[Any] = ..., summary_op: Optional[Any] = ..., saver: Optional[Any] = ..., copy_from_scaffold: Optional[Any] = ...) -> None: ...
    def finalize(self): ...
    @property
    def init_fn(self): ...
    @property
    def init_op(self): ...
    @property
    def ready_op(self): ...
    @property
    def ready_for_local_init_op(self): ...
    @property
    def local_init_op(self): ...
    @property
    def summary_op(self): ...
    @property
    def saver(self): ...
    @property
    def init_feed_dict(self): ...
    @staticmethod
    def get_or_default(arg_name: Any, collection_key: Any, default_constructor: Any): ...
    @staticmethod
    def default_local_init_op(): ...

def MonitoredTrainingSession(master: str = ..., is_chief: bool = ..., checkpoint_dir: Optional[Any] = ..., scaffold: Optional[Any] = ..., hooks: Optional[Any] = ..., chief_only_hooks: Optional[Any] = ..., save_checkpoint_secs: Any = ..., save_summaries_steps: Any = ..., save_summaries_secs: Any = ..., config: Optional[Any] = ..., stop_grace_period_secs: int = ..., log_step_count_steps: int = ..., max_wait_secs: int = ..., save_checkpoint_steps: Any = ..., summary_dir: Optional[Any] = ...): ...

class SessionCreator(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def create_session(self) -> Any: ...

class ChiefSessionCreator(SessionCreator):
    def __init__(self, scaffold: Optional[Any] = ..., master: str = ..., config: Optional[Any] = ..., checkpoint_dir: Optional[Any] = ..., checkpoint_filename_with_path: Optional[Any] = ...) -> None: ...
    def create_session(self): ...

class WorkerSessionCreator(SessionCreator):
    def __init__(self, scaffold: Optional[Any] = ..., master: str = ..., config: Optional[Any] = ..., max_wait_secs: Any = ...) -> None: ...
    def create_session(self): ...

class _MonitoredSession:
    def __init__(self, session_creator: Any, hooks: Any, should_recover: Any, stop_grace_period_secs: int = ...) -> None: ...
    @property
    def graph(self): ...
    def run(self, fetches: Any, feed_dict: Optional[Any] = ..., options: Optional[Any] = ..., run_metadata: Optional[Any] = ...): ...
    def run_step_fn(self, step_fn: Any): ...
    class StepContext:
        def __init__(self, session: Any, run_with_hooks_fn: Any) -> None: ...
        @property
        def session(self): ...
        def run_with_hooks(self, *args: Any, **kwargs: Any): ...
        def request_stop(self) -> None: ...
    def should_stop(self): ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exception_type: Any, exception_value: Any, traceback: Any): ...
    class _CoordinatedSessionCreator(SessionCreator):
        coord: Any = ...
        tf_sess: Any = ...
        def __init__(self, session_creator: Any, hooks: Any, stop_grace_period_secs: Any) -> None: ...
        def create_session(self): ...

class MonitoredSession(_MonitoredSession):
    def __init__(self, session_creator: Optional[Any] = ..., hooks: Optional[Any] = ..., stop_grace_period_secs: int = ...) -> None: ...

class SingularMonitoredSession(_MonitoredSession):
    def __init__(self, hooks: Optional[Any] = ..., scaffold: Optional[Any] = ..., master: str = ..., config: Optional[Any] = ..., checkpoint_dir: Optional[Any] = ..., stop_grace_period_secs: int = ..., checkpoint_filename_with_path: Optional[Any] = ...) -> None: ...
    def raw_session(self): ...

class _WrappedSession:
    def __init__(self, sess: Any) -> None: ...
    @property
    def graph(self): ...
    @property
    def sess_str(self): ...
    def should_stop(self): ...
    def close(self) -> None: ...
    def run(self, *args: Any, **kwargs: Any): ...
    def run_step_fn(self, step_fn: Any, raw_session: Any, run_with_hooks: Any): ...

class _RecoverableSession(_WrappedSession):
    def __init__(self, sess_creator: Any) -> None: ...
    def run(self, fetches: Any, feed_dict: Optional[Any] = ..., options: Optional[Any] = ..., run_metadata: Optional[Any] = ...): ...
    def run_step_fn(self, step_fn: Any, raw_session: Any, run_with_hooks: Any): ...

class _CoordinatedSession(_WrappedSession):
    def __init__(self, sess: Any, coord: Any, stop_grace_period_secs: int = ...) -> None: ...
    def close(self) -> None: ...
    def run(self, *args: Any, **kwargs: Any): ...

class _HookedSession(_WrappedSession):
    def __init__(self, sess: Any, hooks: Any) -> None: ...
    def run(self, fetches: Any, feed_dict: Optional[Any] = ..., options: Optional[Any] = ..., run_metadata: Optional[Any] = ...): ...
