# Stubs for tensorflow.python.eager.context (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import threading as threading
from collections import namedtuple as namedtuple
from tensorflow.core.protobuf import config_pb2 as config_pb2
from tensorflow.python import pywrap_tensorflow as pywrap_tensorflow
from tensorflow.python.framework import c_api_util as c_api_util
from tensorflow.python.util import compat as compat, is_in_graph_mode as is_in_graph_mode, tf_contextlib as tf_contextlib
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

GRAPH_MODE: int
EAGER_MODE: int
default_execution_mode = GRAPH_MODE
DEVICE_PLACEMENT_EXPLICIT: Any
DEVICE_PLACEMENT_WARN: Any
DEVICE_PLACEMENT_SILENT: Any
DEVICE_PLACEMENT_SILENT_FOR_INT32: Any
SYNC: int
ASYNC: int

class _EagerTensorCache:
    def __init__(self, max_items: int = ..., max_tensor_size: int = ...) -> None: ...
    def put(self, key: Any, value: Any) -> None: ...
    def get(self, key: Any): ...
    def flush(self) -> None: ...

class _EagerContext(threading.local):
    device_spec: Any = ...
    device_name: Any = ...
    mode: Any = ...
    is_eager: Any = ...
    scope_name: str = ...
    recording_summaries: bool = ...
    summary_writer_resource: Any = ...
    scalar_cache: Any = ...
    ones_rank_cache: Any = ...
    zeros_cache: Any = ...
    execution_mode: Any = ...
    def __init__(self) -> None: ...

ContextSwitch = namedtuple('ContextSwitch', ['is_building_function', 'enter_context_fn'])

class _ContextSwitchStack(threading.local):
    stack: Any = ...
    def __init__(self, eager: Any) -> None: ...
    def push(self, is_building_function: Any, enter_context_fn: Any) -> None: ...
    def pop(self) -> None: ...

class Context:
    def __init__(self, config: Optional[Any] = ..., device_policy: Optional[Any] = ..., execution_mode: Optional[Any] = ..., server_def: Optional[Any] = ...) -> None: ...
    def set_server_def(self, server_def: Any, keep_alive_secs: int = ...) -> None: ...
    def executing_eagerly(self): ...
    def scalar_cache(self): ...
    def ones_rank_cache(self): ...
    def zeros_cache(self): ...
    @property
    def scope_name(self): ...
    @scope_name.setter
    def scope_name(self, s: Any) -> None: ...
    @property
    def summary_writer_resource(self): ...
    @summary_writer_resource.setter
    def summary_writer_resource(self, resource: Any) -> None: ...
    @property
    def device_name(self): ...
    @property
    def device_spec(self): ...
    def device(self, name: Any) -> None: ...
    def devices(self): ...
    def get_execution_mode(self): ...
    def set_execution_mode(self, mode: Any) -> None: ...
    def execution_mode(self, mode: Any) -> None: ...
    def async_wait(self) -> None: ...
    def async_clear_error(self) -> None: ...
    def num_gpus(self): ...
    def add_function(self, fn: Any) -> None: ...
    def add_function_def(self, fdef: Any) -> None: ...
    def add_post_execution_callback(self, callback: Any) -> None: ...
    def clear_post_execution_callbacks(self) -> None: ...
    @property
    def post_execution_callbacks(self): ...
    def enable_run_metadata(self) -> None: ...
    def device_policy(self, policy: Any) -> None: ...
    def disable_run_metadata(self) -> None: ...
    def export_run_metadata(self): ...
    @property
    def context_switches(self): ...
    def start_step(self) -> None: ...
    def end_step(self) -> None: ...

def context(): ...
def context_safe(): ...
def set_global_seed(seed: Any) -> None: ...
def global_seed(): ...
def internal_operation_seed(): ...
def executing_eagerly(): ...
def in_eager_mode(): ...
def graph_mode(): ...
def eager_mode(): ...
def namescope(name: Any) -> None: ...
def scope_name(): ...
def device(name: Any): ...
def list_devices(): ...
def set_execution_mode(mode: Any) -> None: ...
def execution_mode(mode: Any): ...
def async_wait(): ...
def async_clear_error(): ...
def num_gpus(): ...
def enable_run_metadata() -> None: ...
def disable_run_metadata() -> None: ...
def export_run_metadata(): ...
def set_server_def(server_def: Any) -> None: ...
