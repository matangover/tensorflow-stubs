# Stubs for tensorflow.python.debug.lib.debug_data (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.core.framework import graph_pb2 as graph_pb2, types_pb2 as types_pb2
from tensorflow.core.util import event_pb2 as event_pb2
from tensorflow.python.debug.lib import debug_graphs as debug_graphs
from tensorflow.python.framework import tensor_util as tensor_util
from tensorflow.python.platform import gfile as gfile
from tensorflow.python.util import compat as compat
from typing import Any as Any, Optional as Optional

METADATA_FILE_PREFIX: str
CORE_METADATA_TAG: str
GRAPH_FILE_TAG: str
DEVICE_TAG: str
HASH_TAG: str
FETCHES_INFO_FILE_TAG: str
FEED_KEYS_INFO_FILE_TAG: str

class InconvertibleTensorProto:
    def __init__(self, tensor_proto: Any, initialized: bool = ...) -> None: ...
    @property
    def initialized(self): ...

def load_tensor_from_event_file(event_file_path: Any): ...
def load_tensor_from_event(event: Any): ...
def has_inf_or_nan(datum: Any, tensor: Any): ...

_CoreMetadata = namedtuple('CoreMetadata', ['global_step', 'session_run_index', 'executor_step_index', 'input_names', 'output_names', 'target_nodes'])

def extract_core_metadata_from_event_proto(event: Any): ...
def device_name_to_device_path(device_name: Any): ...
def device_path_to_device_name(device_dir: Any): ...

class DebugTensorDatum:
    def __init__(self, dump_root: Any, debug_dump_rel_path: Any) -> None: ...
    def get_tensor(self): ...
    @property
    def timestamp(self): ...
    @property
    def extended_timestamp(self): ...
    @property
    def debug_op(self): ...
    @property
    def device_name(self): ...
    @property
    def node_name(self): ...
    @property
    def output_slot(self): ...
    @property
    def tensor_name(self): ...
    @property
    def watch_key(self): ...
    @property
    def file_path(self): ...
    @property
    def dump_size_bytes(self): ...

class WatchKeyDoesNotExistInDebugDumpDirError(ValueError): ...

class DebugDumpDir:
    def __init__(self, dump_root: Any, partition_graphs: Optional[Any] = ..., validate: bool = ...) -> None: ...
    def set_python_graph(self, python_graph: Any) -> None: ...
    @property
    def python_graph(self): ...
    @property
    def core_metadata(self): ...
    @property
    def dumped_tensor_data(self): ...
    @property
    def t0(self): ...
    @property
    def size(self): ...
    def loaded_partition_graphs(self): ...
    def partition_graphs(self): ...
    def reconstructed_non_debug_partition_graphs(self): ...
    @property
    def run_fetches_info(self): ...
    @property
    def run_feed_keys_info(self): ...
    def nodes(self, device_name: Optional[Any] = ...): ...
    def node_attributes(self, node_name: Any, device_name: Optional[Any] = ...): ...
    def node_inputs(self, node_name: Any, is_control: bool = ..., device_name: Optional[Any] = ...): ...
    def transitive_inputs(self, node_name: Any, include_control: bool = ..., include_reversed_ref: bool = ..., device_name: Optional[Any] = ...): ...
    def find_some_path(self, src_node_name: Any, dst_node_name: Any, include_control: bool = ..., include_reversed_ref: bool = ..., device_name: Optional[Any] = ...): ...
    def node_recipients(self, node_name: Any, is_control: bool = ..., device_name: Optional[Any] = ...): ...
    def devices(self): ...
    def node_exists(self, node_name: Any, device_name: Optional[Any] = ...): ...
    def node_device(self, node_name: Any): ...
    def node_op_type(self, node_name: Any, device_name: Optional[Any] = ...): ...
    def debug_watch_keys(self, node_name: Any, device_name: Optional[Any] = ...): ...
    def watch_key_to_data(self, debug_watch_key: Any, device_name: Optional[Any] = ...): ...
    def find(self, predicate: Any, first_n: int = ..., device_name: Optional[Any] = ..., exclude_node_names: Optional[Any] = ...): ...
    def get_tensor_file_paths(self, node_name: Any, output_slot: Any, debug_op: Any, device_name: Optional[Any] = ...): ...
    def get_tensors(self, node_name: Any, output_slot: Any, debug_op: Any, device_name: Optional[Any] = ...): ...
    def get_rel_timestamps(self, node_name: Any, output_slot: Any, debug_op: Any, device_name: Optional[Any] = ...): ...
    def get_dump_sizes_bytes(self, node_name: Any, output_slot: Any, debug_op: Any, device_name: Optional[Any] = ...): ...
    def node_traceback(self, element_name: Any): ...
