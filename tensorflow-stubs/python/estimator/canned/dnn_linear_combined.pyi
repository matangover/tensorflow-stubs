# Stubs for tensorflow.python.estimator.canned.dnn_linear_combined (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.estimator import estimator as estimator
from tensorflow.python.estimator.canned import dnn as dnn, linear as linear, optimizers as optimizers
from tensorflow.python.feature_column import feature_column_v2 as feature_column_v2
from tensorflow.python.framework import ops as ops
from tensorflow.python.ops import control_flow_ops as control_flow_ops, nn as nn, partitioned_variables as partitioned_variables, state_ops as state_ops, variable_scope as variable_scope
from tensorflow.python.ops.losses import losses as losses
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import sync_replicas_optimizer as sync_replicas_optimizer, training_util as training_util
from tensorflow.python.util.tf_export import estimator_export as estimator_export
from typing import Any as Any, Optional as Optional

class DNNLinearCombinedClassifier(estimator.Estimator):
    def __init__(self, model_dir: Optional[Any] = ..., linear_feature_columns: Optional[Any] = ..., linear_optimizer: str = ..., dnn_feature_columns: Optional[Any] = ..., dnn_optimizer: str = ..., dnn_hidden_units: Optional[Any] = ..., dnn_activation_fn: Any = ..., dnn_dropout: Optional[Any] = ..., n_classes: int = ..., weight_column: Optional[Any] = ..., label_vocabulary: Optional[Any] = ..., input_layer_partitioner: Optional[Any] = ..., config: Optional[Any] = ..., warm_start_from: Optional[Any] = ..., loss_reduction: Any = ..., batch_norm: bool = ..., linear_sparse_combiner: str = ...) -> None: ...

class DNNLinearCombinedRegressor(estimator.Estimator):
    def __init__(self, model_dir: Optional[Any] = ..., linear_feature_columns: Optional[Any] = ..., linear_optimizer: str = ..., dnn_feature_columns: Optional[Any] = ..., dnn_optimizer: str = ..., dnn_hidden_units: Optional[Any] = ..., dnn_activation_fn: Any = ..., dnn_dropout: Optional[Any] = ..., label_dimension: int = ..., weight_column: Optional[Any] = ..., input_layer_partitioner: Optional[Any] = ..., config: Optional[Any] = ..., warm_start_from: Optional[Any] = ..., loss_reduction: Any = ..., batch_norm: bool = ..., linear_sparse_combiner: str = ...) -> None: ...
