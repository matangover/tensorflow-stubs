# Stubs for tensorflow.python.estimator.canned.boosted_trees (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from collections import namedtuple as namedtuple
from tensorflow.core.kernels.boosted_trees import boosted_trees_pb2 as boosted_trees_pb2
from tensorflow.python.estimator import estimator as estimator
from tensorflow.python.estimator.canned import boosted_trees_utils as boosted_trees_utils
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, boosted_trees_ops as boosted_trees_ops, control_flow_ops as control_flow_ops, data_flow_ops as data_flow_ops, gradients_impl as gradients_impl, lookup_ops as lookup_ops, math_ops as math_ops, state_ops as state_ops, variable_scope as variable_scope
from tensorflow.python.ops.losses import losses as losses
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import checkpoint_utils as checkpoint_utils, session_run_hook as session_run_hook, training_util as training_util
from tensorflow.python.util.tf_export import estimator_export as estimator_export
from typing import Any as Any, Optional as Optional

_TreeHParams = namedtuple('TreeHParams', ['n_trees', 'max_depth', 'learning_rate', 'l1', 'l2', 'tree_complexity', 'min_node_weight', 'center_bias', 'pruning_mode'])

class _CacheTrainingStatesUsingHashTable:
    def __init__(self, example_ids: Any, logits_dimension: Any) -> None: ...
    def lookup(self): ...
    def insert(self, tree_ids: Any, node_ids: Any, logits: Any): ...

class _CacheTrainingStatesUsingVariables:
    def __init__(self, batch_size: Any, logits_dimension: Any) -> None: ...
    def lookup(self): ...
    def insert(self, tree_ids: Any, node_ids: Any, logits: Any): ...

class _StopAtAttemptsHook(session_run_hook.SessionRunHook):
    def __init__(self, num_finalized_trees_tensor: Any, num_attempted_layers_tensor: Any, max_trees: Any, max_depth: Any) -> None: ...
    def before_run(self, run_context: Any): ...
    def after_run(self, run_context: Any, run_values: Any) -> None: ...

class _EnsembleGrower(metaclass=abc.ABCMeta):
    def __init__(self, tree_ensemble: Any, tree_hparams: Any, feature_ids_list: Any) -> None: ...
    @abc.abstractmethod
    def center_bias(self, center_bias_var: Any, gradients: Any, hessians: Any) -> Any: ...
    @abc.abstractmethod
    def grow_tree(self, stats_summaries_list: Any, last_layer_nodes_range: Any) -> Any: ...
    def chief_init_op(self): ...

class _InMemoryEnsembleGrower(_EnsembleGrower):
    def __init__(self, tree_ensemble: Any, tree_hparams: Any, feature_ids_list: Any) -> None: ...
    def center_bias(self, center_bias_var: Any, gradients: Any, hessians: Any): ...
    def grow_tree(self, stats_summaries_list: Any, last_layer_nodes_range: Any): ...

class _AccumulatorEnsembleGrower(_EnsembleGrower):
    def __init__(self, tree_ensemble: Any, tree_hparams: Any, stamp_token: Any, n_batches_per_layer: Any, bucket_size_list: Any, is_chief: Any, center_bias: Any, feature_ids_list: Any) -> None: ...
    def center_bias(self, center_bias_var: Any, gradients: Any, hessians: Any): ...
    def grow_tree(self, stats_summaries_list: Any, last_layer_nodes_range: Any): ...
    def chief_init_op(self): ...

class GrowerInitializationHook(session_run_hook.SessionRunHook):
    def __init__(self, init_op: Any) -> None: ...
    def after_create_session(self, session: Any, coord: Any) -> None: ...

class _BoostedTreesBase(estimator.Estimator):
    def __init__(self, model_fn: Any, model_dir: Any, config: Any, feature_columns: Any, head: Any, center_bias: Any, is_classification: Any) -> None: ...
    def experimental_feature_importances(self, normalize: bool = ...): ...
    def experimental_predict_with_explanations(self, input_fn: Any, predict_keys: Optional[Any] = ..., hooks: Optional[Any] = ..., checkpoint_path: Optional[Any] = ...): ...

class BoostedTreesClassifier(_BoostedTreesBase):
    def __init__(self, feature_columns: Any, n_batches_per_layer: Any, model_dir: Optional[Any] = ..., n_classes: Any = ..., weight_column: Optional[Any] = ..., label_vocabulary: Optional[Any] = ..., n_trees: int = ..., max_depth: int = ..., learning_rate: float = ..., l1_regularization: float = ..., l2_regularization: float = ..., tree_complexity: float = ..., min_node_weight: float = ..., config: Optional[Any] = ..., center_bias: bool = ..., pruning_mode: str = ...) -> None: ...

class BoostedTreesRegressor(_BoostedTreesBase):
    def __init__(self, feature_columns: Any, n_batches_per_layer: Any, model_dir: Optional[Any] = ..., label_dimension: Any = ..., weight_column: Optional[Any] = ..., n_trees: int = ..., max_depth: int = ..., learning_rate: float = ..., l1_regularization: float = ..., l2_regularization: float = ..., tree_complexity: float = ..., min_node_weight: float = ..., config: Optional[Any] = ..., center_bias: bool = ..., pruning_mode: str = ...) -> None: ...
