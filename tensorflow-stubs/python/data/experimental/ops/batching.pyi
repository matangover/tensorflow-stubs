# Stubs for tensorflow.python.data.experimental.ops.batching (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.data.experimental.ops import get_single_element as get_single_element, grouping as grouping
from tensorflow.python.data.ops import dataset_ops as dataset_ops
from tensorflow.python.data.util import convert as convert, nest as nest, sparse as sparse
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, gen_array_ops as gen_array_ops, gen_dataset_ops as gen_dataset_ops, math_ops as math_ops, sparse_ops as sparse_ops
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def batch_window(dataset: Any): ...
def dense_to_sparse_batch(batch_size: Any, row_shape: Any): ...
def padded_batch_window(dataset: Any, padded_shape: Any, padding_value: Optional[Any] = ...): ...

class _UnbatchDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

def unbatch(): ...

class _DenseToSparseBatchDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset: Any, batch_size: Any, row_shape: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class _RestructuredDataset(dataset_ops.UnaryDataset):
    def __init__(self, dataset: Any, output_types: Any, output_shapes: Optional[Any] = ..., output_classes: Optional[Any] = ..., allow_unsafe_cast: bool = ...) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_types(self): ...
    @property
    def output_shapes(self): ...

class _MapAndBatchDataset(dataset_ops.MapDataset):
    def __init__(self, input_dataset: Any, map_func: Any, batch_size: Any, num_parallel_calls: Any, drop_remainder: Any) -> None: ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

def map_and_batch(map_func: Any, batch_size: Any, num_parallel_batches: Optional[Any] = ..., drop_remainder: bool = ..., num_parallel_calls: Optional[Any] = ...): ...
