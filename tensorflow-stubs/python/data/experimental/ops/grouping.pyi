# Stubs for tensorflow.python.data.experimental.ops.grouping (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.data.ops import dataset_ops as dataset_ops
from tensorflow.python.data.util import nest as nest
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, gen_dataset_ops as gen_dataset_ops, math_ops as math_ops
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def group_by_reducer(key_func: Any, reducer: Any): ...
def group_by_window(key_func: Any, reduce_func: Any, window_size: Optional[Any] = ..., window_size_func: Optional[Any] = ...): ...
def bucket_by_sequence_length(element_length_func: Any, bucket_boundaries: Any, bucket_batch_sizes: Any, padded_shapes: Optional[Any] = ..., padding_values: Optional[Any] = ..., pad_to_bucket_boundary: bool = ..., no_padding: bool = ...): ...

class _GroupByReducerDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset: Any, key_func: Any, reducer: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class _GroupByWindowDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset: Any, key_func: Any, reduce_func: Any, window_size_func: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class Reducer:
    def __init__(self, init_func: Any, reduce_func: Any, finalize_func: Any) -> None: ...
    @property
    def init_func(self): ...
    @property
    def reduce_func(self): ...
    @property
    def finalize_func(self): ...

class _MapXDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset: Any, map_func: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...
