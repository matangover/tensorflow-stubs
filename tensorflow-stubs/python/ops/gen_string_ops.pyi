# Stubs for tensorflow.python.ops.gen_string_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def as_string(input: Any, precision: int = ..., scientific: bool = ..., shortest: bool = ..., width: int = ..., fill: str = ..., name: Optional[Any] = ...): ...
def as_string_eager_fallback(input: Any, precision: int = ..., scientific: bool = ..., shortest: bool = ..., width: int = ..., fill: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def decode_base64(input: Any, name: Optional[Any] = ...): ...
def decode_base64_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def encode_base64(input: Any, pad: bool = ..., name: Optional[Any] = ...): ...
def encode_base64_eager_fallback(input: Any, pad: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def reduce_join(inputs: Any, reduction_indices: Any, keep_dims: bool = ..., separator: str = ..., name: Optional[Any] = ...): ...
def reduce_join_eager_fallback(inputs: Any, reduction_indices: Any, keep_dims: bool = ..., separator: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def regex_full_match(input: Any, pattern: Any, name: Optional[Any] = ...): ...
def regex_full_match_eager_fallback(input: Any, pattern: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def regex_replace(input: Any, pattern: Any, rewrite: Any, replace_global: bool = ..., name: Optional[Any] = ...): ...
def regex_replace_eager_fallback(input: Any, pattern: Any, rewrite: Any, replace_global: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def static_regex_full_match(input: Any, pattern: Any, name: Optional[Any] = ...): ...
def static_regex_full_match_eager_fallback(input: Any, pattern: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def static_regex_replace(input: Any, pattern: Any, rewrite: Any, replace_global: bool = ..., name: Optional[Any] = ...): ...
def static_regex_replace_eager_fallback(input: Any, pattern: Any, rewrite: Any, replace_global: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def string_format(inputs: Any, template: str = ..., placeholder: str = ..., summarize: int = ..., name: Optional[Any] = ...): ...
def string_format_eager_fallback(inputs: Any, template: str = ..., placeholder: str = ..., summarize: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def string_join(inputs: Any, separator: str = ..., name: Optional[Any] = ...): ...
def string_join_eager_fallback(inputs: Any, separator: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def string_length(input: Any, unit: str = ..., name: Optional[Any] = ...): ...
def string_length_eager_fallback(input: Any, unit: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _StringSplitOutput = namedtuple('StringSplit', <ERROR>)

def string_split(input: Any, delimiter: Any, skip_empty: bool = ..., name: Optional[Any] = ...): ...
def string_split_eager_fallback(input: Any, delimiter: Any, skip_empty: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _StringSplitV2Output = namedtuple('StringSplitV2', <ERROR>)

def string_split_v2(input: Any, sep: Any, maxsplit: int = ..., name: Optional[Any] = ...): ...
def string_split_v2_eager_fallback(input: Any, sep: Any, maxsplit: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def string_strip(input: Any, name: Optional[Any] = ...): ...
def string_strip_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def string_to_hash_bucket(string_tensor: Any, num_buckets: Any, name: Optional[Any] = ...): ...
def string_to_hash_bucket_eager_fallback(string_tensor: Any, num_buckets: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def string_to_hash_bucket_fast(input: Any, num_buckets: Any, name: Optional[Any] = ...): ...
def string_to_hash_bucket_fast_eager_fallback(input: Any, num_buckets: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def string_to_hash_bucket_strong(input: Any, num_buckets: Any, key: Any, name: Optional[Any] = ...): ...
def string_to_hash_bucket_strong_eager_fallback(input: Any, num_buckets: Any, key: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def substr(input: Any, pos: Any, len: Any, name: Optional[Any] = ...): ...
def substr_eager_fallback(input: Any, pos: Any, len: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def unicode_script(input: Any, name: Optional[Any] = ...): ...
def unicode_script_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
