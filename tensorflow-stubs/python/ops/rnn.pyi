# Stubs for tensorflow.python.ops.rnn (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.eager import context as context
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.keras.engine import base_layer as base_layer
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, control_flow_util as control_flow_util, math_ops as math_ops, rnn_cell_impl as rnn_cell_impl, tensor_array_ops as tensor_array_ops
from tensorflow.python.util import nest as nest
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def bidirectional_dynamic_rnn(cell_fw: Any, cell_bw: Any, inputs: Any, sequence_length: Optional[Any] = ..., initial_state_fw: Optional[Any] = ..., initial_state_bw: Optional[Any] = ..., dtype: Optional[Any] = ..., parallel_iterations: Optional[Any] = ..., swap_memory: bool = ..., time_major: bool = ..., scope: Optional[Any] = ...): ...
def dynamic_rnn(cell: Any, inputs: Any, sequence_length: Optional[Any] = ..., initial_state: Optional[Any] = ..., dtype: Optional[Any] = ..., parallel_iterations: Optional[Any] = ..., swap_memory: bool = ..., time_major: bool = ..., scope: Optional[Any] = ...): ...
def raw_rnn(cell: Any, loop_fn: Any, parallel_iterations: Optional[Any] = ..., swap_memory: bool = ..., scope: Optional[Any] = ...): ...
def static_rnn(cell: Any, inputs: Any, initial_state: Optional[Any] = ..., dtype: Optional[Any] = ..., sequence_length: Optional[Any] = ..., scope: Optional[Any] = ...): ...
def static_state_saving_rnn(cell: Any, inputs: Any, state_saver: Any, state_name: Any, sequence_length: Optional[Any] = ..., scope: Optional[Any] = ...): ...
def static_bidirectional_rnn(cell_fw: Any, cell_bw: Any, inputs: Any, initial_state_fw: Optional[Any] = ..., initial_state_bw: Optional[Any] = ..., dtype: Optional[Any] = ..., sequence_length: Optional[Any] = ..., scope: Optional[Any] = ...): ...
