# Stubs for tensorflow.python.ops.gen_dataset_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def anonymous_iterator(output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def anonymous_iterator_eager_fallback(output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def batch_dataset(input_dataset: Any, batch_size: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def batch_dataset_eager_fallback(input_dataset: Any, batch_size: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def batch_dataset_v2(input_dataset: Any, batch_size: Any, drop_remainder: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def batch_dataset_v2_eager_fallback(input_dataset: Any, batch_size: Any, drop_remainder: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def bytes_produced_stats_dataset(input_dataset: Any, tag: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def bytes_produced_stats_dataset_eager_fallback(input_dataset: Any, tag: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def cache_dataset(input_dataset: Any, filename: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def cache_dataset_eager_fallback(input_dataset: Any, filename: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def concatenate_dataset(input_dataset: Any, another_dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def concatenate_dataset_eager_fallback(input_dataset: Any, another_dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def dataset_to_graph(input_dataset: Any, name: Optional[Any] = ...): ...
def dataset_to_graph_eager_fallback(input_dataset: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def dataset_to_single_element(dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def dataset_to_single_element_eager_fallback(dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def dataset_to_tf_record(input_dataset: Any, filename: Any, compression_type: Any, name: Optional[Any] = ...): ...
def dataset_to_tf_record_eager_fallback(input_dataset: Any, filename: Any, compression_type: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def dense_to_sparse_batch_dataset(input_dataset: Any, batch_size: Any, row_shape: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def dense_to_sparse_batch_dataset_eager_fallback(input_dataset: Any, batch_size: Any, row_shape: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def deserialize_iterator(resource_handle: Any, serialized: Any, name: Optional[Any] = ...): ...
def deserialize_iterator_eager_fallback(resource_handle: Any, serialized: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def enqueue_in_queue_dataset(queue: Any, components: Any, name: Optional[Any] = ...): ...
def enqueue_in_queue_dataset_eager_fallback(queue: Any, components: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def filter_by_last_component_dataset(input_dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def filter_by_last_component_dataset_eager_fallback(input_dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def filter_dataset(input_dataset: Any, other_arguments: Any, predicate: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def filter_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, predicate: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def fixed_length_record_dataset(filenames: Any, header_bytes: Any, record_bytes: Any, footer_bytes: Any, buffer_size: Any, name: Optional[Any] = ...): ...
def fixed_length_record_dataset_eager_fallback(filenames: Any, header_bytes: Any, record_bytes: Any, footer_bytes: Any, buffer_size: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def flat_map_dataset(input_dataset: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def flat_map_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def generator_dataset(init_func_other_args: Any, next_func_other_args: Any, finalize_func_other_args: Any, init_func: Any, next_func: Any, finalize_func: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def generator_dataset_eager_fallback(init_func_other_args: Any, next_func_other_args: Any, finalize_func_other_args: Any, init_func: Any, next_func: Any, finalize_func: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def group_by_reducer_dataset(input_dataset: Any, key_func_other_arguments: Any, init_func_other_arguments: Any, reduce_func_other_arguments: Any, finalize_func_other_arguments: Any, key_func: Any, init_func: Any, reduce_func: Any, finalize_func: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def group_by_reducer_dataset_eager_fallback(input_dataset: Any, key_func_other_arguments: Any, init_func_other_arguments: Any, reduce_func_other_arguments: Any, finalize_func_other_arguments: Any, key_func: Any, init_func: Any, reduce_func: Any, finalize_func: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def group_by_window_dataset(input_dataset: Any, key_func_other_arguments: Any, reduce_func_other_arguments: Any, window_size_func_other_arguments: Any, key_func: Any, reduce_func: Any, window_size_func: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def group_by_window_dataset_eager_fallback(input_dataset: Any, key_func_other_arguments: Any, reduce_func_other_arguments: Any, window_size_func_other_arguments: Any, key_func: Any, reduce_func: Any, window_size_func: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def interleave_dataset(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def interleave_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def iterator(shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def iterator_eager_fallback(shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def iterator_from_string_handle(string_handle: Any, output_types: Any = ..., output_shapes: Any = ..., name: Optional[Any] = ...): ...
def iterator_from_string_handle_eager_fallback(string_handle: Any, output_types: Any = ..., output_shapes: Any = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def iterator_from_string_handle_v2(string_handle: Any, output_types: Any = ..., output_shapes: Any = ..., name: Optional[Any] = ...): ...
def iterator_from_string_handle_v2_eager_fallback(string_handle: Any, output_types: Any = ..., output_shapes: Any = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def iterator_get_next(iterator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def iterator_get_next_eager_fallback(iterator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def iterator_get_next_as_optional(iterator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def iterator_get_next_as_optional_eager_fallback(iterator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def iterator_get_next_sync(iterator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def iterator_get_next_sync_eager_fallback(iterator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def iterator_to_string_handle(resource_handle: Any, name: Optional[Any] = ...): ...
def iterator_to_string_handle_eager_fallback(resource_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def iterator_v2(shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def iterator_v2_eager_fallback(shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def latency_stats_dataset(input_dataset: Any, tag: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def latency_stats_dataset_eager_fallback(input_dataset: Any, tag: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def make_iterator(dataset: Any, iterator: Any, name: Optional[Any] = ...): ...
def make_iterator_eager_fallback(dataset: Any, iterator: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def map_and_batch_dataset(input_dataset: Any, other_arguments: Any, batch_size: Any, num_parallel_batches: Any, drop_remainder: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def map_and_batch_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, batch_size: Any, num_parallel_batches: Any, drop_remainder: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def map_and_batch_dataset_v2(input_dataset: Any, other_arguments: Any, batch_size: Any, num_parallel_calls: Any, drop_remainder: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def map_and_batch_dataset_v2_eager_fallback(input_dataset: Any, other_arguments: Any, batch_size: Any, num_parallel_calls: Any, drop_remainder: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def map_dataset(input_dataset: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: bool = ..., name: Optional[Any] = ...): ...
def map_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def map_defun(arguments: Any, output_types: Any, output_shapes: Any, f: Any, name: Optional[Any] = ...): ...
def map_defun_eager_fallback(arguments: Any, output_types: Any, output_shapes: Any, f: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def model_dataset(input_dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def model_dataset_eager_fallback(input_dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def multi_device_iterator(devices: Any, shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def multi_device_iterator_eager_fallback(devices: Any, shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def multi_device_iterator_from_string_handle(string_handle: Any, output_types: Any = ..., output_shapes: Any = ..., name: Optional[Any] = ...): ...
def multi_device_iterator_from_string_handle_eager_fallback(string_handle: Any, output_types: Any = ..., output_shapes: Any = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def multi_device_iterator_get_next_from_shard(multi_device_iterator: Any, shard_num: Any, incarnation_id: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def multi_device_iterator_get_next_from_shard_eager_fallback(multi_device_iterator: Any, shard_num: Any, incarnation_id: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def multi_device_iterator_init(dataset: Any, multi_device_iterator: Any, max_buffer_size: Any, name: Optional[Any] = ...): ...
def multi_device_iterator_init_eager_fallback(dataset: Any, multi_device_iterator: Any, max_buffer_size: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def multi_device_iterator_to_string_handle(multi_device_iterator: Any, name: Optional[Any] = ...): ...
def multi_device_iterator_to_string_handle_eager_fallback(multi_device_iterator: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def one_shot_iterator(dataset_factory: Any, output_types: Any, output_shapes: Any, container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def one_shot_iterator_eager_fallback(dataset_factory: Any, output_types: Any, output_shapes: Any, container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def optimize_dataset(input_dataset: Any, optimizations: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def optimize_dataset_eager_fallback(input_dataset: Any, optimizations: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def optional_from_value(components: Any, name: Optional[Any] = ...): ...
def optional_from_value_eager_fallback(components: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def optional_get_value(optional: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def optional_get_value_eager_fallback(optional: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def optional_has_value(optional: Any, name: Optional[Any] = ...): ...
def optional_has_value_eager_fallback(optional: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def optional_none(name: Optional[Any] = ...): ...
def optional_none_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def padded_batch_dataset(input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def padded_batch_dataset_eager_fallback(input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def padded_batch_dataset_v2(input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, drop_remainder: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def padded_batch_dataset_v2_eager_fallback(input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, drop_remainder: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def parallel_interleave_dataset(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, sloppy: Any, buffer_output_elements: Any, prefetch_input_elements: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def parallel_interleave_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, sloppy: Any, buffer_output_elements: Any, prefetch_input_elements: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def parallel_interleave_dataset_v2(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def parallel_interleave_dataset_v2_eager_fallback(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def parallel_map_dataset(input_dataset: Any, other_arguments: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: bool = ..., name: Optional[Any] = ...): ...
def parallel_map_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def parse_example_dataset(input_dataset: Any, num_parallel_calls: Any, dense_defaults: Any, sparse_keys: Any, dense_keys: Any, sparse_types: Any, dense_shapes: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def parse_example_dataset_eager_fallback(input_dataset: Any, num_parallel_calls: Any, dense_defaults: Any, sparse_keys: Any, dense_keys: Any, sparse_types: Any, dense_shapes: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def prefetch_dataset(input_dataset: Any, buffer_size: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def prefetch_dataset_eager_fallback(input_dataset: Any, buffer_size: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def prepend_from_queue_and_padded_batch_dataset(input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def prepend_from_queue_and_padded_batch_dataset_eager_fallback(input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def random_dataset(seed: Any, seed2: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def random_dataset_eager_fallback(seed: Any, seed2: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def range_dataset(start: Any, stop: Any, step: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def range_dataset_eager_fallback(start: Any, stop: Any, step: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def reduce_dataset(input_dataset: Any, initial_state: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: bool = ..., name: Optional[Any] = ...): ...
def reduce_dataset_eager_fallback(input_dataset: Any, initial_state: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def repeat_dataset(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def repeat_dataset_eager_fallback(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def scan_dataset(input_dataset: Any, initial_state: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def scan_dataset_eager_fallback(input_dataset: Any, initial_state: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def serialize_iterator(resource_handle: Any, name: Optional[Any] = ...): ...
def serialize_iterator_eager_fallback(resource_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def set_stats_aggregator_dataset(input_dataset: Any, stats_aggregator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def set_stats_aggregator_dataset_eager_fallback(input_dataset: Any, stats_aggregator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def shuffle_and_repeat_dataset(input_dataset: Any, buffer_size: Any, seed: Any, seed2: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def shuffle_and_repeat_dataset_eager_fallback(input_dataset: Any, buffer_size: Any, seed: Any, seed2: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def shuffle_dataset(input_dataset: Any, buffer_size: Any, seed: Any, seed2: Any, output_types: Any, output_shapes: Any, reshuffle_each_iteration: bool = ..., name: Optional[Any] = ...): ...
def shuffle_dataset_eager_fallback(input_dataset: Any, buffer_size: Any, seed: Any, seed2: Any, output_types: Any, output_shapes: Any, reshuffle_each_iteration: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def sink_dataset(input_dataset: Any, name: Optional[Any] = ...): ...
def sink_dataset_eager_fallback(input_dataset: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def skip_dataset(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def skip_dataset_eager_fallback(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def slide_dataset(input_dataset: Any, window_size: Any, window_shift: Any, window_stride: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def slide_dataset_eager_fallback(input_dataset: Any, window_size: Any, window_shift: Any, window_stride: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def sparse_tensor_slice_dataset(indices: Any, values: Any, dense_shape: Any, name: Optional[Any] = ...): ...
def sparse_tensor_slice_dataset_eager_fallback(indices: Any, values: Any, dense_shape: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def sql_dataset(driver_name: Any, data_source_name: Any, query: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def sql_dataset_eager_fallback(driver_name: Any, data_source_name: Any, query: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def stats_aggregator_handle(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def stats_aggregator_handle_eager_fallback(container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def stats_aggregator_summary(iterator: Any, name: Optional[Any] = ...): ...
def stats_aggregator_summary_eager_fallback(iterator: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tf_record_dataset(filenames: Any, compression_type: Any, buffer_size: Any, name: Optional[Any] = ...): ...
def tf_record_dataset_eager_fallback(filenames: Any, compression_type: Any, buffer_size: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def take_dataset(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def take_dataset_eager_fallback(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_dataset(components: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def tensor_dataset_eager_fallback(components: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_slice_dataset(components: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def tensor_slice_dataset_eager_fallback(components: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def text_line_dataset(filenames: Any, compression_type: Any, buffer_size: Any, name: Optional[Any] = ...): ...
def text_line_dataset_eager_fallback(filenames: Any, compression_type: Any, buffer_size: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def unbatch_dataset(input_dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def unbatch_dataset_eager_fallback(input_dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def window_dataset(input_dataset: Any, size: Any, shift: Any, stride: Any, drop_remainder: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def window_dataset_eager_fallback(input_dataset: Any, size: Any, shift: Any, stride: Any, drop_remainder: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def zip_dataset(input_datasets: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...
def zip_dataset_eager_fallback(input_datasets: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
