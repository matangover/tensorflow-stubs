# Stubs for tensorflow.python.ops.gen_boosted_trees_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def boosted_trees_bucketize(float_values: Any, bucket_boundaries: Any, name: Optional[Any] = ...): ...
def boosted_trees_bucketize_eager_fallback(float_values: Any, bucket_boundaries: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _BoostedTreesCalculateBestGainsPerFeatureOutput = namedtuple('BoostedTreesCalculateBestGainsPerFeature', <ERROR>)

def boosted_trees_calculate_best_gains_per_feature(node_id_range: Any, stats_summary_list: Any, l1: Any, l2: Any, tree_complexity: Any, min_node_weight: Any, max_splits: Any, name: Optional[Any] = ...): ...
def boosted_trees_calculate_best_gains_per_feature_eager_fallback(node_id_range: Any, stats_summary_list: Any, l1: Any, l2: Any, tree_complexity: Any, min_node_weight: Any, max_splits: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_center_bias(tree_ensemble_handle: Any, mean_gradients: Any, mean_hessians: Any, l1: Any, l2: Any, name: Optional[Any] = ...): ...
def boosted_trees_center_bias_eager_fallback(tree_ensemble_handle: Any, mean_gradients: Any, mean_hessians: Any, l1: Any, l2: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_create_ensemble(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_serialized: Any, name: Optional[Any] = ...): ...
def boosted_trees_create_ensemble_eager_fallback(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_serialized: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_create_quantile_stream_resource(quantile_stream_resource_handle: Any, epsilon: Any, num_streams: Any, max_elements: int = ..., name: Optional[Any] = ...): ...
def boosted_trees_create_quantile_stream_resource_eager_fallback(quantile_stream_resource_handle: Any, epsilon: Any, num_streams: Any, max_elements: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_deserialize_ensemble(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_serialized: Any, name: Optional[Any] = ...): ...
def boosted_trees_deserialize_ensemble_eager_fallback(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_serialized: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_ensemble_resource_handle_op(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def boosted_trees_ensemble_resource_handle_op_eager_fallback(container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_example_debug_outputs(tree_ensemble_handle: Any, bucketized_features: Any, logits_dimension: Any, name: Optional[Any] = ...): ...
def boosted_trees_example_debug_outputs_eager_fallback(tree_ensemble_handle: Any, bucketized_features: Any, logits_dimension: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _BoostedTreesGetEnsembleStatesOutput = namedtuple('BoostedTreesGetEnsembleStates', <ERROR>)

def boosted_trees_get_ensemble_states(tree_ensemble_handle: Any, name: Optional[Any] = ...): ...
def boosted_trees_get_ensemble_states_eager_fallback(tree_ensemble_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_make_quantile_summaries(float_values: Any, example_weights: Any, epsilon: Any, name: Optional[Any] = ...): ...
def boosted_trees_make_quantile_summaries_eager_fallback(float_values: Any, example_weights: Any, epsilon: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_make_stats_summary(node_ids: Any, gradients: Any, hessians: Any, bucketized_features_list: Any, max_splits: Any, num_buckets: Any, name: Optional[Any] = ...): ...
def boosted_trees_make_stats_summary_eager_fallback(node_ids: Any, gradients: Any, hessians: Any, bucketized_features_list: Any, max_splits: Any, num_buckets: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_predict(tree_ensemble_handle: Any, bucketized_features: Any, logits_dimension: Any, name: Optional[Any] = ...): ...
def boosted_trees_predict_eager_fallback(tree_ensemble_handle: Any, bucketized_features: Any, logits_dimension: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_quantile_stream_resource_add_summaries(quantile_stream_resource_handle: Any, summaries: Any, name: Optional[Any] = ...): ...
def boosted_trees_quantile_stream_resource_add_summaries_eager_fallback(quantile_stream_resource_handle: Any, summaries: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_quantile_stream_resource_flush(quantile_stream_resource_handle: Any, num_buckets: Any, generate_quantiles: bool = ..., name: Optional[Any] = ...): ...
def boosted_trees_quantile_stream_resource_flush_eager_fallback(quantile_stream_resource_handle: Any, num_buckets: Any, generate_quantiles: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_quantile_stream_resource_get_bucket_boundaries(quantile_stream_resource_handle: Any, num_features: Any, name: Optional[Any] = ...): ...
def boosted_trees_quantile_stream_resource_get_bucket_boundaries_eager_fallback(quantile_stream_resource_handle: Any, num_features: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_quantile_stream_resource_handle_op(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def boosted_trees_quantile_stream_resource_handle_op_eager_fallback(container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _BoostedTreesSerializeEnsembleOutput = namedtuple('BoostedTreesSerializeEnsemble', <ERROR>)

def boosted_trees_serialize_ensemble(tree_ensemble_handle: Any, name: Optional[Any] = ...): ...
def boosted_trees_serialize_ensemble_eager_fallback(tree_ensemble_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _BoostedTreesTrainingPredictOutput = namedtuple('BoostedTreesTrainingPredict', <ERROR>)

def boosted_trees_training_predict(tree_ensemble_handle: Any, cached_tree_ids: Any, cached_node_ids: Any, bucketized_features: Any, logits_dimension: Any, name: Optional[Any] = ...): ...
def boosted_trees_training_predict_eager_fallback(tree_ensemble_handle: Any, cached_tree_ids: Any, cached_node_ids: Any, bucketized_features: Any, logits_dimension: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def boosted_trees_update_ensemble(tree_ensemble_handle: Any, feature_ids: Any, node_ids: Any, gains: Any, thresholds: Any, left_node_contribs: Any, right_node_contribs: Any, max_depth: Any, learning_rate: Any, pruning_mode: Any, name: Optional[Any] = ...): ...
def boosted_trees_update_ensemble_eager_fallback(tree_ensemble_handle: Any, feature_ids: Any, node_ids: Any, gains: Any, thresholds: Any, left_node_contribs: Any, right_node_contribs: Any, max_depth: Any, learning_rate: Any, pruning_mode: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def is_boosted_trees_ensemble_initialized(tree_ensemble_handle: Any, name: Optional[Any] = ...): ...
def is_boosted_trees_ensemble_initialized_eager_fallback(tree_ensemble_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def is_boosted_trees_quantile_stream_resource_initialized(quantile_stream_resource_handle: Any, name: Optional[Any] = ...): ...
def is_boosted_trees_quantile_stream_resource_initialized_eager_fallback(quantile_stream_resource_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
