# Stubs for tensorflow.python.ops.distributions.util (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, linalg_ops as linalg_ops, math_ops as math_ops, nn as nn
from tensorflow.python.util import tf_inspect as tf_inspect
from typing import Any as Any, Optional as Optional

def assert_integer_form(x: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., int_dtype: Optional[Any] = ..., name: str = ...): ...
def assert_symmetric(matrix: Any): ...
def embed_check_nonnegative_integer_form(x: Any, name: str = ...): ...
def same_dynamic_shape(a: Any, b: Any): ...
def maybe_get_static_value(x: Any, dtype: Optional[Any] = ...): ...
def get_logits_and_probs(logits: Optional[Any] = ..., probs: Optional[Any] = ..., multidimensional: bool = ..., validate_args: bool = ..., name: str = ..., dtype: Optional[Any] = ...): ...
def embed_check_categorical_event_shape(categorical_param: Any, name: str = ...): ...
def embed_check_integer_casting_closed(x: Any, target_dtype: Any, assert_nonnegative: bool = ..., name: str = ...): ...
def log_combinations(n: Any, counts: Any, name: str = ...): ...
def matrix_diag_transform(matrix: Any, transform: Optional[Any] = ..., name: Optional[Any] = ...): ...
def rotate_transpose(x: Any, shift: Any, name: str = ...): ...
def pick_vector(cond: Any, true_vector: Any, false_vector: Any, name: str = ...): ...
def prefer_static_broadcast_shape(shape1: Any, shape2: Any, name: str = ...): ...
def prefer_static_rank(x: Any): ...
def prefer_static_shape(x: Any): ...
def prefer_static_value(x: Any): ...
def gen_new_seed(seed: Any, salt: Any): ...
def fill_triangular(x: Any, upper: bool = ..., name: Optional[Any] = ...): ...
def fill_triangular_inverse(x: Any, upper: bool = ..., name: Optional[Any] = ...): ...
def tridiag(below: Optional[Any] = ..., diag: Optional[Any] = ..., above: Optional[Any] = ..., name: Optional[Any] = ...): ...
def reduce_weighted_logsumexp(logx: Any, w: Optional[Any] = ..., axis: Optional[Any] = ..., keep_dims: bool = ..., return_sign: bool = ..., name: Optional[Any] = ...): ...
def softplus_inverse(x: Any, name: Optional[Any] = ...): ...
def dimension_size(x: Any, axis: Any): ...
def process_quadrature_grid_and_probs(quadrature_grid_and_probs: Any, dtype: Any, validate_args: Any, name: Optional[Any] = ...): ...
def pad(x: Any, axis: Any, front: bool = ..., back: bool = ..., value: int = ..., count: int = ..., name: Optional[Any] = ...): ...
def parent_frame_arguments(): ...

class AppendDocstring:
    def __init__(self, additional_note: str = ..., kwargs_dict: Optional[Any] = ...) -> None: ...
    def __call__(self, fn: Any): ...
