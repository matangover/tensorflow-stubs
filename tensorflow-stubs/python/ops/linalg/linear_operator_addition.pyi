# Stubs for tensorflow.python.ops.linalg.linear_operator_addition (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.python.framework import ops as ops
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops
from tensorflow.python.ops.linalg import linear_operator as linear_operator, linear_operator_diag as linear_operator_diag, linear_operator_full_matrix as linear_operator_full_matrix, linear_operator_identity as linear_operator_identity, linear_operator_lower_triangular as linear_operator_lower_triangular
from typing import Any as Any, Optional as Optional

def add_operators(operators: Any, operator_name: Optional[Any] = ..., addition_tiers: Optional[Any] = ..., name: Optional[Any] = ...): ...

class _Hints:
    is_non_singular: Any = ...
    is_positive_definite: Any = ...
    is_self_adjoint: Any = ...
    def __init__(self, is_non_singular: Optional[Any] = ..., is_positive_definite: Optional[Any] = ..., is_self_adjoint: Optional[Any] = ...) -> None: ...

class _Adder(metaclass=abc.ABCMeta):
    @property
    def name(self): ...
    @abc.abstractmethod
    def can_add(self, op1: Any, op2: Any) -> Any: ...
    def add(self, op1: Any, op2: Any, operator_name: Any, hints: Optional[Any] = ...): ...

class _AddAndReturnScaledIdentity(_Adder):
    def can_add(self, op1: Any, op2: Any): ...

class _AddAndReturnDiag(_Adder):
    def can_add(self, op1: Any, op2: Any): ...

class _AddAndReturnTriL(_Adder):
    def can_add(self, op1: Any, op2: Any): ...

class _AddAndReturnMatrix(_Adder):
    def can_add(self, op1: Any, op2: Any): ...
