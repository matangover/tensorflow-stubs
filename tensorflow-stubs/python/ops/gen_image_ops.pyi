# Stubs for tensorflow.python.ops.gen_image_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def adjust_contrast(images: Any, contrast_factor: Any, min_value: Any, max_value: Any, name: Optional[Any] = ...): ...
def adjust_contrast_eager_fallback(images: Any, contrast_factor: Any, min_value: Any, max_value: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def adjust_contrastv2(images: Any, contrast_factor: Any, name: Optional[Any] = ...): ...
def adjust_contrastv2_eager_fallback(images: Any, contrast_factor: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def adjust_hue(images: Any, delta: Any, name: Optional[Any] = ...): ...
def adjust_hue_eager_fallback(images: Any, delta: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def adjust_saturation(images: Any, scale: Any, name: Optional[Any] = ...): ...
def adjust_saturation_eager_fallback(images: Any, scale: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def crop_and_resize(image: Any, boxes: Any, box_ind: Any, crop_size: Any, method: str = ..., extrapolation_value: int = ..., name: Optional[Any] = ...): ...
def crop_and_resize_eager_fallback(image: Any, boxes: Any, box_ind: Any, crop_size: Any, method: str = ..., extrapolation_value: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def crop_and_resize_grad_boxes(grads: Any, image: Any, boxes: Any, box_ind: Any, method: str = ..., name: Optional[Any] = ...): ...
def crop_and_resize_grad_boxes_eager_fallback(grads: Any, image: Any, boxes: Any, box_ind: Any, method: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def crop_and_resize_grad_image(grads: Any, boxes: Any, box_ind: Any, image_size: Any, T: Any, method: str = ..., name: Optional[Any] = ...): ...
def crop_and_resize_grad_image_eager_fallback(grads: Any, boxes: Any, box_ind: Any, image_size: Any, T: Any, method: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def decode_and_crop_jpeg(contents: Any, crop_window: Any, channels: int = ..., ratio: int = ..., fancy_upscaling: bool = ..., try_recover_truncated: bool = ..., acceptable_fraction: int = ..., dct_method: str = ..., name: Optional[Any] = ...): ...
def decode_and_crop_jpeg_eager_fallback(contents: Any, crop_window: Any, channels: int = ..., ratio: int = ..., fancy_upscaling: bool = ..., try_recover_truncated: bool = ..., acceptable_fraction: int = ..., dct_method: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def decode_bmp(contents: Any, channels: int = ..., name: Optional[Any] = ...): ...
def decode_bmp_eager_fallback(contents: Any, channels: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def decode_gif(contents: Any, name: Optional[Any] = ...): ...
def decode_gif_eager_fallback(contents: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def decode_jpeg(contents: Any, channels: int = ..., ratio: int = ..., fancy_upscaling: bool = ..., try_recover_truncated: bool = ..., acceptable_fraction: int = ..., dct_method: str = ..., name: Optional[Any] = ...): ...
def decode_jpeg_eager_fallback(contents: Any, channels: int = ..., ratio: int = ..., fancy_upscaling: bool = ..., try_recover_truncated: bool = ..., acceptable_fraction: int = ..., dct_method: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def decode_png(contents: Any, channels: int = ..., dtype: Any = ..., name: Optional[Any] = ...): ...
def decode_png_eager_fallback(contents: Any, channels: int = ..., dtype: Any = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def draw_bounding_boxes(images: Any, boxes: Any, name: Optional[Any] = ...): ...
def draw_bounding_boxes_eager_fallback(images: Any, boxes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def encode_jpeg(image: Any, format: str = ..., quality: int = ..., progressive: bool = ..., optimize_size: bool = ..., chroma_downsampling: bool = ..., density_unit: str = ..., x_density: int = ..., y_density: int = ..., xmp_metadata: str = ..., name: Optional[Any] = ...): ...
def encode_jpeg_eager_fallback(image: Any, format: str = ..., quality: int = ..., progressive: bool = ..., optimize_size: bool = ..., chroma_downsampling: bool = ..., density_unit: str = ..., x_density: int = ..., y_density: int = ..., xmp_metadata: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def encode_png(image: Any, compression: int = ..., name: Optional[Any] = ...): ...
def encode_png_eager_fallback(image: Any, compression: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def extract_glimpse(input: Any, size: Any, offsets: Any, centered: bool = ..., normalized: bool = ..., uniform_noise: bool = ..., name: Optional[Any] = ...): ...
def extract_glimpse_eager_fallback(input: Any, size: Any, offsets: Any, centered: bool = ..., normalized: bool = ..., uniform_noise: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def extract_jpeg_shape(contents: Any, output_type: Any = ..., name: Optional[Any] = ...): ...
def extract_jpeg_shape_eager_fallback(contents: Any, output_type: Any = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def hsv_to_rgb(images: Any, name: Optional[Any] = ...): ...
def hsv_to_rgb_eager_fallback(images: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def non_max_suppression(boxes: Any, scores: Any, max_output_size: Any, iou_threshold: float = ..., name: Optional[Any] = ...): ...
def non_max_suppression_eager_fallback(boxes: Any, scores: Any, max_output_size: Any, iou_threshold: float = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def non_max_suppression_v2(boxes: Any, scores: Any, max_output_size: Any, iou_threshold: Any, name: Optional[Any] = ...): ...
def non_max_suppression_v2_eager_fallback(boxes: Any, scores: Any, max_output_size: Any, iou_threshold: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def non_max_suppression_v3(boxes: Any, scores: Any, max_output_size: Any, iou_threshold: Any, score_threshold: Any, name: Optional[Any] = ...): ...
def non_max_suppression_v3_eager_fallback(boxes: Any, scores: Any, max_output_size: Any, iou_threshold: Any, score_threshold: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _NonMaxSuppressionV4Output = namedtuple('NonMaxSuppressionV4', <ERROR>)

def non_max_suppression_v4(boxes: Any, scores: Any, max_output_size: Any, iou_threshold: Any, score_threshold: Any, pad_to_max_output_size: bool = ..., name: Optional[Any] = ...): ...
def non_max_suppression_v4_eager_fallback(boxes: Any, scores: Any, max_output_size: Any, iou_threshold: Any, score_threshold: Any, pad_to_max_output_size: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def non_max_suppression_with_overlaps(overlaps: Any, scores: Any, max_output_size: Any, overlap_threshold: Any, score_threshold: Any, name: Optional[Any] = ...): ...
def non_max_suppression_with_overlaps_eager_fallback(overlaps: Any, scores: Any, max_output_size: Any, overlap_threshold: Any, score_threshold: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _QuantizedResizeBilinearOutput = namedtuple('QuantizedResizeBilinear', <ERROR>)

def quantized_resize_bilinear(images: Any, size: Any, min: Any, max: Any, align_corners: bool = ..., name: Optional[Any] = ...): ...
def quantized_resize_bilinear_eager_fallback(images: Any, size: Any, min: Any, max: Any, align_corners: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def rgb_to_hsv(images: Any, name: Optional[Any] = ...): ...
def rgb_to_hsv_eager_fallback(images: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def random_crop(image: Any, size: Any, seed: int = ..., seed2: int = ..., name: Optional[Any] = ...): ...
def random_crop_eager_fallback(image: Any, size: Any, seed: int = ..., seed2: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resize_area(images: Any, size: Any, align_corners: bool = ..., name: Optional[Any] = ...): ...
def resize_area_eager_fallback(images: Any, size: Any, align_corners: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resize_bicubic(images: Any, size: Any, align_corners: bool = ..., name: Optional[Any] = ...): ...
def resize_bicubic_eager_fallback(images: Any, size: Any, align_corners: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resize_bicubic_grad(grads: Any, original_image: Any, align_corners: bool = ..., name: Optional[Any] = ...): ...
def resize_bicubic_grad_eager_fallback(grads: Any, original_image: Any, align_corners: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resize_bilinear(images: Any, size: Any, align_corners: bool = ..., name: Optional[Any] = ...): ...
def resize_bilinear_eager_fallback(images: Any, size: Any, align_corners: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resize_bilinear_grad(grads: Any, original_image: Any, align_corners: bool = ..., name: Optional[Any] = ...): ...
def resize_bilinear_grad_eager_fallback(grads: Any, original_image: Any, align_corners: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resize_nearest_neighbor(images: Any, size: Any, align_corners: bool = ..., name: Optional[Any] = ...): ...
def resize_nearest_neighbor_eager_fallback(images: Any, size: Any, align_corners: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resize_nearest_neighbor_grad(grads: Any, size: Any, align_corners: bool = ..., name: Optional[Any] = ...): ...
def resize_nearest_neighbor_grad_eager_fallback(grads: Any, size: Any, align_corners: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _SampleDistortedBoundingBoxOutput = namedtuple('SampleDistortedBoundingBox', <ERROR>)

def sample_distorted_bounding_box(image_size: Any, bounding_boxes: Any, seed: int = ..., seed2: int = ..., min_object_covered: float = ..., aspect_ratio_range: Any = ..., area_range: Any = ..., max_attempts: int = ..., use_image_if_no_bounding_boxes: bool = ..., name: Optional[Any] = ...): ...
def sample_distorted_bounding_box_eager_fallback(image_size: Any, bounding_boxes: Any, seed: int = ..., seed2: int = ..., min_object_covered: float = ..., aspect_ratio_range: Any = ..., area_range: Any = ..., max_attempts: int = ..., use_image_if_no_bounding_boxes: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _SampleDistortedBoundingBoxV2Output = namedtuple('SampleDistortedBoundingBoxV2', <ERROR>)

def sample_distorted_bounding_box_v2(image_size: Any, bounding_boxes: Any, min_object_covered: Any, seed: int = ..., seed2: int = ..., aspect_ratio_range: Any = ..., area_range: Any = ..., max_attempts: int = ..., use_image_if_no_bounding_boxes: bool = ..., name: Optional[Any] = ...): ...
def sample_distorted_bounding_box_v2_eager_fallback(image_size: Any, bounding_boxes: Any, min_object_covered: Any, seed: int = ..., seed2: int = ..., aspect_ratio_range: Any = ..., area_range: Any = ..., max_attempts: int = ..., use_image_if_no_bounding_boxes: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
