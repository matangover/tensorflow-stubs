# Stubs for tensorflow.python.ops.state_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.ops.gen_state_ops import *
from tensorflow.python.framework import ops as ops, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, gen_math_ops as gen_math_ops, gen_resource_variable_ops as gen_resource_variable_ops, gen_state_ops as gen_state_ops
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def variable_op(shape: Any, dtype: Any, name: str = ..., set_shape: bool = ..., container: str = ..., shared_name: str = ...): ...
def variable_op_v2(shape: Any, dtype: Any, name: str = ..., container: str = ..., shared_name: str = ...): ...
def init_variable(v: Any, init: Any, name: str = ...): ...
def is_variable_initialized(ref: Any, name: Optional[Any] = ...): ...
def assign_sub(ref: Any, value: Any, use_locking: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assign_add(ref: Any, value: Any, use_locking: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assign(ref: Any, value: Any, validate_shape: Optional[Any] = ..., use_locking: Optional[Any] = ..., name: Optional[Any] = ...): ...
def count_up_to(ref: Any, limit: Any, name: Optional[Any] = ...): ...
def scatter_update(ref: Any, indices: Any, updates: Any, use_locking: bool = ..., name: Optional[Any] = ...): ...
def scatter_nd_update(ref: Any, indices: Any, updates: Any, use_locking: bool = ..., name: Optional[Any] = ...): ...
def scatter_add(ref: Any, indices: Any, updates: Any, use_locking: bool = ..., name: Optional[Any] = ...): ...
def scatter_nd_add(ref: Any, indices: Any, updates: Any, use_locking: bool = ..., name: Optional[Any] = ...): ...
def scatter_sub(ref: Any, indices: Any, updates: Any, use_locking: bool = ..., name: Optional[Any] = ...): ...
def scatter_nd_sub(ref: Any, indices: Any, updates: Any, use_locking: bool = ..., name: Optional[Any] = ...): ...
def batch_scatter_update(ref: Any, indices: Any, updates: Any, use_locking: bool = ..., name: Optional[Any] = ...): ...
