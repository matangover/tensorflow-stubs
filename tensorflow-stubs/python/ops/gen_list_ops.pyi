# Stubs for tensorflow.python.ops.gen_list_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def empty_tensor_list(element_shape: Any, element_dtype: Any, name: Optional[Any] = ...): ...
def empty_tensor_list_eager_fallback(element_shape: Any, element_dtype: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_concat_lists(input_a: Any, input_b: Any, element_dtype: Any, name: Optional[Any] = ...): ...
def tensor_list_concat_lists_eager_fallback(input_a: Any, input_b: Any, element_dtype: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_element_shape(input_handle: Any, shape_type: Any, name: Optional[Any] = ...): ...
def tensor_list_element_shape_eager_fallback(input_handle: Any, shape_type: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_from_tensor(tensor: Any, element_shape: Any, name: Optional[Any] = ...): ...
def tensor_list_from_tensor_eager_fallback(tensor: Any, element_shape: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_gather(input_handle: Any, indices: Any, element_dtype: Any, name: Optional[Any] = ...): ...
def tensor_list_gather_eager_fallback(input_handle: Any, indices: Any, element_dtype: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_get_item(input_handle: Any, index: Any, element_dtype: Any, name: Optional[Any] = ...): ...
def tensor_list_get_item_eager_fallback(input_handle: Any, index: Any, element_dtype: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_length(input_handle: Any, name: Optional[Any] = ...): ...
def tensor_list_length_eager_fallback(input_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _TensorListPopBackOutput = namedtuple('TensorListPopBack', <ERROR>)

def tensor_list_pop_back(input_handle: Any, element_dtype: Any, name: Optional[Any] = ...): ...
def tensor_list_pop_back_eager_fallback(input_handle: Any, element_dtype: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_push_back(input_handle: Any, tensor: Any, name: Optional[Any] = ...): ...
def tensor_list_push_back_eager_fallback(input_handle: Any, tensor: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_push_back_batch(input_handles: Any, tensor: Any, name: Optional[Any] = ...): ...
def tensor_list_push_back_batch_eager_fallback(input_handles: Any, tensor: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_reserve(element_shape: Any, num_elements: Any, element_dtype: Any, name: Optional[Any] = ...): ...
def tensor_list_reserve_eager_fallback(element_shape: Any, num_elements: Any, element_dtype: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_scatter(tensor: Any, indices: Any, element_shape: Any, name: Optional[Any] = ...): ...
def tensor_list_scatter_eager_fallback(tensor: Any, indices: Any, element_shape: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_set_item(input_handle: Any, index: Any, item: Any, name: Optional[Any] = ...): ...
def tensor_list_set_item_eager_fallback(input_handle: Any, index: Any, item: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tensor_list_stack(input_handle: Any, element_dtype: Any, num_elements: int = ..., name: Optional[Any] = ...): ...
def tensor_list_stack_eager_fallback(input_handle: Any, element_dtype: Any, num_elements: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
