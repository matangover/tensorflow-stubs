# Stubs for tensorflow.python.client.session (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.core.protobuf import config_pb2 as config_pb2
from tensorflow.python.framework import device as device, error_interpolation as error_interpolation, errors as errors, ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.ops import session_ops as session_ops
from tensorflow.python.util import compat as compat, nest as nest
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

class SessionInterface:
    @property
    def graph(self) -> None: ...
    @property
    def sess_str(self) -> None: ...
    def run(self, fetches: Any, feed_dict: Optional[Any] = ..., options: Optional[Any] = ..., run_metadata: Optional[Any] = ...) -> None: ...
    def partial_run_setup(self, fetches: Any, feeds: Optional[Any] = ...) -> None: ...
    def partial_run(self, handle: Any, fetches: Any, feed_dict: Optional[Any] = ...) -> None: ...

def register_session_run_conversion_functions(tensor_type: Any, fetch_function: Any, feed_function: Optional[Any] = ..., feed_function_for_partial_run: Optional[Any] = ...) -> None: ...

class _FetchMapper:
    def unique_fetches(self) -> None: ...
    def build_results(self, values: Any) -> None: ...
    @staticmethod
    def for_fetch(fetch: Any): ...

class _ElementFetchMapper(_FetchMapper):
    def __init__(self, fetches: Any, contraction_fn: Any) -> None: ...
    def unique_fetches(self): ...
    def build_results(self, values: Any): ...

class _ListFetchMapper(_FetchMapper):
    def __init__(self, fetches: Any) -> None: ...
    def unique_fetches(self): ...
    def build_results(self, values: Any): ...

class _DictFetchMapper(_FetchMapper):
    def __init__(self, fetches: Any) -> None: ...
    def unique_fetches(self): ...
    def build_results(self, values: Any): ...

class _AttrsFetchMapper(_FetchMapper):
    def __init__(self, fetches: Any) -> None: ...
    def unique_fetches(self): ...
    def build_results(self, values: Any): ...

class _FetchHandler:
    def __init__(self, graph: Any, fetches: Any, feeds: Any, feed_handles: Optional[Any] = ...) -> None: ...
    def fetches(self): ...
    def targets(self): ...
    def build_results(self, session: Any, tensor_values: Any): ...

class _DeviceAttributes:
    def __init__(self, name: Any, device_type: Any, memory_limit_bytes: Any, incarnation: Any) -> None: ...
    @property
    def name(self): ...
    @property
    def device_type(self): ...
    @property
    def memory_limit_bytes(self): ...
    @property
    def incarnation(self): ...

class BaseSession(SessionInterface):
    def __init__(self, target: str = ..., graph: Optional[Any] = ..., config: Optional[Any] = ...) -> None: ...
    def list_devices(self): ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...
    @property
    def graph(self): ...
    @property
    def graph_def(self): ...
    @property
    def sess_str(self): ...
    def as_default(self): ...
    def run(self, fetches: Any, feed_dict: Optional[Any] = ..., options: Optional[Any] = ..., run_metadata: Optional[Any] = ...): ...
    def partial_run(self, handle: Any, fetches: Any, feed_dict: Optional[Any] = ...): ...
    def partial_run_setup(self, fetches: Any, feeds: Optional[Any] = ...): ...
    def make_callable(self, fetches: Any, feed_list: Optional[Any] = ..., accept_options: bool = ...): ...
    class _Callable:
        def __init__(self, session: Any, callable_options: Any) -> None: ...
        def __call__(self, *args: Any, **kwargs: Any): ...
        def __del__(self) -> None: ...

class Session(BaseSession):
    def __init__(self, target: str = ..., graph: Optional[Any] = ..., config: Optional[Any] = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exec_type: Any, exec_value: Any, exec_tb: Any) -> None: ...
    @staticmethod
    def reset(target: Any, containers: Optional[Any] = ..., config: Optional[Any] = ...) -> None: ...

class InteractiveSession(BaseSession):
    def __init__(self, target: str = ..., graph: Optional[Any] = ..., config: Optional[Any] = ...) -> None: ...
    def close(self) -> None: ...
