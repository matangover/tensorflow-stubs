# Stubs for tensorflow.python.client.timeline (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any as Any, Optional as Optional

class AllocationMaximum: ...
class StepStatsAnalysis: ...

class _ChromeTraceFormatter:
    def __init__(self, show_memory: bool = ...) -> None: ...
    def emit_pid(self, name: Any, pid: Any) -> None: ...
    def emit_tid(self, name: Any, pid: Any, tid: Any) -> None: ...
    def emit_region(self, timestamp: Any, duration: Any, pid: Any, tid: Any, category: Any, name: Any, args: Any) -> None: ...
    def emit_obj_create(self, category: Any, name: Any, timestamp: Any, pid: Any, tid: Any, object_id: Any) -> None: ...
    def emit_obj_delete(self, category: Any, name: Any, timestamp: Any, pid: Any, tid: Any, object_id: Any) -> None: ...
    def emit_obj_snapshot(self, category: Any, name: Any, timestamp: Any, pid: Any, tid: Any, object_id: Any, snapshot: Any) -> None: ...
    def emit_flow_start(self, name: Any, timestamp: Any, pid: Any, tid: Any, flow_id: Any) -> None: ...
    def emit_flow_end(self, name: Any, timestamp: Any, pid: Any, tid: Any, flow_id: Any) -> None: ...
    def emit_counter(self, category: Any, name: Any, pid: Any, timestamp: Any, counter: Any, value: Any) -> None: ...
    def emit_counters(self, category: Any, name: Any, pid: Any, timestamp: Any, counters: Any) -> None: ...
    def format_to_string(self, pretty: bool = ...): ...

class _TensorTracker:
    def __init__(self, name: Any, object_id: Any, timestamp: Any, pid: Any, allocator: Any, num_bytes: Any) -> None: ...
    @property
    def name(self): ...
    @property
    def pid(self): ...
    @property
    def create_time(self): ...
    @property
    def object_id(self): ...
    @property
    def num_bytes(self): ...
    @property
    def allocator(self): ...
    @property
    def last_unref(self): ...
    def add_ref(self, timestamp: Any) -> None: ...
    def add_unref(self, timestamp: Any) -> None: ...

class Timeline:
    def __init__(self, step_stats: Any, graph: Optional[Any] = ...) -> None: ...
    def analyze_step_stats(self, show_dataflow: bool = ..., show_memory: bool = ...): ...
    def generate_chrome_trace_format(self, show_dataflow: bool = ..., show_memory: bool = ...): ...
