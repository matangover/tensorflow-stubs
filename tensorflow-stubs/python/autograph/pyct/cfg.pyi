# Stubs for tensorflow.python.autograph.pyct.cfg (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import gast as gast
from enum import Enum as Enum
from tensorflow.python.autograph.pyct import compiler as compiler
from typing import Any as Any

class Node:
    next: Any = ...
    prev: Any = ...
    ast_node: Any = ...
    def __init__(self, next_: Any, prev: Any, ast_node: Any) -> None: ...
    def freeze(self) -> None: ...

class Graph: ...

class _WalkMode(Enum):
    FORWARD: int = ...
    REVERSE: int = ...

class GraphVisitor:
    graph: Any = ...
    def __init__(self, graph: Any) -> None: ...
    def init_state(self, node: Any) -> None: ...
    def visit_node(self, node: Any) -> None: ...
    in_: Any = ...
    out: Any = ...
    def reset(self) -> None: ...
    def visit_forward(self) -> None: ...
    def visit_reverse(self) -> None: ...

class GraphBuilder:
    parent: Any = ...
    def __init__(self, parent_ast_node: Any) -> None: ...
    head: Any = ...
    errors: Any = ...
    node_index: Any = ...
    leaves: Any = ...
    active_stmts: Any = ...
    owners: Any = ...
    forward_edges: Any = ...
    finally_sections: Any = ...
    finally_section_subgraphs: Any = ...
    finally_section_has_direct_flow: Any = ...
    pending_finally_sections: Any = ...
    exits: Any = ...
    section_entry: Any = ...
    continues: Any = ...
    cond_entry: Any = ...
    cond_leaves: Any = ...
    def reset(self) -> None: ...
    def begin_statement(self, stmt: Any) -> None: ...
    def end_statement(self, stmt: Any) -> None: ...
    def add_ordinary_node(self, ast_node: Any): ...
    def add_exit_node(self, ast_node: Any, section_id: Any, guards: Any) -> None: ...
    def add_continue_node(self, ast_node: Any, section_id: Any, guards: Any) -> None: ...
    def add_error_node(self, ast_node: Any, guards: Any) -> None: ...
    def enter_section(self, section_id: Any) -> None: ...
    def exit_section(self, section_id: Any) -> None: ...
    def enter_loop_section(self, section_id: Any, entry_node: Any) -> None: ...
    def exit_loop_section(self, section_id: Any) -> None: ...
    def enter_cond_section(self, section_id: Any) -> None: ...
    def new_cond_branch(self, section_id: Any) -> None: ...
    def exit_cond_section(self, section_id: Any) -> None: ...
    def enter_finally_section(self, section_id: Any) -> None: ...
    def exit_finally_section(self, section_id: Any) -> None: ...
    def build(self): ...

class AstToCfg(gast.NodeVisitor):
    builder_stack: Any = ...
    builder: Any = ...
    cfgs: Any = ...
    lexical_scopes: Any = ...
    def __init__(self) -> None: ...
    def visit_FunctionDef(self, node: Any) -> None: ...
    def visit_Lambda(self, node: Any) -> None: ...
    def visit_Return(self, node: Any) -> None: ...
    def visit_Expr(self, node: Any) -> None: ...
    def visit_Assign(self, node: Any) -> None: ...
    def visit_AnnAssign(self, node: Any) -> None: ...
    def visit_AugAssign(self, node: Any) -> None: ...
    def visit_Print(self, node: Any) -> None: ...
    def visit_Raise(self, node: Any) -> None: ...
    def visit_Assert(self, node: Any) -> None: ...
    def visit_Delete(self, node: Any) -> None: ...
    def visit_If(self, node: Any) -> None: ...
    def visit_While(self, node: Any) -> None: ...
    def visit_For(self, node: Any) -> None: ...
    def visit_Break(self, node: Any) -> None: ...
    def visit_Continue(self, node: Any) -> None: ...
    def visit_Try(self, node: Any) -> None: ...
    def visit_With(self, node: Any) -> None: ...

def build(node: Any): ...
