# Stubs for tensorflow.python.autograph.pyct.transformer (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import gast as gast
from tensorflow.python.autograph.pyct import anno as anno, compiler as compiler, pretty_printer as pretty_printer
from typing import Any as Any, Optional as Optional

class AutographParseError(SyntaxError): ...

class EntityInfo:
    source_code: Any = ...
    source_file: Any = ...
    namespace: Any = ...
    arg_values: Any = ...
    arg_types: Any = ...
    owner_type: Any = ...
    def __init__(self, source_code: Any, source_file: Any, namespace: Any, arg_values: Any, arg_types: Any, owner_type: Any) -> None: ...

class _StateStack:
    def __init__(self, type_: Any) -> None: ...
    def enter(self) -> None: ...
    def exit(self): ...
    @property
    def level(self): ...
    @property
    def value(self): ...
    def __getattr__(self, key: Any): ...
    def __setattr__(self, key: Any, value: Any) -> None: ...

class _State:
    def __init__(self) -> None: ...
    def __getitem__(self, key: Any): ...

class Base(gast.NodeTransformer):
    entity_info: Any = ...
    state: Any = ...
    def __init__(self, entity_info: Any) -> None: ...
    @property
    def enclosing_entities(self): ...
    @property
    def local_scope_level(self): ...
    def enter_local_scope(self, inherit: Optional[Any] = ...) -> None: ...
    def exit_local_scope(self, keep: Optional[Any] = ...): ...
    def set_local(self, name: Any, value: Any) -> None: ...
    def get_local(self, name: Any, default: Optional[Any] = ...): ...
    def debug_print(self, node: Any): ...
    def visit_block(self, nodes: Any, before_visit: Optional[Any] = ..., after_visit: Optional[Any] = ...): ...
    def apply_to_single_assignments(self, targets: Any, values: Any, apply_fn: Any) -> None: ...
    def visit(self, node: Any): ...
