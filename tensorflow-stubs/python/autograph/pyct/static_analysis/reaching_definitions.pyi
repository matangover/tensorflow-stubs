# Stubs for tensorflow.python.autograph.pyct.static_analysis.reaching_definitions (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.autograph.pyct import anno as anno, cfg as cfg, transformer as transformer
from tensorflow.python.autograph.pyct.static_analysis import annos as annos
from typing import Any as Any, Optional as Optional

class Definition:
    param_of: Any = ...
    def __init__(self) -> None: ...

class _NodeState:
    value: Any = ...
    def __init__(self, init_from: Optional[Any] = ...) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __sub__(self, other: Any): ...

class Analyzer(cfg.GraphVisitor):
    extra_in: Any = ...
    gen_map: Any = ...
    def __init__(self, graph: Any, definition_factory: Any) -> None: ...
    def init_state(self, _: Any): ...
    def visit_node(self, node: Any): ...

class TreeAnnotator(transformer.Base):
    definition_factory: Any = ...
    graphs: Any = ...
    current_analyzer: Any = ...
    current_cfg_node: Any = ...
    def __init__(self, source_info: Any, graphs: Any, definition_factory: Any) -> None: ...
    def visit_FunctionDef(self, node: Any): ...
    def visit_nonlocal(self, node: Any) -> None: ...
    def visit_global(self, node: Any) -> None: ...
    def visit_Name(self, node: Any): ...
    def visit_If(self, node: Any): ...
    def visit_For(self, node: Any): ...
    def visit_While(self, node: Any): ...
    def visit(self, node: Any): ...

def resolve(node: Any, source_info: Any, graphs: Any, definition_factory: Any): ...
