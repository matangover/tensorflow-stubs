# Stubs for tensorflow.contrib.lookup.lookup_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import gen_lookup_ops as gen_lookup_ops, lookup_ops as lookup_ops
from tensorflow.python.ops.lookup_ops import FastHashSpec as FastHashSpec, HashTable as HashTable, HasherSpec as HasherSpec, IdTableWithHashBuckets as IdTableWithHashBuckets, InitializableLookupTableBase as InitializableLookupTableBase, KeyValueTensorInitializer as KeyValueTensorInitializer, LookupInterface as LookupInterface, StrongHashSpec as StrongHashSpec, TableInitializerBase as TableInitializerBase, TextFileIdTableInitializer as TextFileIdTableInitializer, TextFileIndex as TextFileIndex, TextFileInitializer as TextFileInitializer, TextFileStringTableInitializer as TextFileStringTableInitializer, index_table_from_file as index_table_from_file, index_to_string_table_from_file as index_to_string_table_from_file
from tensorflow.python.training.checkpointable import base as checkpointable
from tensorflow.python.training.saver import BaseSaverBuilder as BaseSaverBuilder
from tensorflow.python.util.deprecation import deprecated as deprecated
from typing import Any as Any, Optional as Optional

def string_to_index_table_from_file(vocabulary_file: Optional[Any] = ..., num_oov_buckets: int = ..., vocab_size: Optional[Any] = ..., default_value: int = ..., hasher_spec: Any = ..., name: Optional[Any] = ...): ...
def string_to_index_table_from_tensor(mapping: Any, num_oov_buckets: int = ..., default_value: int = ..., hasher_spec: Any = ..., name: Optional[Any] = ...): ...
def index_table_from_tensor(mapping: Any, num_oov_buckets: int = ..., default_value: int = ..., hasher_spec: Any = ..., dtype: Any = ..., name: Optional[Any] = ...): ...
def string_to_index(tensor: Any, mapping: Any, default_value: int = ..., name: Optional[Any] = ...): ...
def index_to_string_table_from_tensor(mapping: Any, default_value: str = ..., name: Optional[Any] = ...): ...
def index_to_string(tensor: Any, mapping: Any, default_value: str = ..., name: Optional[Any] = ...): ...

class MutableHashTable(LookupInterface, checkpointable.CheckpointableBase):
    def __init__(self, key_dtype: Any, value_dtype: Any, default_value: Any, shared_name: Optional[Any] = ..., name: str = ..., checkpoint: bool = ...) -> None: ...
    def size(self, name: Optional[Any] = ...): ...
    def lookup(self, keys: Any, name: Optional[Any] = ...): ...
    def insert(self, keys: Any, values: Any, name: Optional[Any] = ...): ...
    def export(self, name: Optional[Any] = ...): ...
    class _Saveable(BaseSaverBuilder.SaveableObject):
        def __init__(self, table: Any, name: Any) -> None: ...
        def restore(self, restored_tensors: Any, restored_shapes: Any): ...

class MutableDenseHashTable(LookupInterface, checkpointable.CheckpointableBase):
    def __init__(self, key_dtype: Any, value_dtype: Any, default_value: Any, empty_key: Any, initial_num_buckets: Optional[Any] = ..., shared_name: Optional[Any] = ..., name: str = ..., checkpoint: bool = ...) -> None: ...
    def size(self, name: Optional[Any] = ...): ...
    def lookup(self, keys: Any, name: Optional[Any] = ...): ...
    def insert(self, keys: Any, values: Any, name: Optional[Any] = ...): ...
    def export(self, name: Optional[Any] = ...): ...
    class _Saveable(BaseSaverBuilder.SaveableObject):
        def __init__(self, table: Any, name: Any) -> None: ...
        def restore(self, restored_tensors: Any, restored_shapes: Any): ...
