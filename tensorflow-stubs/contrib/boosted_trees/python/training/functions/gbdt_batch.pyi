# Stubs for tensorflow.contrib.boosted_trees.python.training.functions.gbdt_batch (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.contrib import learn as learn, stateless as stateless
from tensorflow.contrib.boosted_trees.lib.learner.batch import categorical_split_handler as categorical_split_handler, ordinal_split_handler as ordinal_split_handler
from tensorflow.contrib.boosted_trees.proto import learner_pb2 as learner_pb2
from tensorflow.contrib.boosted_trees.python.ops import batch_ops_utils as batch_ops_utils, gen_model_ops as gen_model_ops, model_ops as model_ops, prediction_ops as prediction_ops, stats_accumulator_ops as stats_accumulator_ops, training_ops as training_ops
from tensorflow.contrib.layers.python.layers import feature_column_ops as feature_column_ops
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, gradients_impl as gradients_impl, math_ops as math_ops, variable_scope as variable_scope, variables as variables
from tensorflow.python.ops.losses import losses as losses
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import device_setter as device_setter
from typing import Any as Any, Optional as Optional

ENSEMBLE_STAMP: str
PREDICTIONS: str
PARTITION_IDS: str
NUM_LAYERS_ATTEMPTED: str
NUM_TREES_ATTEMPTED: str
NUM_USED_HANDLERS: str
USED_HANDLERS_MASK: str
LEAF_INDEX: str

GBDTTrainingState = namedtuple('GBDTTrainingState', ['num_layer_examples', 'num_layer_steps', 'num_layers', 'active_tree', 'active_layer', 'continue_centering', 'bias_stats_accumulator', 'steps_accumulator', 'handlers'])

class _OpRoundRobinStrategy:
    def __init__(self, ps_ops: Any, num_tasks: Any) -> None: ...
    def __call__(self, op: Any): ...

def extract_features(features: Any, feature_columns: Any, use_core_columns: Any): ...

class GradientBoostedDecisionTreeModel:
    def __init__(self, is_chief: Any, num_ps_replicas: Any, ensemble_handle: Any, center_bias: Any, examples_per_layer: Any, learner_config: Any, features: Any, logits_dimension: Any, loss_reduction: Any = ..., feature_columns: Optional[Any] = ..., use_core_columns: bool = ..., output_leaf_index: bool = ..., output_leaf_index_modes: Optional[Any] = ..., num_quantiles: int = ...) -> None: ...
    def predict(self, mode: Any): ...
    def update_stats(self, loss: Any, predictions_dict: Any): ...
    def increment_step_counter_and_maybe_update_ensemble(self, predictions_dict: Any, training_state: Any): ...
    def make_update_ensemble_fn(self, ensemble_stamp: Any, training_state: Any, dropout_seed: Any, class_id: Any): ...
    def get_number_of_trees_tensor(self): ...
    def get_max_tree_depth(self): ...
    def train(self, loss: Any, predictions_dict: Any, labels: Any): ...
