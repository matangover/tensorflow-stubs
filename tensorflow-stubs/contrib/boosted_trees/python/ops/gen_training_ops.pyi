# Stubs for tensorflow.contrib.boosted_trees.python.ops.gen_training_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def center_tree_ensemble_bias(tree_ensemble_handle: Any, stamp_token: Any, next_stamp_token: Any, delta_updates: Any, learner_config: Any, centering_epsilon: float = ..., name: Optional[Any] = ...): ...
def center_tree_ensemble_bias_eager_fallback(tree_ensemble_handle: Any, stamp_token: Any, next_stamp_token: Any, delta_updates: Any, learner_config: Any, centering_epsilon: float = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def grow_tree_ensemble(tree_ensemble_handle: Any, stamp_token: Any, next_stamp_token: Any, learning_rate: Any, dropout_seed: Any, max_tree_depth: Any, weak_learner_type: Any, partition_ids: Any, gains: Any, splits: Any, learner_config: Any, center_bias: Any, name: Optional[Any] = ...): ...
def grow_tree_ensemble_eager_fallback(tree_ensemble_handle: Any, stamp_token: Any, next_stamp_token: Any, learning_rate: Any, dropout_seed: Any, max_tree_depth: Any, weak_learner_type: Any, partition_ids: Any, gains: Any, splits: Any, learner_config: Any, center_bias: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _TreeEnsembleStatsOutput = namedtuple('TreeEnsembleStats', <ERROR>)

def tree_ensemble_stats(tree_ensemble_handle: Any, stamp_token: Any, name: Optional[Any] = ...): ...
def tree_ensemble_stats_eager_fallback(tree_ensemble_handle: Any, stamp_token: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
