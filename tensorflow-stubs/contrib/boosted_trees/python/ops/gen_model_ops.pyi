# Stubs for tensorflow.contrib.boosted_trees.python.ops.gen_model_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def create_tree_ensemble_variable(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_config: Any, name: Optional[Any] = ...): ...
def create_tree_ensemble_variable_eager_fallback(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_config: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def decision_tree_ensemble_resource_handle_op(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def decision_tree_ensemble_resource_handle_op_eager_fallback(container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tree_ensemble_deserialize(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_config: Any, name: Optional[Any] = ...): ...
def tree_ensemble_deserialize_eager_fallback(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_config: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tree_ensemble_is_initialized_op(tree_ensemble_handle: Any, name: Optional[Any] = ...): ...
def tree_ensemble_is_initialized_op_eager_fallback(tree_ensemble_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _TreeEnsembleSerializeOutput = namedtuple('TreeEnsembleSerialize', <ERROR>)

def tree_ensemble_serialize(tree_ensemble_handle: Any, name: Optional[Any] = ...): ...
def tree_ensemble_serialize_eager_fallback(tree_ensemble_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tree_ensemble_stamp_token(tree_ensemble_handle: Any, name: Optional[Any] = ...): ...
def tree_ensemble_stamp_token_eager_fallback(tree_ensemble_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _TreeEnsembleUsedHandlersOutput = namedtuple('TreeEnsembleUsedHandlers', <ERROR>)

def tree_ensemble_used_handlers(tree_ensemble_handle: Any, stamp_token: Any, num_all_handlers: Any, name: Optional[Any] = ...): ...
def tree_ensemble_used_handlers_eager_fallback(tree_ensemble_handle: Any, stamp_token: Any, num_all_handlers: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
