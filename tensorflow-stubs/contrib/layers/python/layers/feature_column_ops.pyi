# Stubs for tensorflow.contrib.layers.python.layers.feature_column_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.framework.python.framework import experimental as experimental
from tensorflow.contrib.layers.python.layers import embedding_ops as embedding_ops, layers as layers
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, init_ops as init_ops, math_ops as math_ops, nn_ops as nn_ops, parsing_ops as parsing_ops, sparse_ops as sparse_ops, variable_scope as variable_scope
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

def input_from_feature_columns(columns_to_tensors: Any, feature_columns: Any, weight_collections: Optional[Any] = ..., trainable: bool = ..., scope: Optional[Any] = ..., cols_to_outs: Optional[Any] = ...): ...
def sequence_input_from_feature_columns(columns_to_tensors: Any, feature_columns: Any, weight_collections: Optional[Any] = ..., trainable: bool = ..., scope: Optional[Any] = ...): ...
def joint_weighted_sum_from_feature_columns(columns_to_tensors: Any, feature_columns: Any, num_outputs: Any, weight_collections: Optional[Any] = ..., trainable: bool = ..., scope: Optional[Any] = ...): ...
def weighted_sum_from_feature_columns(columns_to_tensors: Any, feature_columns: Any, num_outputs: Any, weight_collections: Optional[Any] = ..., trainable: bool = ..., scope: Optional[Any] = ...): ...
def parse_feature_columns_from_examples(serialized: Any, feature_columns: Any, name: Optional[Any] = ..., example_names: Optional[Any] = ...): ...
def transform_features(features: Any, feature_columns: Any): ...
def parse_feature_columns_from_sequence_examples(serialized: Any, context_feature_columns: Any, sequence_feature_columns: Any, name: Optional[Any] = ..., example_name: Optional[Any] = ...): ...
def infer_real_valued_columns(features: Any): ...
def check_feature_columns(feature_columns: Any) -> None: ...

class _Transformer:
    def __init__(self, columns_to_tensors: Any) -> None: ...
    def transform(self, feature_column: Any): ...
