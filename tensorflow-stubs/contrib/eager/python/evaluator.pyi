# Stubs for tensorflow.contrib.eager.python.evaluator (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.eager.python import datasets as datasets, metrics as metrics
from tensorflow.python.eager import context as context, function as function
from tensorflow.python.framework import errors_impl as errors_impl, ops as ops
from tensorflow.python.ops import control_flow_ops as control_flow_ops
from typing import Any as Any, Optional as Optional

class Evaluator:
    call: Any = ...
    def __init__(self, model: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def init_variables(self): ...
    def all_metric_results(self, summary_logdir: Optional[Any] = ...): ...
    def evaluate_on_dataset(self, dataset: Any, *args: Any, **kwargs: Any): ...
    @staticmethod
    def run_evaluation(init_op: Any, call_op: Any, results_op: Any, sess: Optional[Any] = ...): ...
    def call(self, eval_data: Any) -> None: ...
    @property
    def model(self): ...
    def track_metric(self, metric: Any): ...
    def track_evaluator(self, prefix: Any, evaluator: Any): ...
    @property
    def metric_variables(self): ...
    @property
    def metrics(self): ...

class SparseSoftmaxEvaluator(Evaluator):
    avg_loss: Any = ...
    accuracy: Any = ...
    loss_key: Any = ...
    label_key: Any = ...
    predicted_class_key: Any = ...
    weights_key: Any = ...
    def __init__(self, model: Any, loss_key: str = ..., label_key: str = ..., predicted_class_key: str = ..., weights_key: str = ...) -> None: ...
    def call(self, eval_data: Any) -> None: ...
