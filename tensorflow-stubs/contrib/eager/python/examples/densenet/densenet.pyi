# Stubs for tensorflow.contrib.eager.python.examples.densenet.densenet (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import tensorflow as tf
from typing import Any as Any

l2 = tf.keras.regularizers.l2

class ConvBlock(tf.keras.Model):
    bottleneck: Any = ...
    conv2: Any = ...
    batchnorm1: Any = ...
    dropout: Any = ...
    conv1: Any = ...
    batchnorm2: Any = ...
    def __init__(self, num_filters: Any, data_format: Any, bottleneck: Any, weight_decay: float = ..., dropout_rate: int = ...) -> None: ...
    def call(self, x: Any, training: bool = ...): ...

class TransitionBlock(tf.keras.Model):
    batchnorm: Any = ...
    conv: Any = ...
    avg_pool: Any = ...
    def __init__(self, num_filters: Any, data_format: Any, weight_decay: float = ..., dropout_rate: int = ...) -> None: ...
    def call(self, x: Any, training: bool = ...): ...

class DenseBlock(tf.keras.Model):
    num_layers: Any = ...
    axis: Any = ...
    blocks: Any = ...
    def __init__(self, num_layers: Any, growth_rate: Any, data_format: Any, bottleneck: Any, weight_decay: float = ..., dropout_rate: int = ...) -> None: ...
    def call(self, x: Any, training: bool = ...): ...

class DenseNet(tf.keras.Model):
    depth_of_model: Any = ...
    growth_rate: Any = ...
    num_of_blocks: Any = ...
    output_classes: Any = ...
    num_layers_in_each_block: Any = ...
    data_format: Any = ...
    bottleneck: Any = ...
    compression: Any = ...
    weight_decay: Any = ...
    dropout_rate: Any = ...
    pool_initial: Any = ...
    include_top: Any = ...
    num_filters: Any = ...
    conv1: Any = ...
    pool1: Any = ...
    batchnorm1: Any = ...
    batchnorm2: Any = ...
    last_pool: Any = ...
    classifier: Any = ...
    dense_blocks: Any = ...
    transition_blocks: Any = ...
    def __init__(self, depth_of_model: Any, growth_rate: Any, num_of_blocks: Any, output_classes: Any, num_layers_in_each_block: Any, data_format: Any, bottleneck: bool = ..., compression: float = ..., weight_decay: float = ..., dropout_rate: int = ..., pool_initial: bool = ..., include_top: bool = ...) -> None: ...
    def call(self, x: Any, training: bool = ...): ...
