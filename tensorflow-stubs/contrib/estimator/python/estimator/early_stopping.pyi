# Stubs for tensorflow.contrib.estimator.python.estimator.early_stopping (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import init_ops as init_ops, state_ops as state_ops, variable_scope as variable_scope
from tensorflow.python.platform import gfile as gfile, tf_logging as tf_logging
from tensorflow.python.summary import summary_iterator as summary_iterator
from tensorflow.python.training import basic_session_run_hooks as basic_session_run_hooks, session_run_hook as session_run_hook, training_util as training_util
from typing import Any as Any, Optional as Optional

def make_early_stopping_hook(estimator: Any, should_stop_fn: Any, run_every_secs: int = ..., run_every_steps: Optional[Any] = ...): ...
def stop_if_higher_hook(estimator: Any, metric_name: Any, threshold: Any, eval_dir: Optional[Any] = ..., min_steps: int = ..., run_every_secs: int = ..., run_every_steps: Optional[Any] = ...): ...
def stop_if_lower_hook(estimator: Any, metric_name: Any, threshold: Any, eval_dir: Optional[Any] = ..., min_steps: int = ..., run_every_secs: int = ..., run_every_steps: Optional[Any] = ...): ...
def stop_if_no_increase_hook(estimator: Any, metric_name: Any, max_steps_without_increase: Any, eval_dir: Optional[Any] = ..., min_steps: int = ..., run_every_secs: int = ..., run_every_steps: Optional[Any] = ...): ...
def stop_if_no_decrease_hook(estimator: Any, metric_name: Any, max_steps_without_decrease: Any, eval_dir: Optional[Any] = ..., min_steps: int = ..., run_every_secs: int = ..., run_every_steps: Optional[Any] = ...): ...
def read_eval_metrics(eval_dir: Any): ...

class _StopOnPredicateHook(session_run_hook.SessionRunHook):
    def __init__(self, should_stop_fn: Any, run_every_secs: int = ..., run_every_steps: Optional[Any] = ...) -> None: ...
    def begin(self) -> None: ...
    def before_run(self, run_context: Any): ...
    def after_run(self, run_context: Any, run_values: Any) -> None: ...

class _CheckForStoppingHook(session_run_hook.SessionRunHook):
    def __init__(self) -> None: ...
    def begin(self) -> None: ...
    def before_run(self, run_context: Any): ...
    def after_run(self, run_context: Any, run_values: Any) -> None: ...
