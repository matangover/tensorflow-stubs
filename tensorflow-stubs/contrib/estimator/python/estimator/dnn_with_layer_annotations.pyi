# Stubs for tensorflow.contrib.estimator.python.estimator.dnn_with_layer_annotations (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from google.protobuf.any_pb2 import Any as Any
from tensorflow.python.estimator import estimator as estimator
from tensorflow.python.estimator.canned import dnn as dnn
from tensorflow.python.framework import ops as ops
from tensorflow.python.ops import nn as nn
from tensorflow.python.ops.losses import losses as losses
from typing import Optional as Optional

class LayerAnnotationsCollectionNames:
    UNPROCESSED_FEATURES: str = ...
    PROCESSED_FEATURES: str = ...
    FEATURE_COLUMNS: str = ...
    @classmethod
    def keys(cls, collection_name: Any): ...
    @classmethod
    def values(cls, collection_name: Any): ...

def serialize_feature_column(feature_column: Any): ...
def make_input_layer_with_layer_annotations(original_input_layer: Any): ...
def DNNClassifierWithLayerAnnotations(hidden_units: Any, feature_columns: Any, model_dir: Optional[Any] = ..., n_classes: int = ..., weight_column: Optional[Any] = ..., label_vocabulary: Optional[Any] = ..., optimizer: str = ..., activation_fn: Any = ..., dropout: Optional[Any] = ..., input_layer_partitioner: Optional[Any] = ..., config: Optional[Any] = ..., warm_start_from: Optional[Any] = ..., loss_reduction: Any = ...): ...
def DNNRegressorWithLayerAnnotations(hidden_units: Any, feature_columns: Any, model_dir: Optional[Any] = ..., label_dimension: int = ..., weight_column: Optional[Any] = ..., optimizer: str = ..., activation_fn: Any = ..., dropout: Optional[Any] = ..., input_layer_partitioner: Optional[Any] = ..., config: Optional[Any] = ..., warm_start_from: Optional[Any] = ..., loss_reduction: Any = ...): ...
