# Stubs for tensorflow.contrib.tensor_forest.python.ops.gen_stats_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def create_fertile_stats_variable(stats_handle: Any, stats_config: Any, params: Any, name: Optional[Any] = ...): ...
def create_fertile_stats_variable_eager_fallback(stats_handle: Any, stats_config: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def fertile_stats_deserialize(stats_handle: Any, stats_config: Any, params: Any, name: Optional[Any] = ...): ...
def fertile_stats_deserialize_eager_fallback(stats_handle: Any, stats_config: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def fertile_stats_is_initialized_op(stats_handle: Any, name: Optional[Any] = ...): ...
def fertile_stats_is_initialized_op_eager_fallback(stats_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def fertile_stats_resource_handle_op(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def fertile_stats_resource_handle_op_eager_fallback(container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def fertile_stats_serialize(stats_handle: Any, params: Any, name: Optional[Any] = ...): ...
def fertile_stats_serialize_eager_fallback(stats_handle: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def finalize_tree(tree_handle: Any, stats_handle: Any, params: Any, name: Optional[Any] = ...): ...
def finalize_tree_eager_fallback(tree_handle: Any, stats_handle: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def grow_tree_v4(tree_handle: Any, stats_handle: Any, finished_nodes: Any, params: Any, name: Optional[Any] = ...): ...
def grow_tree_v4_eager_fallback(tree_handle: Any, stats_handle: Any, finished_nodes: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def process_input_v4(tree_handle: Any, stats_handle: Any, input_data: Any, sparse_input_indices: Any, sparse_input_values: Any, sparse_input_shape: Any, input_labels: Any, input_weights: Any, leaf_ids: Any, random_seed: Any, input_spec: Any, params: Any, name: Optional[Any] = ...): ...
def process_input_v4_eager_fallback(tree_handle: Any, stats_handle: Any, input_data: Any, sparse_input_indices: Any, sparse_input_values: Any, sparse_input_shape: Any, input_labels: Any, input_weights: Any, leaf_ids: Any, random_seed: Any, input_spec: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
