# Stubs for tensorflow.contrib.tensor_forest.hybrid.ops.gen_training_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

# _HardRoutingFunctionOutput = namedtuple('HardRoutingFunction', <ERROR>)

def hard_routing_function(input_data: Any, tree_parameters: Any, tree_biases: Any, max_nodes: Any, tree_depth: Any, name: Optional[Any] = ...): ...
def hard_routing_function_eager_fallback(input_data: Any, tree_parameters: Any, tree_biases: Any, max_nodes: Any, tree_depth: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _KFeatureGradientOutput = namedtuple('KFeatureGradient', <ERROR>)

def k_feature_gradient(input_data: Any, tree_parameters: Any, tree_biases: Any, routes: Any, layer_num: Any, random_seed: Any, name: Optional[Any] = ...): ...
def k_feature_gradient_eager_fallback(input_data: Any, tree_parameters: Any, tree_biases: Any, routes: Any, layer_num: Any, random_seed: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def k_feature_routing_function(input_data: Any, tree_parameters: Any, tree_biases: Any, layer_num: Any, max_nodes: Any, num_features_per_node: Any, random_seed: Any, name: Optional[Any] = ...): ...
def k_feature_routing_function_eager_fallback(input_data: Any, tree_parameters: Any, tree_biases: Any, layer_num: Any, max_nodes: Any, num_features_per_node: Any, random_seed: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def routing_function(input_data: Any, tree_parameters: Any, tree_biases: Any, max_nodes: Any, name: Optional[Any] = ...): ...
def routing_function_eager_fallback(input_data: Any, tree_parameters: Any, tree_biases: Any, max_nodes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def routing_gradient(input_data: Any, tree_parameters: Any, tree_biases: Any, routes: Any, max_nodes: Any, name: Optional[Any] = ...): ...
def routing_gradient_eager_fallback(input_data: Any, tree_parameters: Any, tree_biases: Any, routes: Any, max_nodes: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _StochasticHardRoutingFunctionOutput = namedtuple('StochasticHardRoutingFunction', <ERROR>)

def stochastic_hard_routing_function(input_data: Any, tree_parameters: Any, tree_biases: Any, tree_depth: Any, random_seed: Any, name: Optional[Any] = ...): ...
def stochastic_hard_routing_function_eager_fallback(input_data: Any, tree_parameters: Any, tree_biases: Any, tree_depth: Any, random_seed: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _StochasticHardRoutingGradientOutput = namedtuple('StochasticHardRoutingGradient', <ERROR>)

def stochastic_hard_routing_gradient(input_data: Any, tree_parameters: Any, tree_biases: Any, path_probability: Any, path: Any, tree_depth: Any, name: Optional[Any] = ...): ...
def stochastic_hard_routing_gradient_eager_fallback(input_data: Any, tree_parameters: Any, tree_biases: Any, path_probability: Any, path: Any, tree_depth: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def unpack_path(path: Any, path_values: Any, name: Optional[Any] = ...): ...
def unpack_path_eager_fallback(path: Any, path_values: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
