# Stubs for tensorflow.contrib.tensor_forest.client.random_forest (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib import layers as layers
from tensorflow.contrib.learn.python.learn.estimators import constants as constants, estimator as estimator
from tensorflow.contrib.tensor_forest.client import eval_metrics as eval_metrics
from tensorflow.contrib.tensor_forest.python import tensor_forest as tensor_forest
from tensorflow.python.estimator import estimator as core_estimator
from tensorflow.python.estimator.export.export_output import PredictOutput as PredictOutput
from tensorflow.python.framework import ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, math_ops as math_ops, resource_variable_ops as resource_variable_ops, state_ops as state_ops, variable_scope as variable_scope
from tensorflow.python.ops.losses import losses as losses
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import session_run_hook as session_run_hook, training_util as training_util
from typing import Any as Any, Optional as Optional

KEYS_NAME: str
LOSS_NAME: str
TREE_PATHS_PREDICTION_KEY: str
VARIANCE_PREDICTION_KEY: str
ALL_SERVING_KEY: str
EPSILON: float

class ModelBuilderOutputType:
    MODEL_FN_OPS: int = ...
    ESTIMATOR_SPEC: int = ...

class TensorForestRunOpAtEndHook(session_run_hook.SessionRunHook):
    def __init__(self, op_dict: Any) -> None: ...
    def end(self, session: Any) -> None: ...

class TensorForestLossHook(session_run_hook.SessionRunHook):
    early_stopping_rounds: Any = ...
    early_stopping_loss_threshold: Any = ...
    loss_op: Any = ...
    min_loss: Any = ...
    last_step: int = ...
    steps: int = ...
    def __init__(self, early_stopping_rounds: Any, early_stopping_loss_threshold: Optional[Any] = ..., loss_op: Optional[Any] = ...) -> None: ...
    def before_run(self, run_context: Any): ...
    def after_run(self, run_context: Any, run_values: Any) -> None: ...

def get_model_fn(params: Any, graph_builder_class: Any, device_assigner: Any, feature_columns: Optional[Any] = ..., weights_name: Optional[Any] = ..., model_head: Optional[Any] = ..., keys_name: Optional[Any] = ..., early_stopping_rounds: int = ..., early_stopping_loss_threshold: float = ..., num_trainers: int = ..., trainer_id: int = ..., report_feature_importances: bool = ..., local_eval: bool = ..., head_scope: Optional[Any] = ..., include_all_in_serving: bool = ..., output_type: Any = ...): ...

class TensorForestEstimator(estimator.Estimator):
    def __init__(self, params: Any, device_assigner: Optional[Any] = ..., model_dir: Optional[Any] = ..., feature_columns: Optional[Any] = ..., graph_builder_class: Any = ..., config: Optional[Any] = ..., weight_column: Optional[Any] = ..., keys_column: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., early_stopping_rounds: int = ..., early_stopping_loss_threshold: float = ..., num_trainers: int = ..., trainer_id: int = ..., report_feature_importances: bool = ..., local_eval: bool = ..., version: Optional[Any] = ..., head: Optional[Any] = ..., include_all_in_serving: bool = ...) -> None: ...

def get_combined_model_fn(model_fns: Any): ...

class MultiForestMultiHeadEstimator(estimator.Estimator):
    def __init__(self, params_list: Any, device_assigner: Optional[Any] = ..., model_dir: Optional[Any] = ..., feature_columns: Optional[Any] = ..., graph_builder_class: Any = ..., config: Optional[Any] = ..., weight_column: Optional[Any] = ..., keys_column: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., early_stopping_rounds: int = ..., num_trainers: int = ..., trainer_id: int = ..., report_feature_importances: bool = ..., local_eval: bool = ...) -> None: ...

class CoreTensorForestEstimator(core_estimator.Estimator):
    def __init__(self, params: Any, device_assigner: Optional[Any] = ..., model_dir: Optional[Any] = ..., feature_columns: Optional[Any] = ..., graph_builder_class: Any = ..., config: Optional[Any] = ..., weight_column: Optional[Any] = ..., keys_column: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., early_stopping_rounds: int = ..., early_stopping_loss_threshold: float = ..., num_trainers: int = ..., trainer_id: int = ..., report_feature_importances: bool = ..., local_eval: bool = ..., version: Optional[Any] = ..., head: Optional[Any] = ..., include_all_in_serving: bool = ...) -> None: ...
