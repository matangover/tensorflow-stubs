# Stubs for tensorflow.contrib.timeseries.python.timeseries.ar_model (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib import distributions as distributions
from tensorflow.contrib.rnn.python.ops import lstm_ops as lstm_ops
from tensorflow.contrib.timeseries.python.timeseries import model as model, model_utils as model_utils
from tensorflow.contrib.timeseries.python.timeseries.feature_keys import PredictionFeatures as PredictionFeatures, TrainEvalFeatures as TrainEvalFeatures
from tensorflow.python.estimator import estimator_lib as estimator_lib
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops
from tensorflow.python.keras.engine import sequential as sequential, training as training
from tensorflow.python.keras.layers import core as core
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, gen_math_ops as gen_math_ops, init_ops as init_ops, math_ops as math_ops, nn_ops as nn_ops, tensor_array_ops as tensor_array_ops, variable_scope as variable_scope
from typing import Any as Any, Optional as Optional

class FlatPredictionModel(training.Model):
    def __init__(self, num_features: Any, input_window_size: Any, output_window_size: Any, hidden_layer_sizes: Optional[Any] = ...) -> None: ...
    def call(self, input_window_features: Any, output_window_features: Any): ...

class LSTMPredictionModel(training.Model):
    def __init__(self, num_features: Any, input_window_size: Any, output_window_size: Any, num_units: int = ...) -> None: ...
    def call(self, input_window_features: Any, output_window_features: Any): ...

class ARModel(model.TimeSeriesModel):
    SQUARED_LOSS: str = ...
    NORMAL_LIKELIHOOD_LOSS: str = ...
    input_window_size: Any = ...
    output_window_size: Any = ...
    window_size: Any = ...
    loss: Any = ...
    exogenous_size: Any = ...
    def __init__(self, periodicities: Any, input_window_size: Any, output_window_size: Any, num_features: Any, prediction_model_factory: Any = ..., num_time_buckets: int = ..., loss: Any = ..., exogenous_feature_columns: Optional[Any] = ...) -> None: ...
    def initialize_graph(self, input_statistics: Optional[Any] = ...) -> None: ...
    def get_start_state(self): ...
    def random_model_parameters(self, seed: Optional[Any] = ...) -> None: ...
    def generate(self, number_of_series: Any, series_length: Any, model_parameters: Optional[Any] = ..., seed: Optional[Any] = ...) -> None: ...
    def prediction_ops(self, times: Any, values: Any, exogenous_regressors: Any): ...
    def loss_op(self, targets: Any, prediction_ops: Any): ...
    def predict(self, features: Any): ...
    def get_batch_loss(self, features: Any, mode: Any, state: Any): ...

class AnomalyMixtureARModel(ARModel):
    GAUSSIAN_ANOMALY: str = ...
    CAUCHY_ANOMALY: str = ...
    def __init__(self, periodicities: Any, anomaly_prior_probability: Any, input_window_size: Any, output_window_size: Any, num_features: Any, prediction_model_factory: Any = ..., anomaly_distribution: Any = ..., num_time_buckets: int = ..., exogenous_feature_columns: Optional[Any] = ...) -> None: ...
    def prediction_ops(self, times: Any, values: Any, exogenous_regressors: Any): ...
    def loss_op(self, targets: Any, prediction_ops: Any): ...
