# Stubs for tensorflow.contrib.timeseries.python.timeseries.input_pipeline (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.contrib.timeseries.python.timeseries import feature_keys as feature_keys, model_utils as model_utils
from tensorflow.python.estimator import estimator_lib as estimator_lib
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, io_ops as io_ops, math_ops as math_ops, nn as nn, parsing_ops as parsing_ops, random_ops as random_ops, state_ops as state_ops, tensor_array_ops as tensor_array_ops, variable_scope as variable_scope
from tensorflow.python.training import training as training
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

def predict_continuation_input_fn(evaluation: Any, steps: Optional[Any] = ..., times: Optional[Any] = ..., exogenous_features: Optional[Any] = ...): ...

class TimeSeriesReader(metaclass=abc.ABCMeta):
    def check_dataset_size(self, minimum_dataset_size: Any) -> None: ...
    @abc.abstractmethod
    def read(self) -> Any: ...
    @abc.abstractmethod
    def read_full(self) -> Any: ...

class NumpyReader(TimeSeriesReader):
    def __init__(self, data: Any, read_num_records_hint: int = ...) -> None: ...
    def check_dataset_size(self, minimum_dataset_size: Any) -> None: ...
    def read(self): ...
    def read_full(self): ...

class ReaderBaseTimeSeriesParser(TimeSeriesReader, metaclass=abc.ABCMeta):
    def __init__(self, filenames: Any, read_num_records_hint: int = ...) -> None: ...
    def read(self): ...
    def read_full(self): ...

class CSVReader(ReaderBaseTimeSeriesParser):
    def __init__(self, filenames: Any, column_names: Any = ..., column_dtypes: Optional[Any] = ..., skip_header_lines: Optional[Any] = ..., read_num_records_hint: int = ...) -> None: ...

class TFExampleReader(ReaderBaseTimeSeriesParser):
    def __init__(self, filenames: Any, features: Any) -> None: ...

class TimeSeriesInputFn(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def create_batch(self) -> Any: ...
    def __call__(self): ...

class WholeDatasetInputFn(TimeSeriesInputFn):
    def __init__(self, time_series_reader: Any) -> None: ...
    def create_batch(self): ...

class RandomWindowInputFn(TimeSeriesInputFn):
    def __init__(self, time_series_reader: Any, window_size: Any, batch_size: Any, queue_capacity_multiplier: int = ..., shuffle_min_after_dequeue_multiplier: int = ..., discard_out_of_order: bool = ..., discard_consecutive_batches_limit: int = ..., jitter: bool = ..., num_threads: int = ..., shuffle_seed: Optional[Any] = ...) -> None: ...
    def create_batch(self): ...
