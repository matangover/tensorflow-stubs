# Stubs for tensorflow.contrib.metrics.python.ops.metric_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, confusion_matrix as confusion_matrix, control_flow_ops as control_flow_ops, math_ops as math_ops, metrics as metrics, metrics_impl as metrics_impl, nn as nn, state_ops as state_ops, variable_scope as variable_scope, weights_broadcast_ops as weights_broadcast_ops
from tensorflow.python.ops.distributions.normal import Normal as Normal
from tensorflow.python.util.deprecation import deprecated as deprecated
from typing import Any as Any, Optional as Optional

def streaming_true_positives(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_true_negatives(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_false_positives(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_false_negatives(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_mean(values: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_mean_tensor(values: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_accuracy(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_precision(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_recall(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_false_positive_rate(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_false_negative_rate(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_true_positives_at_thresholds(predictions: Any, labels: Any, thresholds: Any, weights: Optional[Any] = ...): ...
def streaming_false_negatives_at_thresholds(predictions: Any, labels: Any, thresholds: Any, weights: Optional[Any] = ...): ...
def streaming_false_positives_at_thresholds(predictions: Any, labels: Any, thresholds: Any, weights: Optional[Any] = ...): ...
def streaming_true_negatives_at_thresholds(predictions: Any, labels: Any, thresholds: Any, weights: Optional[Any] = ...): ...
def streaming_curve_points(labels: Optional[Any] = ..., predictions: Optional[Any] = ..., weights: Optional[Any] = ..., num_thresholds: int = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., curve: str = ..., name: Optional[Any] = ...): ...
def streaming_auc(predictions: Any, labels: Any, weights: Optional[Any] = ..., num_thresholds: int = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., curve: str = ..., name: Optional[Any] = ...): ...
def streaming_dynamic_auc(labels: Any, predictions: Any, curve: str = ..., metrics_collections: Any = ..., updates_collections: Any = ..., name: Optional[Any] = ..., weights: Optional[Any] = ...): ...
def auc_with_confidence_intervals(labels: Any, predictions: Any, weights: Optional[Any] = ..., alpha: float = ..., logit_transformation: bool = ..., metrics_collections: Any = ..., updates_collections: Any = ..., name: Optional[Any] = ...): ...
def precision_recall_at_equal_thresholds(labels: Any, predictions: Any, weights: Optional[Any] = ..., num_thresholds: Optional[Any] = ..., use_locking: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_specificity_at_sensitivity(predictions: Any, labels: Any, sensitivity: Any, weights: Optional[Any] = ..., num_thresholds: int = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_sensitivity_at_specificity(predictions: Any, labels: Any, specificity: Any, weights: Optional[Any] = ..., num_thresholds: int = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_precision_at_thresholds(predictions: Any, labels: Any, thresholds: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_recall_at_thresholds(predictions: Any, labels: Any, thresholds: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_false_positive_rate_at_thresholds(predictions: Any, labels: Any, thresholds: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_false_negative_rate_at_thresholds(predictions: Any, labels: Any, thresholds: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_recall_at_k(predictions: Any, labels: Any, k: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_sparse_recall_at_k(predictions: Any, labels: Any, k: Any, class_id: Optional[Any] = ..., weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_sparse_precision_at_k(predictions: Any, labels: Any, k: Any, class_id: Optional[Any] = ..., weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_sparse_precision_at_top_k(top_k_predictions: Any, labels: Any, class_id: Optional[Any] = ..., weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def sparse_recall_at_top_k(labels: Any, top_k_predictions: Any, class_id: Optional[Any] = ..., weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def recall_at_precision(labels: Any, predictions: Any, precision: Any, weights: Optional[Any] = ..., num_thresholds: int = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ..., strict_mode: bool = ...): ...
def streaming_sparse_average_precision_at_k(predictions: Any, labels: Any, k: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_sparse_average_precision_at_top_k(top_k_predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_mean_absolute_error(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_mean_relative_error(predictions: Any, labels: Any, normalizer: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_mean_squared_error(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_root_mean_squared_error(predictions: Any, labels: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_mean_cosine_distance(predictions: Any, labels: Any, dim: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_percentage_less(values: Any, threshold: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def streaming_mean_iou(predictions: Any, labels: Any, num_classes: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def aggregate_metrics(*value_update_tuples: Any): ...
def aggregate_metric_map(names_to_tuples: Any): ...
def count(values: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def cohen_kappa(labels: Any, predictions_idx: Any, num_classes: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
