# Stubs for tensorflow.contrib.rnn.ops.gen_lstm_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

# _BlockLSTMOutput = namedtuple('BlockLSTM', <ERROR>)

def block_lstm(seq_len_max: Any, x: Any, cs_prev: Any, h_prev: Any, w: Any, wci: Any, wcf: Any, wco: Any, b: Any, forget_bias: int = ..., cell_clip: int = ..., use_peephole: bool = ..., name: Optional[Any] = ...): ...
def block_lstm_eager_fallback(seq_len_max: Any, x: Any, cs_prev: Any, h_prev: Any, w: Any, wci: Any, wcf: Any, wco: Any, b: Any, forget_bias: int = ..., cell_clip: int = ..., use_peephole: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _BlockLSTMGradOutput = namedtuple('BlockLSTMGrad', <ERROR>)

def block_lstm_grad(seq_len_max: Any, x: Any, cs_prev: Any, h_prev: Any, w: Any, wci: Any, wcf: Any, wco: Any, b: Any, i: Any, cs: Any, f: Any, o: Any, ci: Any, co: Any, h: Any, cs_grad: Any, h_grad: Any, use_peephole: Any, name: Optional[Any] = ...): ...
def block_lstm_grad_eager_fallback(seq_len_max: Any, x: Any, cs_prev: Any, h_prev: Any, w: Any, wci: Any, wcf: Any, wco: Any, b: Any, i: Any, cs: Any, f: Any, o: Any, ci: Any, co: Any, h: Any, cs_grad: Any, h_grad: Any, use_peephole: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _LSTMBlockCellOutput = namedtuple('LSTMBlockCell', <ERROR>)

def lstm_block_cell(x: Any, cs_prev: Any, h_prev: Any, w: Any, wci: Any, wcf: Any, wco: Any, b: Any, forget_bias: int = ..., cell_clip: int = ..., use_peephole: bool = ..., name: Optional[Any] = ...): ...
def lstm_block_cell_eager_fallback(x: Any, cs_prev: Any, h_prev: Any, w: Any, wci: Any, wcf: Any, wco: Any, b: Any, forget_bias: int = ..., cell_clip: int = ..., use_peephole: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _LSTMBlockCellGradOutput = namedtuple('LSTMBlockCellGrad', <ERROR>)

def lstm_block_cell_grad(x: Any, cs_prev: Any, h_prev: Any, w: Any, wci: Any, wcf: Any, wco: Any, b: Any, i: Any, cs: Any, f: Any, o: Any, ci: Any, co: Any, cs_grad: Any, h_grad: Any, use_peephole: Any, name: Optional[Any] = ...): ...
def lstm_block_cell_grad_eager_fallback(x: Any, cs_prev: Any, h_prev: Any, w: Any, wci: Any, wcf: Any, wco: Any, b: Any, i: Any, cs: Any, f: Any, o: Any, ci: Any, co: Any, cs_grad: Any, h_grad: Any, use_peephole: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
