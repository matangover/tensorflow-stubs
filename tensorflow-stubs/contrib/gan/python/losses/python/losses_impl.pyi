# Stubs for tensorflow.contrib.gan.python.losses.python.losses_impl (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.framework import ops as ops, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, clip_ops as clip_ops, gradients_impl as gradients_impl, math_ops as math_ops, random_ops as random_ops, variable_scope as variable_scope
from tensorflow.python.ops.losses import losses as losses, util as util
from tensorflow.python.summary import summary as summary
from typing import Any as Any, Optional as Optional

def wasserstein_generator_loss(discriminator_gen_outputs: Any, weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def wasserstein_discriminator_loss(discriminator_real_outputs: Any, discriminator_gen_outputs: Any, real_weights: float = ..., generated_weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def acgan_discriminator_loss(discriminator_real_classification_logits: Any, discriminator_gen_classification_logits: Any, one_hot_labels: Any, label_smoothing: float = ..., real_weights: float = ..., generated_weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def acgan_generator_loss(discriminator_gen_classification_logits: Any, one_hot_labels: Any, weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def wasserstein_gradient_penalty(real_data: Any, generated_data: Any, generator_inputs: Any, discriminator_fn: Any, discriminator_scope: Any, epsilon: float = ..., target: float = ..., one_sided: bool = ..., weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def minimax_discriminator_loss(discriminator_real_outputs: Any, discriminator_gen_outputs: Any, label_smoothing: float = ..., real_weights: float = ..., generated_weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def minimax_generator_loss(discriminator_gen_outputs: Any, label_smoothing: float = ..., weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def modified_discriminator_loss(discriminator_real_outputs: Any, discriminator_gen_outputs: Any, label_smoothing: float = ..., real_weights: float = ..., generated_weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def modified_generator_loss(discriminator_gen_outputs: Any, label_smoothing: float = ..., weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def least_squares_generator_loss(discriminator_gen_outputs: Any, real_label: int = ..., weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def least_squares_discriminator_loss(discriminator_real_outputs: Any, discriminator_gen_outputs: Any, real_label: int = ..., fake_label: int = ..., real_weights: float = ..., generated_weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def mutual_information_penalty(structured_generator_inputs: Any, predicted_distributions: Any, weights: float = ..., scope: Optional[Any] = ..., loss_collection: Any = ..., reduction: Any = ..., add_summaries: bool = ...): ...
def combine_adversarial_loss(main_loss: Any, adversarial_loss: Any, weight_factor: Optional[Any] = ..., gradient_ratio: Optional[Any] = ..., gradient_ratio_epsilon: float = ..., variables: Optional[Any] = ..., scalar_summaries: bool = ..., gradient_summaries: bool = ..., scope: Optional[Any] = ...): ...
def cycle_consistency_loss(data_x: Any, reconstructed_data_x: Any, data_y: Any, reconstructed_data_y: Any, scope: Optional[Any] = ..., add_summaries: bool = ...): ...
