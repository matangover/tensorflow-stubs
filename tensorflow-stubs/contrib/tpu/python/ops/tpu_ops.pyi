# Stubs for tensorflow.contrib.tpu.python.ops.tpu_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.tpu.ops.gen_tpu_ops import *
from tensorflow.contrib.tpu.ops import gen_tpu_ops as gen_tpu_ops
from tensorflow.contrib.tpu.python.tpu import tpu_function as tpu_function
from tensorflow.contrib.util import loader as loader
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.platform import resource_loader as resource_loader
from typing import Any as Any, Optional as Optional

def all_to_all(x: Any, concat_dimension: Any, split_dimension: Any, split_count: Any, group_assignment: Optional[Any] = ..., name: Optional[Any] = ...): ...
def cross_replica_sum(x: Any, group_assignment: Optional[Any] = ..., name: Optional[Any] = ...): ...
def collective_permute(x: Any, source_target_pairs: Any, name: Optional[Any] = ...): ...
def infeed_dequeue(dtype: Any, shape: Any, name: Optional[Any] = ...): ...
def infeed_dequeue_tuple(dtypes: Any, shapes: Any, name: Optional[Any] = ...): ...
def send_tpu_embedding_gradients(inputs: Any, config: Any, learning_rates: Optional[Any] = ..., name: Optional[Any] = ...): ...
def enqueue_tpu_embedding_integer_batch(batch: Any, device_ordinal: Any, mode_override: Optional[Any] = ..., name: Optional[Any] = ...): ...
def enqueue_tpu_embedding_sparse_batch(sample_indices: Any, embedding_indices: Any, aggregation_weights: Any, device_ordinal: Any, combiners: Optional[Any] = ..., mode_override: Optional[Any] = ..., name: Optional[Any] = ...): ...
def enqueue_tpu_embedding_sparse_tensor_batch(sample_indices: Any, embedding_indices: Any, aggregation_weights: Any, table_ids: Any, device_ordinal: Any, combiners: Optional[Any] = ..., mode_override: Optional[Any] = ..., name: Optional[Any] = ...): ...
