# Stubs for tensorflow.contrib.tpu.python.tpu.session_support (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import threading as threading
from tensorflow.contrib.tpu.python.ops import tpu_ops as tpu_ops
from tensorflow.core.protobuf import config_pb2 as config_pb2
from tensorflow.core.util import event_pb2 as event_pb2
from tensorflow.python.framework import dtypes as dtypes, errors as errors, ops as ops
from tensorflow.python.ops import array_ops as array_ops
from tensorflow.python.training import session_run_hook as session_run_hook, training_util as training_util
from typing import Any as Any, Optional as Optional

class CoordinatorShutdownException(Exception): ...

class WorkerHeartbeatManager:
    def __init__(self, session: Any, devices: Any, heartbeat_ops: Any, request_placeholder: Any) -> None: ...
    @staticmethod
    def from_devices(session: Any, devices: Any): ...
    def num_workers(self): ...
    def configure(self, message: Any) -> None: ...
    def ping(self, request: Optional[Any] = ..., timeout_in_ms: int = ...): ...
    def lame_workers(self): ...
    def shutdown(self, timeout_ms: int = ...) -> None: ...

def all_worker_devices(session: Any): ...

class WatchdogManager(threading.Thread):
    ping_interval: Any = ...
    shutdown_timeout: Any = ...
    daemon: bool = ...
    def __init__(self, session: Any, devices: Optional[Any] = ..., ping_interval: int = ..., shutdown_timeout: int = ...) -> None: ...
    def configure_and_run(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def run(self) -> None: ...

class GracefulShutdownHook(session_run_hook.SessionRunHook):
    def __init__(self, checkpoint_prefix: Any, saver: Optional[Any] = ..., on_shutdown_hooks: Optional[Any] = ...) -> None: ...
    def after_create_session(self, training_session: Any, coord: Any) -> None: ...
    def saver(self): ...
    def after_run(self, run_context: Any, run_values: Any) -> None: ...

class RestartComputation:
    timeout_ms: Any = ...
    def __init__(self, timeout_ms: int = ...) -> None: ...
    def __call__(self, run_context: Any, all_workers: Any, lame_workers: Any) -> None: ...

class ShutdownLameWorkers:
    timeout_in_ms: Any = ...
    def __init__(self, timeout_ms: int = ...) -> None: ...
    def __call__(self, run_context: Any, all_workers: Any, lame_workers: Any) -> None: ...
