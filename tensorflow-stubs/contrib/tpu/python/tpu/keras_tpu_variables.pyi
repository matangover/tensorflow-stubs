# Stubs for tensorflow.contrib.tpu.python.tpu.keras_tpu_variables (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.framework import ops as ops
from tensorflow.python.keras import backend as backend
from tensorflow.python.ops import control_flow_ops as control_flow_ops, gen_resource_variable_ops as gen_resource_variable_ops, resource_variable_ops as resource_variable_ops, variable_scope as variable_scope
from typing import Any as Any, Optional as Optional

class ReplicatedVariable:
    def __init__(self, name: Any, variables: Any) -> None: ...
    @property
    def handle(self): ...
    @property
    def initializer(self): ...
    @property
    def graph(self): ...
    @property
    def name(self): ...
    @property
    def dtype(self): ...
    @property
    def shape(self): ...
    def get_shape(self): ...
    def to_proto(self, export_scope: Optional[Any] = ...): ...
    @property
    def constraint(self) -> None: ...
    @property
    def op(self): ...
    @property
    def is_tensor_like(self): ...
    def read_value(self): ...
    def is_initialized(self, name: Optional[Any] = ...): ...
    def __getitem__(self, *args: Any): ...
    def assign(self, value: Any, use_locking: Optional[Any] = ..., name: Optional[Any] = ..., read_value: bool = ...): ...
    def assign_add(self, delta: Any, use_locking: Optional[Any] = ..., name: Optional[Any] = ..., read_value: bool = ...): ...
    def assign_sub(self, delta: Any, use_locking: Optional[Any] = ..., name: Optional[Any] = ..., read_value: bool = ...): ...
    def get(self): ...

def replicated_fetch_function(var: Any): ...
def replicated_scope(num_replicas: Any): ...
def replicated_variable_for_optimizer(num_replicas: Any): ...
