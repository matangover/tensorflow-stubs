# Stubs for tensorflow.contrib.distribute.python.tpu_strategy (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.distribute.python import one_device_strategy as one_device_strategy, values as values
from tensorflow.contrib.tpu.python.ops import tpu_ops as tpu_ops
from tensorflow.contrib.tpu.python.tpu import tpu as tpu, training_loop as training_loop
from tensorflow.python.eager import context as context, tape as tape
from tensorflow.python.framework import constant_op as constant_op, ops as ops
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, math_ops as math_ops
from tensorflow.python.training import device_util as device_util
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

def get_tpu_system_metadata(tpu_cluster_resolver: Any): ...

class TPUStrategy(one_device_strategy.OneDeviceStrategy):
    steps_per_run: Any = ...
    def __init__(self, tpu_cluster_resolver: Any, steps_per_run: Any, num_cores: Optional[Any] = ...) -> None: ...
    def distribute_dataset(self, dataset_fn: Any): ...
    def initialize(self): ...
    def finalize(self): ...
    def read_var(self, var: Any): ...
    @property
    def num_towers(self): ...
    @property
    def num_hosts(self): ...
    @property
    def num_towers_per_host(self): ...
    @property
    def between_graph(self): ...
    @property
    def should_init(self): ...
    @property
    def should_checkpoint(self): ...
    @property
    def should_save_summary(self): ...
    @property
    def worker_devices(self): ...
    @property
    def parameter_devices(self): ...
    def get_host_cpu_device(self, host_id: Any): ...
    def configure(self, session_config: Optional[Any] = ..., cluster_spec: Optional[Any] = ..., task_type: Optional[Any] = ..., task_id: Optional[Any] = ...) -> None: ...
