# Stubs for tensorflow.contrib.learn.python.learn.experiment (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.framework import deprecated as deprecated
from tensorflow.contrib.framework.python.framework import experimental as experimental
from tensorflow.contrib.learn.python.learn import evaluable as evaluable, export_strategy as export_strategy, monitors as monitors, trainable as trainable
from tensorflow.contrib.learn.python.learn.estimators import run_config as run_config
from tensorflow.contrib.tpu.python.tpu import tpu_estimator as tpu_estimator
from tensorflow.python.framework import ops as ops
from tensorflow.python.training import basic_session_run_hooks as basic_session_run_hooks, checkpoint_management as checkpoint_management, server_lib as server_lib
from tensorflow.python.util import compat as compat, function_utils as function_utils
from typing import Any as Any, Optional as Optional

class _EvalAndExportListener(basic_session_run_hooks.CheckpointSaverListener):
    def __init__(self, eval_fn: Any, export_fn: Any, model_dir: Any) -> None: ...
    def after_save(self, session: Any, global_step_value: Any) -> None: ...
    @property
    def eval_result(self): ...
    @property
    def export_results(self): ...

class Experiment:
    def __init__(self, estimator: Any, train_input_fn: Any, eval_input_fn: Any, eval_metrics: Optional[Any] = ..., train_steps: Optional[Any] = ..., eval_steps: int = ..., train_monitors: Optional[Any] = ..., eval_hooks: Optional[Any] = ..., local_eval_frequency: Optional[Any] = ..., eval_delay_secs: int = ..., continuous_eval_throttle_secs: int = ..., min_eval_frequency: Optional[Any] = ..., delay_workers_by_global_step: bool = ..., export_strategies: Optional[Any] = ..., train_steps_per_iteration: Optional[Any] = ..., checkpoint_and_export: bool = ..., saving_listeners: Optional[Any] = ..., check_interval_secs: int = ...) -> None: ...
    @property
    def estimator(self): ...
    @property
    def eval_metrics(self): ...
    @property
    def train_steps(self): ...
    @property
    def eval_steps(self): ...
    def extend_train_hooks(self, additional_hooks: Any) -> None: ...
    def reset_export_strategies(self, new_export_strategies: Optional[Any] = ...): ...
    def train(self, delay_secs: Optional[Any] = ...): ...
    def evaluate(self, delay_secs: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def local_run(self): ...
    def continuous_eval(self, delay_secs: Optional[Any] = ..., throttle_delay_secs: Optional[Any] = ..., evaluate_checkpoint_only_once: bool = ..., continuous_eval_predicate_fn: Optional[Any] = ..., name: str = ...) -> None: ...
    def continuous_eval_on_train_data(self, delay_secs: Optional[Any] = ..., throttle_delay_secs: Optional[Any] = ..., continuous_eval_predicate_fn: Optional[Any] = ..., name: str = ...) -> None: ...
    def train_and_evaluate(self): ...
    def continuous_train_and_eval(self, continuous_eval_predicate_fn: Optional[Any] = ...): ...
    def run_std_server(self) -> None: ...
    def test(self): ...
