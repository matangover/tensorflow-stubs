# Stubs for tensorflow.contrib.learn.python.learn.estimators.linear (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib import layers as layers
from tensorflow.contrib.framework import deprecated as deprecated, deprecated_arg_values as deprecated_arg_values
from tensorflow.contrib.layers.python.layers import feature_column as feature_column
from tensorflow.contrib.learn.python.learn.estimators import estimator as estimator, prediction_key as prediction_key
from tensorflow.contrib.learn.python.learn.utils import export as export
from tensorflow.contrib.linear_optimizer.python import sdca_optimizer as sdca_optimizer
from tensorflow.python.framework import dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, clip_ops as clip_ops, gradients as gradients, partitioned_variables as partitioned_variables, variable_scope as variable_scope
from tensorflow.python.training import session_run_hook as session_run_hook, training_util as training_util
from typing import Any as Any, Optional as Optional

def sdca_model_fn(features: Any, labels: Any, mode: Any, params: Any): ...

class _SdcaUpdateWeightsHook(session_run_hook.SessionRunHook):
    def __init__(self) -> None: ...
    def set_parameters(self, sdca_model: Any, train_op: Any) -> None: ...
    def begin(self) -> None: ...
    def before_run(self, run_context: Any): ...

class LinearClassifier(estimator.Estimator):
    def __init__(self, feature_columns: Any, model_dir: Optional[Any] = ..., n_classes: int = ..., weight_column_name: Optional[Any] = ..., optimizer: Optional[Any] = ..., gradient_clip_norm: Optional[Any] = ..., enable_centered_bias: bool = ..., _joint_weight: bool = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., label_keys: Optional[Any] = ...) -> None: ...
    def predict(self, x: Optional[Any] = ..., input_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., outputs: Optional[Any] = ..., as_iterable: bool = ...): ...
    def predict_classes(self, x: Optional[Any] = ..., input_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., as_iterable: bool = ...): ...
    def predict_proba(self, x: Optional[Any] = ..., input_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., as_iterable: bool = ...): ...
    def export(self, export_dir: Any, input_fn: Optional[Any] = ..., input_feature_key: Optional[Any] = ..., use_deprecated_input_fn: bool = ..., signature_fn: Optional[Any] = ..., default_batch_size: int = ..., exports_to_keep: Optional[Any] = ...): ...

class LinearRegressor(estimator.Estimator):
    def __init__(self, feature_columns: Any, model_dir: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., optimizer: Optional[Any] = ..., gradient_clip_norm: Optional[Any] = ..., enable_centered_bias: bool = ..., label_dimension: int = ..., _joint_weights: bool = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ...) -> None: ...
    def predict(self, x: Optional[Any] = ..., input_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., outputs: Optional[Any] = ..., as_iterable: bool = ...): ...
    def predict_scores(self, x: Optional[Any] = ..., input_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., as_iterable: bool = ...): ...
    def export(self, export_dir: Any, input_fn: Optional[Any] = ..., input_feature_key: Optional[Any] = ..., use_deprecated_input_fn: bool = ..., signature_fn: Optional[Any] = ..., default_batch_size: int = ..., exports_to_keep: Optional[Any] = ...): ...

class LinearEstimator(estimator.Estimator):
    def __init__(self, feature_columns: Any, head: Any, model_dir: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., optimizer: Optional[Any] = ..., gradient_clip_norm: Optional[Any] = ..., _joint_weights: bool = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ...) -> None: ...
