# Stubs for tensorflow.contrib.learn.python.learn.estimators.state_saving_rnn_estimator (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib import layers as layers
from tensorflow.contrib.layers.python.layers import feature_column_ops as feature_column_ops, optimizers as optimizers
from tensorflow.contrib.learn.python.learn.estimators import constants as constants, estimator as estimator, model_fn as model_fn, rnn_common as rnn_common
from tensorflow.python.framework import dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, rnn as rnn
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

def construct_state_saving_rnn(cell: Any, inputs: Any, num_label_columns: Any, state_saver: Any, state_name: Any, scope: str = ...): ...
def state_tuple_to_dict(state: Any): ...

class StateSavingRnnEstimator(estimator.Estimator):
    def __init__(self, problem_type: Any, num_unroll: Any, batch_size: Any, sequence_feature_columns: Any, context_feature_columns: Optional[Any] = ..., num_classes: Optional[Any] = ..., num_units: Optional[Any] = ..., cell_type: str = ..., optimizer_type: str = ..., learning_rate: float = ..., predict_probabilities: bool = ..., momentum: Optional[Any] = ..., gradient_clipping_norm: float = ..., dropout_keep_probabilities: Optional[Any] = ..., model_dir: Optional[Any] = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., num_threads: int = ..., queue_capacity: int = ..., seed: Optional[Any] = ...) -> None: ...
