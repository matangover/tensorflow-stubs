# Stubs for tensorflow.contrib.lite.python.op_hint (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.framework.graph_util_impl import _bfs_for_reachable_nodes as _bfs_for_reachable_nodes, _extract_graph_summary as _extract_graph_summary
from tensorflow.python.util.all_util import remove_undocumented as remove_undocumented
from typing import Any as Any, Optional as Optional

class OpHint:
    FUNCTION_NAME_ATTR: str = ...
    FUNCTION_UUID_ATTR: str = ...
    FUNCTION_INPUT_INDEX_ATTR: str = ...
    FUNCTION_OUTPUT_INDEX_ATTR: str = ...
    FUNCTION_SORT_INDEX_ATTR: str = ...
    FUNCTION_AGGREGATE_ATTR: str = ...
    TFLITE_INPUT_INDICES: str = ...
    AGGREGATE_STACK: Any = ...
    AGGREGATE_FIRST: Any = ...
    AGGREGATE_LAST: Any = ...
    class OpHintArgumentTracker:
        def __init__(self, function_name: Any, unique_function_id: Any, node_name_prefix: Any, attr_name: Any) -> None: ...
        def add(self, arg: Any, tag: Optional[Any] = ..., name: Optional[Any] = ..., aggregate: Optional[Any] = ..., index_override: Optional[Any] = ...): ...
    def __init__(self, function_name: Any, **kwargs: Any) -> None: ...
    def add_input(self, *args: Any, **kwargs: Any): ...
    def add_output(self, *args: Any, **kwargs: Any): ...
    def add_inputs(self, *args: Any, **kwargs: Any): ...
    def add_outputs(self, *args: Any, **kwargs: Any): ...

class _LiteOperand:
    def aggregate_and_return_name_for_input(self, out_graphdef: Any) -> None: ...
    def aggregate_and_return_name_for_output(self, fused_op_name: Any, output_index: Any, out_graphdef: Any) -> None: ...

class _LiteSingleOperand(_LiteOperand):
    node: Any = ...
    name: Any = ...
    def __init__(self, node: Any) -> None: ...
    def flatten(self): ...
    def aggregate_and_return_name_for_input(self, out_graphdef: Any): ...
    def aggregate_and_return_name_for_output(self, fused_op_name: Any, index: Any, out_graphdef: Any): ...

class _LiteAggregateOperand(_LiteOperand):
    aggregation: Any = ...
    names: Any = ...
    nodes: Any = ...
    flattened: Any = ...
    def __init__(self, aggregation: Any) -> None: ...
    def add(self, sort: Any, node: Any) -> None: ...
    def flatten_nodes(self): ...
    def flatten(self): ...
    def aggregate_and_return_name_for_input(self, out_graphdef: Any): ...
    def aggregate_and_return_name_for_output(self, fused_op_name: Any, output_index: Any, out_graphdef: Any): ...

class _LiteFuncCall:
    inputs: Any = ...
    outputs: Any = ...
    function_name: Any = ...
    uuid: Any = ...
    params: Any = ...
    def __init__(self) -> None: ...
    def flattened_inputs_and_outputs(self): ...

def convert_op_hints_to_stubs(session: Optional[Any] = ..., graph_def: Optional[Any] = ..., write_callback: Any = ...): ...
