# Stubs for tensorflow.contrib.seq2seq.python.ops.beam_search_decoder (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.seq2seq.python.ops import attention_wrapper as attention_wrapper, beam_search_ops as beam_search_ops, decoder as decoder
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, embedding_ops as embedding_ops, math_ops as math_ops, nn_ops as nn_ops, rnn_cell_impl as rnn_cell_impl, tensor_array_ops as tensor_array_ops
from tensorflow.python.platform import tf_logging as tf_logging
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

class BeamSearchDecoderState: ...
class BeamSearchDecoderOutput: ...
class FinalBeamSearchDecoderOutput: ...

def tile_batch(t: Any, multiplier: Any, name: Optional[Any] = ...): ...

class BeamSearchDecoder(decoder.Decoder):
    def __init__(self, cell: Any, embedding: Any, start_tokens: Any, end_token: Any, initial_state: Any, beam_width: Any, output_layer: Optional[Any] = ..., length_penalty_weight: float = ..., coverage_penalty_weight: float = ..., reorder_tensor_arrays: bool = ...) -> None: ...
    @property
    def batch_size(self): ...
    @property
    def tracks_own_finished(self): ...
    @property
    def output_size(self): ...
    @property
    def output_dtype(self): ...
    def initialize(self, name: Optional[Any] = ...): ...
    def finalize(self, outputs: Any, final_state: Any, sequence_lengths: Any): ...
    def step(self, time: Any, inputs: Any, state: Any, name: Optional[Any] = ...): ...
