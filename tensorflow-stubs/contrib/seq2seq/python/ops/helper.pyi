# Stubs for tensorflow.contrib.seq2seq.python.ops.helper (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.contrib.seq2seq.python.ops import decoder as decoder
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, embedding_ops as embedding_ops, gen_array_ops as gen_array_ops, math_ops as math_ops, tensor_array_ops as tensor_array_ops
from tensorflow.python.ops.distributions import bernoulli as bernoulli, categorical as categorical
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

class Helper(metaclass=abc.ABCMeta):
    def batch_size(self) -> Any: ...
    def sample_ids_shape(self) -> Any: ...
    def sample_ids_dtype(self) -> Any: ...
    @abc.abstractmethod
    def initialize(self, name: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def sample(self, time: Any, outputs: Any, state: Any, name: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def next_inputs(self, time: Any, outputs: Any, state: Any, sample_ids: Any, name: Optional[Any] = ...) -> Any: ...

class CustomHelper(Helper):
    def __init__(self, initialize_fn: Any, sample_fn: Any, next_inputs_fn: Any, sample_ids_shape: Optional[Any] = ..., sample_ids_dtype: Optional[Any] = ...) -> None: ...
    @property
    def batch_size(self): ...
    @property
    def sample_ids_shape(self): ...
    @property
    def sample_ids_dtype(self): ...
    def initialize(self, name: Optional[Any] = ...): ...
    def sample(self, time: Any, outputs: Any, state: Any, name: Optional[Any] = ...): ...
    def next_inputs(self, time: Any, outputs: Any, state: Any, sample_ids: Any, name: Optional[Any] = ...): ...

class TrainingHelper(Helper):
    def __init__(self, inputs: Any, sequence_length: Any, time_major: bool = ..., name: Optional[Any] = ...) -> None: ...
    @property
    def inputs(self): ...
    @property
    def sequence_length(self): ...
    @property
    def batch_size(self): ...
    @property
    def sample_ids_shape(self): ...
    @property
    def sample_ids_dtype(self): ...
    def initialize(self, name: Optional[Any] = ...): ...
    def sample(self, time: Any, outputs: Any, name: Optional[Any] = ..., **unused_kwargs: Any): ...
    def next_inputs(self, time: Any, outputs: Any, state: Any, name: Optional[Any] = ..., **unused_kwargs: Any): ...

class ScheduledEmbeddingTrainingHelper(TrainingHelper):
    def __init__(self, inputs: Any, sequence_length: Any, embedding: Any, sampling_probability: Any, time_major: bool = ..., seed: Optional[Any] = ..., scheduling_seed: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    def initialize(self, name: Optional[Any] = ...): ...
    def sample(self, time: Any, outputs: Any, state: Any, name: Optional[Any] = ...): ...
    def next_inputs(self, time: Any, outputs: Any, state: Any, sample_ids: Any, name: Optional[Any] = ...): ...

class ScheduledOutputTrainingHelper(TrainingHelper):
    def __init__(self, inputs: Any, sequence_length: Any, sampling_probability: Any, time_major: bool = ..., seed: Optional[Any] = ..., next_inputs_fn: Optional[Any] = ..., auxiliary_inputs: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    def initialize(self, name: Optional[Any] = ...): ...
    def sample(self, time: Any, outputs: Any, state: Any, name: Optional[Any] = ...): ...
    def next_inputs(self, time: Any, outputs: Any, state: Any, sample_ids: Any, name: Optional[Any] = ...): ...

class GreedyEmbeddingHelper(Helper):
    def __init__(self, embedding: Any, start_tokens: Any, end_token: Any) -> None: ...
    @property
    def batch_size(self): ...
    @property
    def sample_ids_shape(self): ...
    @property
    def sample_ids_dtype(self): ...
    def initialize(self, name: Optional[Any] = ...): ...
    def sample(self, time: Any, outputs: Any, state: Any, name: Optional[Any] = ...): ...
    def next_inputs(self, time: Any, outputs: Any, state: Any, sample_ids: Any, name: Optional[Any] = ...): ...

class SampleEmbeddingHelper(GreedyEmbeddingHelper):
    def __init__(self, embedding: Any, start_tokens: Any, end_token: Any, softmax_temperature: Optional[Any] = ..., seed: Optional[Any] = ...) -> None: ...
    def sample(self, time: Any, outputs: Any, state: Any, name: Optional[Any] = ...): ...

class InferenceHelper(Helper):
    def __init__(self, sample_fn: Any, sample_shape: Any, sample_dtype: Any, start_inputs: Any, end_fn: Any, next_inputs_fn: Optional[Any] = ...) -> None: ...
    @property
    def batch_size(self): ...
    @property
    def sample_ids_shape(self): ...
    @property
    def sample_ids_dtype(self): ...
    def initialize(self, name: Optional[Any] = ...): ...
    def sample(self, time: Any, outputs: Any, state: Any, name: Optional[Any] = ...): ...
    def next_inputs(self, time: Any, outputs: Any, state: Any, sample_ids: Any, name: Optional[Any] = ...): ...
