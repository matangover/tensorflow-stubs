# Stubs for tensorflow.contrib.bigtable.python.ops.bigtable_api (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.contrib.bigtable.ops import gen_bigtable_ops as gen_bigtable_ops
from tensorflow.contrib.util import loader as loader
from tensorflow.python.data.experimental.ops import interleave_ops as interleave_ops
from tensorflow.python.data.ops import dataset_ops as dataset_ops
from tensorflow.python.data.util import nest as nest
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.platform import resource_loader as resource_loader
from typing import Any as Any, Optional as Optional

class BigtableClient:
    def __init__(self, project_id: Any, instance_id: Any, connection_pool_size: Optional[Any] = ..., max_receive_message_size: Optional[Any] = ...) -> None: ...
    def table(self, name: Any, snapshot: Optional[Any] = ...): ...

class BigtableTable:
    def __init__(self, name: Any, snapshot: Any, resource: Any) -> None: ...
    def lookup_columns(self, *args: Any, **kwargs: Any): ...
    def keys_by_range_dataset(self, start: Any, end: Any): ...
    def keys_by_prefix_dataset(self, prefix: Any): ...
    def sample_keys(self): ...
    def scan_prefix(self, prefix: Any, probability: Optional[Any] = ..., columns: Optional[Any] = ..., **kwargs: Any): ...
    def scan_range(self, start: Any, end: Any, probability: Optional[Any] = ..., columns: Optional[Any] = ..., **kwargs: Any): ...
    def parallel_scan_prefix(self, prefix: Any, num_parallel_scans: Optional[Any] = ..., probability: Optional[Any] = ..., columns: Optional[Any] = ..., **kwargs: Any): ...
    def parallel_scan_range(self, start: Any, end: Any, num_parallel_scans: Optional[Any] = ..., probability: Optional[Any] = ..., columns: Optional[Any] = ..., **kwargs: Any): ...
    def write(self, dataset: Any, column_families: Any, columns: Any, timestamp: Optional[Any] = ...): ...

class _BigtableKeyDataset(dataset_ops.DatasetSource, metaclass=abc.ABCMeta):
    def __init__(self, table: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class _BigtablePrefixKeyDataset(_BigtableKeyDataset):
    def __init__(self, table: Any, prefix: Any) -> None: ...

class _BigtableRangeKeyDataset(_BigtableKeyDataset):
    def __init__(self, table: Any, start: Any, end: Any) -> None: ...

class _BigtableSampleKeysDataset(_BigtableKeyDataset):
    def __init__(self, table: Any) -> None: ...

class _BigtableLookupDataset(dataset_ops.DatasetSource):
    def __init__(self, dataset: Any, table: Any, normalized: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class _BigtableScanDataset(dataset_ops.DatasetSource):
    def __init__(self, table: Any, prefix: Any, start: Any, end: Any, normalized: Any, probability: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class _BigtableSampleKeyPairsDataset(dataset_ops.DatasetSource):
    def __init__(self, table: Any, prefix: Any, start: Any, end: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...
