# Stubs for tensorflow.contrib.labeled_tensor.python.ops.core (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import collections as collections
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, math_ops as math_ops
from typing import Any as Any, Optional as Optional

LabelsLike: Any
DimensionLike: Any
AxisValue: Any
Scalar: Any

class Axis:
    def __init__(self, name: Any, value: Any) -> None: ...
    @property
    def name(self): ...
    def __eq__(self, other: Any): ...
    def __hash__(self): ...
    def __ne__(self, other: Any): ...
    def __len__(self): ...
    @property
    def dimension(self): ...
    @property
    def size(self): ...
    @property
    def value(self): ...
    @property
    def labels(self): ...
    def index(self, value: Any): ...

AxisLike: Any

def as_axis(axis_data: Any): ...

class Axes(collections.Mapping):
    def __init__(self, axes: Any) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, name: Any): ...
    def __contains__(self, name: Any): ...
    def __len__(self): ...
    def __hash__(self): ...
    def remove(self, axis_name: Any): ...

class LabeledTensor:
    def __init__(self, tensor: Any, axes: Any) -> None: ...
    @property
    def tensor(self): ...
    @property
    def axes(self): ...
    @property
    def dtype(self): ...
    @property
    def shape(self): ...
    @property
    def name(self): ...
    def get_shape(self): ...
    def __getitem__(self, key: Any): ...
    def __abs__(self): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __add__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def __rsub__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    __div__: Any = ...
    def __rtruediv__(self, other: Any): ...
    __rdiv__: Any = ...
    def __mod__(self, other: Any): ...
    def __rmod__(self, other: Any): ...
    def __pow__(self, other: Any): ...
    def __rpow__(self, other: Any): ...
    def __invert__(self): ...
    def __and__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __xor__(self, other: Any): ...
    def __lt__(self, other: Any): ...
    def __le__(self, other: Any): ...
    def __gt__(self, other: Any): ...
    def __ge__(self, other: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

LabeledTensorLike: Any

def convert_to_labeled_tensor(value: Any, dtype: Optional[Any] = ..., name: Optional[Any] = ...): ...
def concat_axes(axes: Any): ...
def identity(labeled_tensor: Any, name: Optional[Any] = ...): ...
def slice_function(labeled_tensor: Any, selection: Any, name: Optional[Any] = ...): ...
def transpose(labeled_tensor: Any, axis_order: Optional[Any] = ..., name: Optional[Any] = ...): ...
def expand_dims(labeled_tensor: Any, axes: Any, name: Optional[Any] = ...): ...
def get_axis_order(): ...
def axis_order_scope(axis_order: Optional[Any] = ...) -> None: ...

class AxisOrderError(ValueError): ...

def check_axis_order(labeled_tensor: Any, axis_order: Optional[Any] = ...) -> None: ...
def impose_axis_order(labeled_tensor: Any, axis_order: Optional[Any] = ..., name: Optional[Any] = ...): ...
def align(labeled_tensor_0: Any, labeled_tensor_1: Any, name: Optional[Any] = ...): ...
def define_unary_op(op_name: Any, elementwise_function: Any): ...

abs_function: Any
neg: Any
sign: Any
reciprocal: Any
square: Any
round_function: Any
sqrt: Any
rsqrt: Any
exp: Any
log: Any
ceil: Any
floor: Any
cos: Any
sin: Any
tan: Any
acos: Any
asin: Any
atan: Any
lgamma: Any
digamma: Any
erf: Any
erfc: Any
logical_not: Any
tanh: Any
sigmoid: Any

def define_binary_op(op_name: Any, elementwise_function: Any): ...

add: Any
sub: Any
mul: Any
div: Any
mod: Any
pow_function: Any
equal: Any
greater: Any
greater_equal: Any
not_equal: Any
less: Any
less_equal: Any
logical_and: Any
logical_or: Any
logical_xor: Any
maximum: Any
minimum: Any
squared_difference: Any
igamma: Any
igammac: Any
zeta: Any
polygamma: Any
