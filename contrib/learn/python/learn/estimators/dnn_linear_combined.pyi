# Stubs for tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib import layers as layers
from tensorflow.contrib.framework import deprecated as deprecated, deprecated_arg_values as deprecated_arg_values
from tensorflow.contrib.layers.python.layers import optimizers as optimizers
from tensorflow.contrib.learn.python.learn import metric_spec as metric_spec
from tensorflow.contrib.learn.python.learn.estimators import estimator as estimator, model_fn as model_fn, prediction_key as prediction_key
from tensorflow.contrib.learn.python.learn.utils import export as export
from tensorflow.python.framework import ops as ops
from tensorflow.python.ops import control_flow_ops as control_flow_ops, nn as nn, partitioned_variables as partitioned_variables, state_ops as state_ops, variable_scope as variable_scope
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import sync_replicas_optimizer as sync_replicas_optimizer, training_util as training_util
from typing import Any as Any, Optional as Optional

class DNNLinearCombinedEstimator(estimator.Estimator):
    def __init__(self, head: Any, model_dir: Optional[Any] = ..., linear_feature_columns: Optional[Any] = ..., linear_optimizer: Optional[Any] = ..., _joint_linear_weights: bool = ..., dnn_feature_columns: Optional[Any] = ..., dnn_optimizer: Optional[Any] = ..., dnn_hidden_units: Optional[Any] = ..., dnn_activation_fn: Optional[Any] = ..., dnn_dropout: Optional[Any] = ..., gradient_clip_norm: Optional[Any] = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., embedding_lr_multipliers: Optional[Any] = ..., fix_global_step_increment_bug: bool = ..., input_layer_partitioner: Optional[Any] = ...) -> None: ...

class DNNLinearCombinedClassifier(estimator.Estimator):
    def __init__(self, model_dir: Optional[Any] = ..., n_classes: int = ..., weight_column_name: Optional[Any] = ..., linear_feature_columns: Optional[Any] = ..., linear_optimizer: Optional[Any] = ..., _joint_linear_weights: bool = ..., dnn_feature_columns: Optional[Any] = ..., dnn_optimizer: Optional[Any] = ..., dnn_hidden_units: Optional[Any] = ..., dnn_activation_fn: Any = ..., dnn_dropout: Optional[Any] = ..., gradient_clip_norm: Optional[Any] = ..., enable_centered_bias: bool = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., embedding_lr_multipliers: Optional[Any] = ..., input_layer_min_slice_size: Optional[Any] = ..., label_keys: Optional[Any] = ..., fix_global_step_increment_bug: bool = ...) -> None: ...
    def predict(self, x: Optional[Any] = ..., input_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., outputs: Optional[Any] = ..., as_iterable: bool = ...): ...
    def predict_classes(self, x: Optional[Any] = ..., input_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., as_iterable: bool = ...): ...
    def predict_proba(self, x: Optional[Any] = ..., input_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., as_iterable: bool = ...): ...
    def export(self, export_dir: Any, input_fn: Optional[Any] = ..., input_feature_key: Optional[Any] = ..., use_deprecated_input_fn: bool = ..., signature_fn: Optional[Any] = ..., default_batch_size: int = ..., exports_to_keep: Optional[Any] = ...): ...

class DNNLinearCombinedRegressor(estimator.Estimator):
    def __init__(self, model_dir: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., linear_feature_columns: Optional[Any] = ..., linear_optimizer: Optional[Any] = ..., _joint_linear_weights: bool = ..., dnn_feature_columns: Optional[Any] = ..., dnn_optimizer: Optional[Any] = ..., dnn_hidden_units: Optional[Any] = ..., dnn_activation_fn: Any = ..., dnn_dropout: Optional[Any] = ..., gradient_clip_norm: Optional[Any] = ..., enable_centered_bias: bool = ..., label_dimension: int = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., embedding_lr_multipliers: Optional[Any] = ..., input_layer_min_slice_size: Optional[Any] = ..., fix_global_step_increment_bug: bool = ...) -> None: ...
    def evaluate(self, x: Optional[Any] = ..., y: Optional[Any] = ..., input_fn: Optional[Any] = ..., feed_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., steps: Optional[Any] = ..., metrics: Optional[Any] = ..., name: Optional[Any] = ..., checkpoint_path: Optional[Any] = ..., hooks: Optional[Any] = ...): ...
    def predict(self, x: Optional[Any] = ..., input_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., outputs: Optional[Any] = ..., as_iterable: bool = ...): ...
    def predict_scores(self, x: Optional[Any] = ..., input_fn: Optional[Any] = ..., batch_size: Optional[Any] = ..., as_iterable: bool = ...): ...
    def export(self, export_dir: Any, input_fn: Optional[Any] = ..., input_feature_key: Optional[Any] = ..., use_deprecated_input_fn: bool = ..., signature_fn: Optional[Any] = ..., default_batch_size: int = ..., exports_to_keep: Optional[Any] = ...): ...
