# Stubs for tensorflow.contrib.learn.python.learn.estimators.head (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.contrib.learn.python.learn.estimators import constants as constants, model_fn as model_fn, prediction_key as prediction_key
from tensorflow.python.framework import dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, lookup_ops as lookup_ops, math_ops as math_ops, nn as nn, sparse_ops as sparse_ops, string_ops as string_ops, variable_scope as variable_scope, weights_broadcast_ops as weights_broadcast_ops
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import training as training
from tensorflow.python.util import tf_decorator as tf_decorator, tf_inspect as tf_inspect
from tensorflow.python.util.deprecation import deprecated as deprecated
from typing import Any as Any, Optional as Optional

class Head(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    def logits_dimension(self) -> Any: ...
    @abc.abstractmethod
    def create_model_fn_ops(self, features: Any, mode: Any, labels: Optional[Any] = ..., train_op_fn: Optional[Any] = ..., logits: Optional[Any] = ..., logits_input: Optional[Any] = ..., scope: Optional[Any] = ...) -> Any: ...

def regression_head(label_name: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., label_dimension: int = ..., enable_centered_bias: bool = ..., head_name: Optional[Any] = ..., link_fn: Optional[Any] = ...): ...
def poisson_regression_head(label_name: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., label_dimension: int = ..., enable_centered_bias: bool = ..., head_name: Optional[Any] = ...): ...
def multi_class_head(n_classes: Any, label_name: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., enable_centered_bias: bool = ..., head_name: Optional[Any] = ..., thresholds: Optional[Any] = ..., metric_class_ids: Optional[Any] = ..., loss_fn: Optional[Any] = ..., label_keys: Optional[Any] = ...): ...
def binary_svm_head(label_name: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., enable_centered_bias: bool = ..., head_name: Optional[Any] = ..., thresholds: Optional[Any] = ...): ...
def multi_label_head(n_classes: Any, label_name: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., enable_centered_bias: bool = ..., head_name: Optional[Any] = ..., thresholds: Optional[Any] = ..., metric_class_ids: Optional[Any] = ..., loss_fn: Optional[Any] = ...): ...
def loss_only_head(loss_fn: Any, head_name: Optional[Any] = ...): ...
def multi_head(heads: Any, loss_weights: Optional[Any] = ...): ...
def no_op_train_fn(loss: Any): ...

class _SingleHead(Head, metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    def __init__(self, problem_type: Any, logits_dimension: Any, label_name: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., head_name: Optional[Any] = ...) -> None: ...
    @property
    def logits_dimension(self): ...
    @property
    def label_name(self): ...
    @property
    def weight_column_name(self): ...
    @property
    def head_name(self): ...

class _RegressionHead(_SingleHead):
    def __init__(self, label_dimension: Any, loss_fn: Any, link_fn: Any, logits_dimension: Optional[Any] = ..., label_name: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., enable_centered_bias: bool = ..., head_name: Optional[Any] = ...) -> None: ...
    def create_model_fn_ops(self, features: Any, mode: Any, labels: Optional[Any] = ..., train_op_fn: Optional[Any] = ..., logits: Optional[Any] = ..., logits_input: Optional[Any] = ..., scope: Optional[Any] = ...): ...

class _BinaryLogisticHead(_SingleHead):
    def __init__(self, label_name: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., enable_centered_bias: bool = ..., head_name: Optional[Any] = ..., loss_fn: Optional[Any] = ..., thresholds: Optional[Any] = ...) -> None: ...
    def create_model_fn_ops(self, features: Any, mode: Any, labels: Optional[Any] = ..., train_op_fn: Optional[Any] = ..., logits: Optional[Any] = ..., logits_input: Optional[Any] = ..., scope: Optional[Any] = ...): ...

class _MultiClassHead(_SingleHead):
    def __init__(self, n_classes: Any, label_name: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., enable_centered_bias: bool = ..., head_name: Optional[Any] = ..., loss_fn: Optional[Any] = ..., thresholds: Optional[Any] = ..., metric_class_ids: Optional[Any] = ..., label_keys: Optional[Any] = ...) -> None: ...
    def create_model_fn_ops(self, features: Any, mode: Any, labels: Optional[Any] = ..., train_op_fn: Optional[Any] = ..., logits: Optional[Any] = ..., logits_input: Optional[Any] = ..., scope: Optional[Any] = ...): ...

class _BinarySvmHead(_SingleHead):
    def __init__(self, label_name: Any, weight_column_name: Any, enable_centered_bias: Any, head_name: Any, thresholds: Any) -> None: ...
    def create_model_fn_ops(self, features: Any, mode: Any, labels: Optional[Any] = ..., train_op_fn: Optional[Any] = ..., logits: Optional[Any] = ..., logits_input: Optional[Any] = ..., scope: Optional[Any] = ...): ...

class _MultiLabelHead(_SingleHead):
    def __init__(self, n_classes: Any, label_name: Any, weight_column_name: Any, enable_centered_bias: Any, head_name: Any, thresholds: Any, metric_class_ids: Optional[Any] = ..., loss_fn: Optional[Any] = ...) -> None: ...
    def create_model_fn_ops(self, features: Any, mode: Any, labels: Optional[Any] = ..., train_op_fn: Optional[Any] = ..., logits: Optional[Any] = ..., logits_input: Optional[Any] = ..., scope: Optional[Any] = ...): ...

class _LossOnlyHead(Head):
    head_name: Any = ...
    def __init__(self, loss_fn: Any, head_name: Optional[Any] = ...) -> None: ...
    @property
    def logits_dimension(self): ...
    def create_model_fn_ops(self, features: Any, mode: Any, labels: Optional[Any] = ..., train_op_fn: Optional[Any] = ..., logits: Optional[Any] = ..., logits_input: Optional[Any] = ..., scope: Optional[Any] = ...): ...

class _MultiHead(Head):
    def __init__(self, heads: Any, loss_merger: Any) -> None: ...
    @property
    def logits_dimension(self): ...
    def create_model_fn_ops(self, features: Any, mode: Any, labels: Optional[Any] = ..., train_op_fn: Optional[Any] = ..., logits: Optional[Any] = ..., logits_input: Optional[Any] = ..., scope: Optional[Any] = ...): ...
