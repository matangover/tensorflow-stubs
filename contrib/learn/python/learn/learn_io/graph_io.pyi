# Stubs for tensorflow.contrib.learn.python.learn.learn_io.graph_io (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.input_pipeline.python.ops import input_pipeline_ops as input_pipeline_ops
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, errors as errors, ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.layers import utils as utils
from tensorflow.python.ops import array_ops as array_ops, data_flow_ops as data_flow_ops, io_ops as io_ops, math_ops as math_ops, parsing_ops as parsing_ops
from tensorflow.python.platform import gfile as gfile
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import queue_runner as queue_runner
from tensorflow.python.util.deprecation import deprecated as deprecated
from typing import Any as Any, Optional as Optional

KEY_FEATURE_NAME: str

def read_batch_examples(file_pattern: Any, batch_size: Any, reader: Any, randomize_input: bool = ..., num_epochs: Optional[Any] = ..., queue_capacity: int = ..., num_threads: int = ..., read_batch_size: int = ..., parse_fn: Optional[Any] = ..., name: Optional[Any] = ..., seed: Optional[Any] = ...): ...
def read_keyed_batch_examples(file_pattern: Any, batch_size: Any, reader: Any, randomize_input: bool = ..., num_epochs: Optional[Any] = ..., queue_capacity: int = ..., num_threads: int = ..., read_batch_size: int = ..., parse_fn: Optional[Any] = ..., name: Optional[Any] = ..., seed: Optional[Any] = ...): ...
def read_keyed_batch_examples_shared_queue(file_pattern: Any, batch_size: Any, reader: Any, randomize_input: bool = ..., num_epochs: Optional[Any] = ..., queue_capacity: int = ..., num_threads: int = ..., read_batch_size: int = ..., parse_fn: Optional[Any] = ..., name: Optional[Any] = ..., seed: Optional[Any] = ...): ...
def read_keyed_batch_features(file_pattern: Any, batch_size: Any, features: Any, reader: Any, randomize_input: bool = ..., num_epochs: Optional[Any] = ..., queue_capacity: int = ..., reader_num_threads: int = ..., feature_queue_capacity: int = ..., num_enqueue_threads: int = ..., parse_fn: Optional[Any] = ..., name: Optional[Any] = ..., read_batch_size: Optional[Any] = ...): ...
def read_keyed_batch_features_shared_queue(file_pattern: Any, batch_size: Any, features: Any, reader: Any, randomize_input: bool = ..., num_epochs: Optional[Any] = ..., queue_capacity: int = ..., reader_num_threads: int = ..., feature_queue_capacity: int = ..., num_queue_runners: int = ..., parse_fn: Optional[Any] = ..., name: Optional[Any] = ...): ...
def queue_parsed_features(parsed_features: Any, keys: Optional[Any] = ..., feature_queue_capacity: int = ..., num_enqueue_threads: int = ..., name: Optional[Any] = ...): ...
def read_batch_features(file_pattern: Any, batch_size: Any, features: Any, reader: Any, randomize_input: bool = ..., num_epochs: Optional[Any] = ..., queue_capacity: int = ..., feature_queue_capacity: int = ..., reader_num_threads: int = ..., num_enqueue_threads: int = ..., parse_fn: Optional[Any] = ..., name: Optional[Any] = ..., read_batch_size: Optional[Any] = ...): ...
def read_batch_record_features(file_pattern: Any, batch_size: Any, features: Any, randomize_input: bool = ..., num_epochs: Optional[Any] = ..., queue_capacity: int = ..., reader_num_threads: int = ..., name: str = ...): ...
