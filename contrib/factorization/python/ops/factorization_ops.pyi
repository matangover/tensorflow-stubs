# Stubs for tensorflow.contrib.factorization.python.ops.factorization_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.factorization.python.ops import gen_factorization_ops as gen_factorization_ops
from tensorflow.contrib.util import loader as loader
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, data_flow_ops as data_flow_ops, embedding_ops as embedding_ops, linalg_ops as linalg_ops, math_ops as math_ops, random_ops as random_ops, sparse_ops as sparse_ops, state_ops as state_ops, variable_scope as variable_scope, variables as variables
from tensorflow.python.platform import resource_loader as resource_loader
from typing import Any as Any, Optional as Optional

class WALSModel:
    def __init__(self, input_rows: Any, input_cols: Any, n_components: Any, unobserved_weight: float = ..., regularization: Optional[Any] = ..., row_init: str = ..., col_init: str = ..., num_row_shards: int = ..., num_col_shards: int = ..., row_weights: int = ..., col_weights: int = ..., use_factors_weights_cache: bool = ..., use_gramian_cache: bool = ..., use_scoped_vars: bool = ...) -> None: ...
    @property
    def row_factors(self): ...
    @property
    def col_factors(self): ...
    @property
    def row_weights(self): ...
    @property
    def col_weights(self): ...
    @property
    def initialize_op(self): ...
    @property
    def worker_init(self): ...
    @property
    def row_update_prep_gramian_op(self): ...
    @property
    def col_update_prep_gramian_op(self): ...
    @property
    def initialize_row_update_op(self): ...
    @property
    def initialize_col_update_op(self): ...
    @classmethod
    def scatter_update(cls, factor: Any, indices: Any, values: Any, sharding_func: Any, name: Optional[Any] = ...): ...
    def update_row_factors(self, sp_input: Optional[Any] = ..., transpose_input: bool = ...): ...
    def update_col_factors(self, sp_input: Optional[Any] = ..., transpose_input: bool = ...): ...
    def project_row_factors(self, sp_input: Optional[Any] = ..., transpose_input: bool = ..., projection_weights: Optional[Any] = ...): ...
    def project_col_factors(self, sp_input: Optional[Any] = ..., transpose_input: bool = ..., projection_weights: Optional[Any] = ...): ...
