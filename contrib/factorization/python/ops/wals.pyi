# Stubs for tensorflow.contrib.factorization.python.ops.wals (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.factorization.python.ops import factorization_ops as factorization_ops
from tensorflow.contrib.learn.python.learn.estimators import estimator as estimator, model_fn as model_fn
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, math_ops as math_ops, state_ops as state_ops, variable_scope as variable_scope
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import session_run_hook as session_run_hook, training_util as training_util
from typing import Any as Any, Optional as Optional

class _SweepHook(session_run_hook.SessionRunHook):
    def __init__(self, is_row_sweep_var: Any, is_sweep_done_var: Any, init_op: Any, row_prep_ops: Any, col_prep_ops: Any, row_train_op: Any, col_train_op: Any, switch_op: Any) -> None: ...
    def before_run(self, run_context: Any): ...

class _IncrementGlobalStepHook(session_run_hook.SessionRunHook):
    def __init__(self) -> None: ...
    def before_run(self, run_context: Any) -> None: ...

class _StopAtSweepHook(session_run_hook.SessionRunHook):
    def __init__(self, last_sweep: Any) -> None: ...
    def begin(self) -> None: ...
    def before_run(self, run_context: Any): ...
    def after_run(self, run_context: Any, run_values: Any) -> None: ...

class WALSMatrixFactorization(estimator.Estimator):
    INPUT_ROWS: str = ...
    INPUT_COLS: str = ...
    PROJECT_ROW: str = ...
    PROJECTION_WEIGHTS: str = ...
    PROJECTION_RESULT: str = ...
    COMPLETED_SWEEPS: str = ...
    LOSS: str = ...
    RWSE: str = ...
    def __init__(self, num_rows: Any, num_cols: Any, embedding_dimension: Any, unobserved_weight: float = ..., regularization_coeff: Optional[Any] = ..., row_init: str = ..., col_init: str = ..., num_row_shards: int = ..., num_col_shards: int = ..., row_weights: int = ..., col_weights: int = ..., use_factors_weights_cache_for_training: bool = ..., use_gramian_cache_for_training: bool = ..., max_sweeps: Optional[Any] = ..., model_dir: Optional[Any] = ..., config: Optional[Any] = ...) -> None: ...
    def get_row_factors(self): ...
    def get_col_factors(self): ...
    def get_projections(self, input_fn: Any): ...
