# Stubs for tensorflow.contrib.lite.python.lite (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.lite.python.convert import ConverterMode as ConverterMode, build_toco_convert_protos as build_toco_convert_protos, toco_convert as toco_convert, toco_convert_protos as toco_convert_protos
from tensorflow.contrib.lite.python.interpreter import Interpreter as Interpreter
from tensorflow.contrib.lite.python.op_hint import OpHint as OpHint, convert_op_hints_to_stubs as convert_op_hints_to_stubs
from typing import Any as Any, Optional as Optional

class TFLiteConverter:
    inference_type: Any = ...
    inference_input_type: Any = ...
    output_format: Any = ...
    quantized_input_stats: Any = ...
    default_ranges_stats: Any = ...
    drop_control_dependency: bool = ...
    reorder_across_fake_quant: bool = ...
    change_concat_input_ranges: bool = ...
    allow_custom_ops: bool = ...
    post_training_quantize: bool = ...
    dump_graphviz_dir: Any = ...
    dump_graphviz_video: bool = ...
    converter_mode: Any = ...
    def __init__(self, graph_def: Any, input_tensors: Any, output_tensors: Any, input_arrays_with_shape: Optional[Any] = ..., output_arrays: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_session(cls, sess: Any, input_tensors: Any, output_tensors: Any): ...
    @classmethod
    def from_frozen_graph(cls, graph_def_file: Any, input_arrays: Any, output_arrays: Any, input_shapes: Optional[Any] = ...): ...
    @classmethod
    def from_saved_model(cls, saved_model_dir: Any, input_arrays: Optional[Any] = ..., input_shapes: Optional[Any] = ..., output_arrays: Optional[Any] = ..., tag_set: Optional[Any] = ..., signature_key: Optional[Any] = ...): ...
    @classmethod
    def from_keras_model_file(cls, model_file: Any, input_arrays: Optional[Any] = ..., input_shapes: Optional[Any] = ..., output_arrays: Optional[Any] = ...): ...
    def convert(self): ...
    def get_input_arrays(self): ...

class TocoConverter:
    @classmethod
    def from_session(cls, sess: Any, input_tensors: Any, output_tensors: Any): ...
    @classmethod
    def from_frozen_graph(cls, graph_def_file: Any, input_arrays: Any, output_arrays: Any, input_shapes: Optional[Any] = ...): ...
    @classmethod
    def from_saved_model(cls, saved_model_dir: Any, input_arrays: Optional[Any] = ..., input_shapes: Optional[Any] = ..., output_arrays: Optional[Any] = ..., tag_set: Optional[Any] = ..., signature_key: Optional[Any] = ...): ...
    @classmethod
    def from_keras_model_file(cls, model_file: Any, input_arrays: Optional[Any] = ..., input_shapes: Optional[Any] = ..., output_arrays: Optional[Any] = ...): ...
