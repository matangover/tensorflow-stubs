# Stubs for tensorflow.contrib.linear_optimizer.python.sdca_estimator (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib import layers as layers
from tensorflow.contrib.learn.python.learn.estimators import estimator as estimator, prediction_key as prediction_key
from tensorflow.contrib.linear_optimizer.python import sdca_optimizer as sdca_optimizer
from tensorflow.python.framework import dtypes as dtypes, sparse_tensor as sparse_tensor, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, variable_scope as variable_scope
from tensorflow.python.training import session_run_hook as session_run_hook, training_util as training_util
from typing import Any as Any, Optional as Optional

def sdca_model_fn(features: Any, labels: Any, mode: Any, params: Any, config: Optional[Any] = ...): ...

class _SdcaUpdateWeightsHook(session_run_hook.SessionRunHook):
    def __init__(self) -> None: ...
    def set_parameters(self, sdca_model: Any, train_op: Any) -> None: ...
    def begin(self) -> None: ...
    def before_run(self, run_context: Any): ...

class _SDCAEstimator(estimator.Estimator):
    def __init__(self, example_id_column: Any, feature_columns: Any, weight_column_name: Optional[Any] = ..., model_dir: Optional[Any] = ..., head: Optional[Any] = ..., l1_regularization: float = ..., l2_regularization: float = ..., num_loss_partitions: Optional[Any] = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., partitioner: Optional[Any] = ...) -> None: ...

class SDCALogisticClassifier(_SDCAEstimator):
    def __init__(self, example_id_column: Any, feature_columns: Any, weight_column_name: Optional[Any] = ..., model_dir: Optional[Any] = ..., l1_regularization: float = ..., l2_regularization: float = ..., num_loss_partitions: Optional[Any] = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., partitioner: Optional[Any] = ...) -> None: ...
    def predict_classes(self, input_fn: Optional[Any] = ...): ...
    def predict_proba(self, input_fn: Optional[Any] = ...): ...

class SDCALinearRegressor(_SDCAEstimator):
    def __init__(self, example_id_column: Any, feature_columns: Any, weight_column_name: Optional[Any] = ..., model_dir: Optional[Any] = ..., l1_regularization: float = ..., l2_regularization: float = ..., num_loss_partitions: Optional[Any] = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., partitioner: Optional[Any] = ...) -> None: ...
    def predict_scores(self, input_fn: Any): ...
