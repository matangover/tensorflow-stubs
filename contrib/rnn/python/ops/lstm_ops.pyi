# Stubs for tensorflow.contrib.rnn.python.ops.lstm_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.contrib.rnn.ops import gen_lstm_ops as gen_lstm_ops
from tensorflow.contrib.util import loader as loader
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.layers import base as base_layer
from tensorflow.python.ops import array_ops as array_ops, init_ops as init_ops, math_ops as math_ops, nn_ops as nn_ops, rnn_cell_impl as rnn_cell_impl
from tensorflow.python.platform import resource_loader as resource_loader
from typing import Any as Any, Optional as Optional

LayerRNNCell = rnn_cell_impl.LayerRNNCell

class LSTMBlockCell(LayerRNNCell):
    input_spec: Any = ...
    def __init__(self, num_units: Any, forget_bias: float = ..., cell_clip: Optional[Any] = ..., use_peephole: bool = ..., reuse: Optional[Any] = ..., name: str = ...) -> None: ...
    @property
    def state_size(self): ...
    @property
    def output_size(self): ...
    built: bool = ...
    def build(self, inputs_shape: Any) -> None: ...
    def call(self, inputs: Any, state: Any): ...

class LSTMBlockWrapper(base_layer.Layer, metaclass=abc.ABCMeta):
    def num_units(self) -> Any: ...
    def call(self, inputs: Any, initial_state: Optional[Any] = ..., dtype: Optional[Any] = ..., sequence_length: Optional[Any] = ...): ...

class LSTMBlockFusedCell(LSTMBlockWrapper):
    input_spec: Any = ...
    def __init__(self, num_units: Any, forget_bias: float = ..., cell_clip: Optional[Any] = ..., use_peephole: bool = ..., reuse: Optional[Any] = ..., dtype: Optional[Any] = ..., name: str = ...) -> None: ...
    @property
    def num_units(self): ...
    built: bool = ...
    def build(self, input_shape: Any) -> None: ...
