# Stubs for tensorflow.contrib.tensor_forest.python.ops.gen_model_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def create_tree_variable(tree_handle: Any, tree_config: Any, params: Any, name: Optional[Any] = ...): ...
def create_tree_variable_eager_fallback(tree_handle: Any, tree_config: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def decision_tree_resource_handle_op(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def decision_tree_resource_handle_op_eager_fallback(container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def feature_usage_counts(tree_handle: Any, params: Any, name: Optional[Any] = ...): ...
def feature_usage_counts_eager_fallback(tree_handle: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def traverse_tree_v4(tree_handle: Any, input_data: Any, sparse_input_indices: Any, sparse_input_values: Any, sparse_input_shape: Any, input_spec: Any, params: Any, name: Optional[Any] = ...): ...
def traverse_tree_v4_eager_fallback(tree_handle: Any, input_data: Any, sparse_input_indices: Any, sparse_input_values: Any, sparse_input_shape: Any, input_spec: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tree_deserialize(tree_handle: Any, tree_config: Any, params: Any, name: Optional[Any] = ...): ...
def tree_deserialize_eager_fallback(tree_handle: Any, tree_config: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tree_is_initialized_op(tree_handle: Any, name: Optional[Any] = ...): ...
def tree_is_initialized_op_eager_fallback(tree_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _TreePredictionsV4Output = namedtuple('TreePredictionsV4', <ERROR>)

def tree_predictions_v4(tree_handle: Any, input_data: Any, sparse_input_indices: Any, sparse_input_values: Any, sparse_input_shape: Any, input_spec: Any, params: Any, name: Optional[Any] = ...): ...
def tree_predictions_v4_eager_fallback(tree_handle: Any, input_data: Any, sparse_input_indices: Any, sparse_input_values: Any, sparse_input_shape: Any, input_spec: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tree_serialize(tree_handle: Any, name: Optional[Any] = ...): ...
def tree_serialize_eager_fallback(tree_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def tree_size(tree_handle: Any, name: Optional[Any] = ...): ...
def tree_size_eager_fallback(tree_handle: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def update_model_v4(tree_handle: Any, leaf_ids: Any, input_labels: Any, input_weights: Any, params: Any, name: Optional[Any] = ...): ...
def update_model_v4_eager_fallback(tree_handle: Any, leaf_ids: Any, input_labels: Any, input_weights: Any, params: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
