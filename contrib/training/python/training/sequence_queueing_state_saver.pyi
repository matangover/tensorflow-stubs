# Stubs for tensorflow.contrib.training.python.training.sequence_queueing_state_saver (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.framework import dtypes as dtypes, errors as errors, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, data_flow_ops as data_flow_ops, math_ops as math_ops, random_ops as random_ops, sparse_ops as sparse_ops, string_ops as string_ops
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import queue_runner as queue_runner
from typing import Any as Any, Optional as Optional

class _SequenceInputWrapper:
    def __init__(self, length: Any, key: Any, sequences: Any, context: Any) -> None: ...
    @property
    def length(self): ...
    @property
    def key(self): ...
    @property
    def sequences(self): ...
    @property
    def context(self): ...

class NextQueuedSequenceBatch:
    def __init__(self, state_saver: Any) -> None: ...
    @property
    def total_length(self): ...
    @property
    def length(self): ...
    @property
    def batch_size(self): ...
    @property
    def insertion_index(self): ...
    @property
    def key(self): ...
    @property
    def next_key(self): ...
    @property
    def sequence(self): ...
    @property
    def sequence_count(self): ...
    @property
    def context(self): ...
    @property
    def sequences(self): ...
    def state(self, state_name: Any): ...
    def save_state(self, state_name: Any, value: Any, name: Optional[Any] = ...): ...

class SequenceQueueingStateSaver:
    def __init__(self, batch_size: Any, num_unroll: Any, input_length: Any, input_key: Any, input_sequences: Any, input_context: Any, initial_states: Any, capacity: Optional[Any] = ..., allow_small_batch: bool = ..., name: Optional[Any] = ...) -> None: ...
    @property
    def name(self): ...
    @property
    def barrier(self): ...
    @property
    def batch_size(self): ...
    @property
    def num_unroll(self): ...
    @property
    def prefetch_op(self): ...
    @property
    def next_batch(self): ...
    def close(self, cancel_pending_enqueues: bool = ..., name: Optional[Any] = ...): ...

def batch_sequences_with_states(input_key: Any, input_sequences: Any, input_context: Any, input_length: Any, initial_states: Any, num_unroll: Any, batch_size: Any, num_threads: int = ..., capacity: int = ..., allow_small_batch: bool = ..., pad: bool = ..., make_keys_unique: bool = ..., make_keys_unique_seed: Optional[Any] = ..., name: Optional[Any] = ...): ...
