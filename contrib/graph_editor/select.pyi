# Stubs for tensorflow.contrib.graph_editor.select (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.graph_editor import util as util
from typing import Any as Any, Optional as Optional

def can_be_regex(obj: Any): ...
def make_regex(obj: Any): ...
def filter_ts(ops: Any, positive_filter: Any): ...
def filter_ts_from_regex(ops: Any, regex: Any): ...
def filter_ops(ops: Any, positive_filter: Any): ...
def filter_ops_from_regex(ops: Any, regex: Any): ...
def get_name_scope_ops(ops: Any, scope: Any): ...
def check_cios(control_inputs: bool = ..., control_outputs: Optional[Any] = ..., control_ios: Optional[Any] = ...): ...
def get_ops_ios(ops: Any, control_inputs: bool = ..., control_outputs: Optional[Any] = ..., control_ios: Optional[Any] = ...): ...
def compute_boundary_ts(ops: Any): ...
def get_within_boundary_ops(ops: Any, seed_ops: Any, boundary_ops: Any = ..., inclusive: bool = ..., control_inputs: bool = ..., control_outputs: Optional[Any] = ..., control_ios: Optional[Any] = ...): ...
def get_forward_walk_ops(seed_ops: Any, inclusive: bool = ..., within_ops: Optional[Any] = ..., within_ops_fn: Optional[Any] = ..., stop_at_ts: Any = ..., control_outputs: Optional[Any] = ...): ...
def get_backward_walk_ops(seed_ops: Any, inclusive: bool = ..., within_ops: Optional[Any] = ..., within_ops_fn: Optional[Any] = ..., stop_at_ts: Any = ..., control_inputs: bool = ...): ...
def get_walks_intersection_ops(forward_seed_ops: Any, backward_seed_ops: Any, forward_inclusive: bool = ..., backward_inclusive: bool = ..., within_ops: Optional[Any] = ..., within_ops_fn: Optional[Any] = ..., control_inputs: bool = ..., control_outputs: Optional[Any] = ..., control_ios: Optional[Any] = ...): ...
def get_walks_union_ops(forward_seed_ops: Any, backward_seed_ops: Any, forward_inclusive: bool = ..., backward_inclusive: bool = ..., within_ops: Optional[Any] = ..., within_ops_fn: Optional[Any] = ..., control_inputs: bool = ..., control_outputs: Optional[Any] = ..., control_ios: Optional[Any] = ...): ...
def select_ops(*args: Any, **kwargs: Any): ...
def select_ts(*args: Any, **kwargs: Any): ...
def select_ops_and_ts(*args: Any, **kwargs: Any): ...
