# Stubs for tensorflow.contrib.bigtable.ops.gen_bigtable_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def bigtable_client(project_id: Any, instance_id: Any, connection_pool_size: Any, max_receive_message_size: int = ..., container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def bigtable_client_eager_fallback(project_id: Any, instance_id: Any, connection_pool_size: Any, max_receive_message_size: int = ..., container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def bigtable_lookup_dataset(keys_dataset: Any, table: Any, column_families: Any, columns: Any, name: Optional[Any] = ...): ...
def bigtable_lookup_dataset_eager_fallback(keys_dataset: Any, table: Any, column_families: Any, columns: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def bigtable_prefix_key_dataset(table: Any, prefix: Any, name: Optional[Any] = ...): ...
def bigtable_prefix_key_dataset_eager_fallback(table: Any, prefix: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def bigtable_range_key_dataset(table: Any, start_key: Any, end_key: Any, name: Optional[Any] = ...): ...
def bigtable_range_key_dataset_eager_fallback(table: Any, start_key: Any, end_key: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def bigtable_sample_key_pairs_dataset(table: Any, prefix: Any, start_key: Any, end_key: Any, name: Optional[Any] = ...): ...
def bigtable_sample_key_pairs_dataset_eager_fallback(table: Any, prefix: Any, start_key: Any, end_key: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def bigtable_sample_keys_dataset(table: Any, name: Optional[Any] = ...): ...
def bigtable_sample_keys_dataset_eager_fallback(table: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def bigtable_scan_dataset(table: Any, prefix: Any, start_key: Any, end_key: Any, column_families: Any, columns: Any, probability: Any, name: Optional[Any] = ...): ...
def bigtable_scan_dataset_eager_fallback(table: Any, prefix: Any, start_key: Any, end_key: Any, column_families: Any, columns: Any, probability: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def bigtable_table(client: Any, table_name: Any, container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def bigtable_table_eager_fallback(client: Any, table_name: Any, container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def dataset_to_bigtable(table: Any, input_dataset: Any, column_families: Any, columns: Any, timestamp: Any, name: Optional[Any] = ...): ...
def dataset_to_bigtable_eager_fallback(table: Any, input_dataset: Any, column_families: Any, columns: Any, timestamp: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
