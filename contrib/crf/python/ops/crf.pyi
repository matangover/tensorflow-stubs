# Stubs for tensorflow.contrib.crf.python.ops.crf (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes
from tensorflow.python.layers import utils as utils
from tensorflow.python.ops import array_ops as array_ops, gen_array_ops as gen_array_ops, math_ops as math_ops, rnn as rnn, rnn_cell as rnn_cell
from typing import Any as Any, Optional as Optional

def crf_sequence_score(inputs: Any, tag_indices: Any, sequence_lengths: Any, transition_params: Any): ...
def crf_multitag_sequence_score(inputs: Any, tag_bitmap: Any, sequence_lengths: Any, transition_params: Any): ...
def crf_log_norm(inputs: Any, sequence_lengths: Any, transition_params: Any): ...
def crf_log_likelihood(inputs: Any, tag_indices: Any, sequence_lengths: Any, transition_params: Optional[Any] = ...): ...
def crf_unary_score(tag_indices: Any, sequence_lengths: Any, inputs: Any): ...
def crf_binary_score(tag_indices: Any, sequence_lengths: Any, transition_params: Any): ...

class CrfForwardRnnCell(rnn_cell.RNNCell):
    def __init__(self, transition_params: Any) -> None: ...
    @property
    def state_size(self): ...
    @property
    def output_size(self): ...
    def __call__(self, inputs: Any, state: Any, scope: Optional[Any] = ...): ...

def viterbi_decode(score: Any, transition_params: Any): ...

class CrfDecodeForwardRnnCell(rnn_cell.RNNCell):
    def __init__(self, transition_params: Any) -> None: ...
    @property
    def state_size(self): ...
    @property
    def output_size(self): ...
    def __call__(self, inputs: Any, state: Any, scope: Optional[Any] = ...): ...

class CrfDecodeBackwardRnnCell(rnn_cell.RNNCell):
    def __init__(self, num_tags: Any) -> None: ...
    @property
    def state_size(self): ...
    @property
    def output_size(self): ...
    def __call__(self, inputs: Any, state: Any, scope: Optional[Any] = ...): ...

def crf_decode(potentials: Any, transition_params: Any, sequence_length: Any): ...
