# Stubs for tensorflow.contrib.slim.python.slim.data.parallel_reader (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.framework import ops as ops
from tensorflow.python.ops import data_flow_ops as data_flow_ops, io_ops as io_ops, math_ops as math_ops
from tensorflow.python.platform import gfile as gfile
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import queue_runner as queue_runner
from typing import Any as Any, Optional as Optional

class ParallelReader(io_ops.ReaderBase):
    def __init__(self, reader_class: Any, common_queue: Any, num_readers: int = ..., reader_kwargs: Optional[Any] = ...) -> None: ...
    @property
    def num_readers(self): ...
    @property
    def common_queue(self): ...
    def read(self, queue: Any, name: Optional[Any] = ...): ...
    def read_up_to(self, queue: Any, num_records: Any, name: Optional[Any] = ...): ...
    def num_records_produced(self, name: Optional[Any] = ...): ...
    def num_work_units_completed(self, name: Optional[Any] = ...): ...

def parallel_read(data_sources: Any, reader_class: Any, num_epochs: Optional[Any] = ..., num_readers: int = ..., reader_kwargs: Optional[Any] = ..., shuffle: bool = ..., dtypes: Optional[Any] = ..., capacity: int = ..., min_after_dequeue: int = ..., seed: Optional[Any] = ..., scope: Optional[Any] = ...): ...
def single_pass_read(data_sources: Any, reader_class: Any, reader_kwargs: Optional[Any] = ..., scope: Optional[Any] = ...): ...
def get_data_files(data_sources: Any): ...
