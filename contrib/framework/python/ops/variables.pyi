# Stubs for tensorflow.contrib.framework.python.ops.variables (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.framework.python.ops import gen_variable_ops as gen_variable_ops
from tensorflow.contrib.util import loader as loader
from tensorflow.core.protobuf import saver_pb2 as saver_pb2
from tensorflow.python import pywrap_tensorflow as pywrap_tensorflow
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, resource_variable_ops as resource_variable_ops, variable_scope as variable_scope, variables as variables
from tensorflow.python.platform import resource_loader as resource_loader
from tensorflow.python.training import training_util as training_util
from tensorflow.python.util.deprecation import deprecated as deprecated
from typing import Any as Any, Optional as Optional

def zero_initializer(ref: Any, use_locking: bool = ..., name: str = ...): ...
def assert_global_step(global_step_tensor: Any) -> None: ...
def assert_or_get_global_step(graph: Optional[Any] = ..., global_step_tensor: Optional[Any] = ...): ...
def get_global_step(graph: Optional[Any] = ...): ...
def create_global_step(graph: Optional[Any] = ...): ...
def get_or_create_global_step(graph: Optional[Any] = ...): ...
def local_variable(initial_value: Any, validate_shape: bool = ..., name: Optional[Any] = ..., use_resource: Optional[Any] = ...): ...
def global_variable(initial_value: Any, validate_shape: bool = ..., name: Optional[Any] = ..., use_resource: Optional[Any] = ...): ...
def variable(name: Any, shape: Optional[Any] = ..., dtype: Optional[Any] = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., trainable: bool = ..., collections: Optional[Any] = ..., caching_device: Optional[Any] = ..., device: Optional[Any] = ..., partitioner: Optional[Any] = ..., custom_getter: Optional[Any] = ..., use_resource: Optional[Any] = ..., synchronization: Any = ..., aggregation: Any = ...): ...
def model_variable(name: Any, shape: Optional[Any] = ..., dtype: Any = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., trainable: bool = ..., collections: Optional[Any] = ..., caching_device: Optional[Any] = ..., device: Optional[Any] = ..., partitioner: Optional[Any] = ..., custom_getter: Optional[Any] = ..., use_resource: Optional[Any] = ..., synchronization: Any = ..., aggregation: Any = ...): ...
def add_model_variable(var: Any) -> None: ...
def get_variables(scope: Optional[Any] = ..., suffix: Optional[Any] = ..., collection: Any = ...): ...
def get_model_variables(scope: Optional[Any] = ..., suffix: Optional[Any] = ...): ...
def get_local_variables(scope: Optional[Any] = ..., suffix: Optional[Any] = ...): ...
def get_trainable_variables(scope: Optional[Any] = ..., suffix: Optional[Any] = ...): ...
def get_variables_to_restore(include: Optional[Any] = ..., exclude: Optional[Any] = ...): ...
def get_variables_by_suffix(suffix: Any, scope: Optional[Any] = ...): ...
def get_variables_by_name(given_name: Any, scope: Optional[Any] = ...): ...
def get_unique_variable(var_op_name: Any): ...
def assign_from_values(var_names_to_values: Any): ...
def assign_from_values_fn(var_names_to_values: Any): ...
def get_variable_full_name(var: Any): ...
def assign_from_checkpoint(model_path: Any, var_list: Any, ignore_missing_vars: bool = ...): ...
def assign_from_checkpoint_fn(model_path: Any, var_list: Any, ignore_missing_vars: bool = ..., reshape_variables: bool = ...): ...

class VariableDeviceChooser:
    def __init__(self, num_tasks: int = ..., job_name: str = ..., device_type: str = ..., device_index: int = ..., replica: Optional[Any] = ...) -> None: ...
    def __call__(self, op: Any): ...

def filter_variables(var_list: Any, include_patterns: Optional[Any] = ..., exclude_patterns: Optional[Any] = ..., reg_search: bool = ...): ...
