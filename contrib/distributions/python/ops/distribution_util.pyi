# Stubs for tensorflow.contrib.distributions.python.ops.distribution_util (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.ops.distributions.util import *
from tensorflow.python.framework import dtypes as dtypes, ops as ops, smart_cond as smart_cond, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, math_ops as math_ops
from tensorflow.python.ops.distributions import util as util
from tensorflow.python.ops.linalg import linalg as linalg
from typing import Any as Any, Optional as Optional

def mixture_stddev(mixture_weight_vector: Any, mean_vector: Any, stddev_vector: Any): ...
def make_tril_scale(loc: Optional[Any] = ..., scale_tril: Optional[Any] = ..., scale_diag: Optional[Any] = ..., scale_identity_multiplier: Optional[Any] = ..., shape_hint: Optional[Any] = ..., validate_args: bool = ..., assert_positive: bool = ..., name: Optional[Any] = ...): ...
def make_diag_scale(loc: Optional[Any] = ..., scale_diag: Optional[Any] = ..., scale_identity_multiplier: Optional[Any] = ..., shape_hint: Optional[Any] = ..., validate_args: bool = ..., assert_positive: bool = ..., name: Optional[Any] = ...): ...
def shapes_from_loc_and_scale(loc: Any, scale: Any, name: str = ...): ...
def get_broadcast_shape(*tensors: Any): ...
def is_diagonal_scale(scale: Any): ...
def maybe_check_scalar_distribution(distribution: Any, expected_base_dtype: Any, validate_args: Any): ...
def pad_mixture_dimensions(x: Any, mixture_distribution: Any, categorical_distribution: Any, event_ndims: Any): ...
def static_value(x: Any): ...
def move_dimension(x: Any, source_idx: Any, dest_idx: Any): ...
