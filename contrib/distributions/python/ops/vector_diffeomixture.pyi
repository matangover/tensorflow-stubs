# Stubs for tensorflow.contrib.distributions.python.ops.vector_diffeomixture (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.distributions.python.ops import distribution_util as distribution_util
from tensorflow.contrib.distributions.python.ops.bijectors.affine_linear_operator import AffineLinearOperator as AffineLinearOperator
from tensorflow.contrib.distributions.python.ops.bijectors.softmax_centered import SoftmaxCentered as SoftmaxCentered
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, math_ops as math_ops, nn_ops as nn_ops
from tensorflow.python.ops.distributions import distribution as distribution_lib
from tensorflow.python.util import deprecation as deprecation
from typing import Any as Any, Optional as Optional

def quadrature_scheme_softmaxnormal_gauss_hermite(normal_loc: Any, normal_scale: Any, quadrature_size: Any, validate_args: bool = ..., name: Optional[Any] = ...): ...
def quadrature_scheme_softmaxnormal_quantiles(normal_loc: Any, normal_scale: Any, quadrature_size: Any, validate_args: bool = ..., name: Optional[Any] = ...): ...

class VectorDiffeomixture(distribution_lib.Distribution):
    def __init__(self, mix_loc: Any, temperature: Any, distribution: Any, loc: Optional[Any] = ..., scale: Optional[Any] = ..., quadrature_size: int = ..., quadrature_fn: Any = ..., validate_args: bool = ..., allow_nan_stats: bool = ..., name: str = ...) -> None: ...
    @property
    def mixture_distribution(self): ...
    @property
    def distribution(self): ...
    @property
    def grid(self): ...
    @property
    def endpoint_affine(self): ...
    @property
    def interpolated_affine(self): ...
