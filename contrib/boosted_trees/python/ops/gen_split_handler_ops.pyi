# Stubs for tensorflow.contrib.boosted_trees.python.ops.gen_split_handler_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

# _BuildCategoricalEqualitySplitsOutput = namedtuple('BuildCategoricalEqualitySplits', <ERROR>)

def build_categorical_equality_splits(num_minibatches: Any, partition_ids: Any, feature_ids: Any, gradients: Any, hessians: Any, class_id: Any, feature_column_group_id: Any, bias_feature_id: Any, l1_regularization: Any, l2_regularization: Any, tree_complexity_regularization: Any, min_node_weight: Any, multiclass_strategy: Any, weak_learner_type: Any, name: Optional[Any] = ...): ...
def build_categorical_equality_splits_eager_fallback(num_minibatches: Any, partition_ids: Any, feature_ids: Any, gradients: Any, hessians: Any, class_id: Any, feature_column_group_id: Any, bias_feature_id: Any, l1_regularization: Any, l2_regularization: Any, tree_complexity_regularization: Any, min_node_weight: Any, multiclass_strategy: Any, weak_learner_type: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _BuildDenseInequalitySplitsOutput = namedtuple('BuildDenseInequalitySplits', <ERROR>)

def build_dense_inequality_splits(num_minibatches: Any, partition_ids: Any, bucket_ids: Any, gradients: Any, hessians: Any, bucket_boundaries: Any, class_id: Any, feature_column_group_id: Any, l1_regularization: Any, l2_regularization: Any, tree_complexity_regularization: Any, min_node_weight: Any, multiclass_strategy: Any, weak_learner_type: Any, name: Optional[Any] = ...): ...
def build_dense_inequality_splits_eager_fallback(num_minibatches: Any, partition_ids: Any, bucket_ids: Any, gradients: Any, hessians: Any, bucket_boundaries: Any, class_id: Any, feature_column_group_id: Any, l1_regularization: Any, l2_regularization: Any, tree_complexity_regularization: Any, min_node_weight: Any, multiclass_strategy: Any, weak_learner_type: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _BuildSparseInequalitySplitsOutput = namedtuple('BuildSparseInequalitySplits', <ERROR>)

def build_sparse_inequality_splits(num_minibatches: Any, partition_ids: Any, bucket_ids: Any, gradients: Any, hessians: Any, bucket_boundaries: Any, class_id: Any, feature_column_group_id: Any, bias_feature_id: Any, l1_regularization: Any, l2_regularization: Any, tree_complexity_regularization: Any, min_node_weight: Any, multiclass_strategy: Any, name: Optional[Any] = ...): ...
def build_sparse_inequality_splits_eager_fallback(num_minibatches: Any, partition_ids: Any, bucket_ids: Any, gradients: Any, hessians: Any, bucket_boundaries: Any, class_id: Any, feature_column_group_id: Any, bias_feature_id: Any, l1_regularization: Any, l2_regularization: Any, tree_complexity_regularization: Any, min_node_weight: Any, multiclass_strategy: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
