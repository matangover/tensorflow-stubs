# Stubs for tensorflow.contrib.boosted_trees.estimator_batch.estimator (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.boosted_trees.estimator_batch import model as model
from tensorflow.contrib.boosted_trees.python.utils import losses as losses
from tensorflow.contrib.learn.python.learn.estimators import estimator as estimator
from tensorflow.python.estimator import estimator as core_estimator
from tensorflow.python.ops import math_ops as math_ops
from typing import Any as Any, Optional as Optional

class GradientBoostedDecisionTreeClassifier(estimator.Estimator):
    def __init__(self, learner_config: Any, examples_per_layer: Any, n_classes: int = ..., num_trees: Optional[Any] = ..., feature_columns: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., model_dir: Optional[Any] = ..., config: Optional[Any] = ..., label_keys: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., logits_modifier_function: Optional[Any] = ..., center_bias: bool = ..., use_core_libs: bool = ..., output_leaf_index: bool = ..., override_global_step_value: Optional[Any] = ..., num_quantiles: int = ...) -> None: ...

class GradientBoostedDecisionTreeRegressor(estimator.Estimator):
    def __init__(self, learner_config: Any, examples_per_layer: Any, label_dimension: int = ..., num_trees: Optional[Any] = ..., feature_columns: Optional[Any] = ..., label_name: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., model_dir: Optional[Any] = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., logits_modifier_function: Optional[Any] = ..., center_bias: bool = ..., use_core_libs: bool = ..., output_leaf_index: bool = ..., override_global_step_value: Optional[Any] = ..., num_quantiles: int = ...) -> None: ...

class GradientBoostedDecisionTreeEstimator(estimator.Estimator):
    def __init__(self, learner_config: Any, examples_per_layer: Any, head: Any, num_trees: Optional[Any] = ..., feature_columns: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., model_dir: Optional[Any] = ..., config: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., logits_modifier_function: Optional[Any] = ..., center_bias: bool = ..., use_core_libs: bool = ..., output_leaf_index: bool = ..., override_global_step_value: Optional[Any] = ..., num_quantiles: int = ...) -> None: ...

class GradientBoostedDecisionTreeRanker(estimator.Estimator):
    def __init__(self, learner_config: Any, examples_per_layer: Any, head: Any, ranking_model_pair_keys: Any, num_trees: Optional[Any] = ..., feature_columns: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., model_dir: Optional[Any] = ..., config: Optional[Any] = ..., label_keys: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., logits_modifier_function: Optional[Any] = ..., center_bias: bool = ..., use_core_libs: bool = ..., output_leaf_index: bool = ..., override_global_step_value: Optional[Any] = ..., num_quantiles: int = ...) -> None: ...

def core_multiclass_head(n_classes: Any): ...

class CoreGradientBoostedDecisionTreeEstimator(core_estimator.Estimator):
    def __init__(self, learner_config: Any, examples_per_layer: Any, head: Any, num_trees: Optional[Any] = ..., feature_columns: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., model_dir: Optional[Any] = ..., config: Optional[Any] = ..., label_keys: Optional[Any] = ..., feature_engineering_fn: Optional[Any] = ..., logits_modifier_function: Optional[Any] = ..., center_bias: bool = ..., output_leaf_index: bool = ..., num_quantiles: int = ...) -> None: ...

class CoreGradientBoostedDecisionTreeRanker(core_estimator.Estimator):
    def __init__(self, learner_config: Any, examples_per_layer: Any, head: Any, ranking_model_pair_keys: Any, num_trees: Optional[Any] = ..., feature_columns: Optional[Any] = ..., weight_column_name: Optional[Any] = ..., model_dir: Optional[Any] = ..., config: Optional[Any] = ..., label_keys: Optional[Any] = ..., logits_modifier_function: Optional[Any] = ..., center_bias: bool = ..., output_leaf_index: bool = ..., num_quantiles: int = ...) -> None: ...
