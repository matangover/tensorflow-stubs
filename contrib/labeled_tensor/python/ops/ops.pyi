# Stubs for tensorflow.contrib.labeled_tensor.python.ops.ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.labeled_tensor.python.ops import core as core
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, functional_ops as functional_ops, math_ops as math_ops, numerics as numerics, random_ops as random_ops
from tensorflow.python.training import input as input
from typing import Any as Any, Optional as Optional

def select(labeled_tensor: Any, selection: Any, name: Optional[Any] = ...): ...
def concat(labeled_tensors: Any, axis_name: Any, name: Optional[Any] = ...): ...
def pack(labeled_tensors: Any, new_axis: Any, axis_position: int = ..., name: Optional[Any] = ...): ...
def unpack(labeled_tensor: Any, axis_name: Optional[Any] = ..., name: Optional[Any] = ...): ...
def reshape(labeled_tensor: Any, existing_axes: Any, new_axes: Any, name: Optional[Any] = ...): ...
def rename_axis(labeled_tensor: Any, existing_name: Any, new_name: Any, name: Optional[Any] = ...): ...
def batch(labeled_tensors: Any, batch_size: Any, num_threads: int = ..., capacity: int = ..., enqueue_many: bool = ..., allow_smaller_final_batch: bool = ..., name: Optional[Any] = ...): ...
def shuffle_batch(labeled_tensors: Any, batch_size: Any, num_threads: int = ..., capacity: int = ..., enqueue_many: bool = ..., min_after_dequeue: int = ..., seed: Optional[Any] = ..., allow_smaller_final_batch: bool = ..., name: Optional[Any] = ...): ...
def random_crop(labeled_tensor: Any, shape_map: Any, seed: Optional[Any] = ..., name: Optional[Any] = ...): ...
def map_fn(fn: Any, labeled_tensor: Any, name: Optional[Any] = ...): ...
def foldl(fn: Any, labeled_tensor: Any, initial_value: Any, name: Optional[Any] = ...): ...
def squeeze(labeled_tensor: Any, axis_names: Optional[Any] = ..., name: Optional[Any] = ...): ...

ReduceAxis: Any
ReduceAxes: Any

def matmul(a: Any, b: Any, name: Optional[Any] = ...): ...
def define_reduce_op(op_name: Any, reduce_fn: Any): ...

reduce_all: Any
reduce_any: Any
reduce_logsumexp: Any
reduce_max: Any
reduce_mean: Any
reduce_min: Any
reduce_prod: Any
reduce_sum: Any

def tile(labeled_tensor: Any, multiples: Any, name: Optional[Any] = ...): ...
def pad(labeled_tensor: Any, paddings: Any, mode: str = ..., name: Optional[Any] = ...): ...
def constant(value: Any, dtype: Optional[Any] = ..., axes: Optional[Any] = ..., name: Optional[Any] = ...): ...
def zeros_like(labeled_tensor: Any, dtype: Optional[Any] = ..., name: Optional[Any] = ...): ...
def ones_like(labeled_tensor: Any, dtype: Optional[Any] = ..., name: Optional[Any] = ...): ...
def cast(labeled_tensor: Any, dtype: Optional[Any] = ..., name: Optional[Any] = ...): ...
def verify_tensor_all_finite(labeled_tensor: Any, message: Any, name: Optional[Any] = ...): ...
def boolean_mask(labeled_tensor: Any, mask: Any, name: Optional[Any] = ...): ...
def where(condition: Any, x: Any, y: Any, name: Optional[Any] = ...): ...
