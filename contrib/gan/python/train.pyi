# Stubs for tensorflow.contrib.gan.python.train (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.gan.python import namedtuples as namedtuples
from tensorflow.contrib.training.python.training import training as training
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, init_ops as init_ops, math_ops as math_ops, random_ops as random_ops, variable_scope as variable_scope
from tensorflow.python.ops.losses import losses as losses
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import session_run_hook as session_run_hook, sync_replicas_optimizer as sync_replicas_optimizer, training_util as training_util
from typing import Any as Any, Optional as Optional

def gan_model(generator_fn: Any, discriminator_fn: Any, real_data: Any, generator_inputs: Any, generator_scope: str = ..., discriminator_scope: str = ..., check_shapes: bool = ...): ...
def infogan_model(generator_fn: Any, discriminator_fn: Any, real_data: Any, unstructured_generator_inputs: Any, structured_generator_inputs: Any, generator_scope: str = ..., discriminator_scope: str = ...): ...
def acgan_model(generator_fn: Any, discriminator_fn: Any, real_data: Any, generator_inputs: Any, one_hot_labels: Any, generator_scope: str = ..., discriminator_scope: str = ..., check_shapes: bool = ...): ...
def cyclegan_model(generator_fn: Any, discriminator_fn: Any, data_x: Any, data_y: Any, generator_scope: str = ..., discriminator_scope: str = ..., model_x2y_scope: str = ..., model_y2x_scope: str = ..., check_shapes: bool = ...): ...
def stargan_model(generator_fn: Any, discriminator_fn: Any, input_data: Any, input_data_domain_label: Any, generator_scope: str = ..., discriminator_scope: str = ...): ...
def gan_loss(model: Any, generator_loss_fn: Any = ..., discriminator_loss_fn: Any = ..., gradient_penalty_weight: Optional[Any] = ..., gradient_penalty_epsilon: float = ..., gradient_penalty_target: float = ..., gradient_penalty_one_sided: bool = ..., mutual_information_penalty_weight: Optional[Any] = ..., aux_cond_generator_weight: Optional[Any] = ..., aux_cond_discriminator_weight: Optional[Any] = ..., tensor_pool_fn: Optional[Any] = ..., add_summaries: bool = ...): ...
def cyclegan_loss(model: Any, generator_loss_fn: Any = ..., discriminator_loss_fn: Any = ..., cycle_consistency_loss_fn: Any = ..., cycle_consistency_loss_weight: float = ..., **kwargs: Any): ...
def stargan_loss(model: Any, generator_loss_fn: Any = ..., discriminator_loss_fn: Any = ..., gradient_penalty_weight: float = ..., gradient_penalty_epsilon: float = ..., gradient_penalty_target: float = ..., gradient_penalty_one_sided: bool = ..., reconstruction_loss_fn: Any = ..., reconstruction_loss_weight: float = ..., classification_loss_fn: Any = ..., classification_loss_weight: float = ..., classification_one_hot: bool = ..., add_summaries: bool = ...): ...
def gan_train_ops(model: Any, loss: Any, generator_optimizer: Any, discriminator_optimizer: Any, check_for_unused_update_ops: bool = ..., **kwargs: Any): ...

class RunTrainOpsHook(session_run_hook.SessionRunHook):
    def __init__(self, train_ops: Any, train_steps: Any) -> None: ...
    def before_run(self, run_context: Any) -> None: ...

def get_sequential_train_hooks(train_steps: Any = ...): ...
def get_joint_train_hooks(train_steps: Any = ...): ...
def gan_train(train_ops: Any, logdir: Any, get_hooks_fn: Any = ..., master: str = ..., is_chief: bool = ..., scaffold: Optional[Any] = ..., hooks: Optional[Any] = ..., chief_only_hooks: Optional[Any] = ..., save_checkpoint_secs: int = ..., save_summaries_steps: int = ..., config: Optional[Any] = ...): ...
def get_sequential_train_steps(train_steps: Any = ...): ...
