# Stubs for tensorflow.contrib.cudnn_rnn.python.layers.cudnn_rnn (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.cudnn_rnn.python.ops import cudnn_rnn_ops as cudnn_rnn_ops
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.layers import base as base_layer
from tensorflow.python.ops import array_ops as array_ops, init_ops as init_ops
from typing import Any as Any, Optional as Optional

class _CudnnRNN(base_layer.Layer):
    def __init__(self, num_layers: Any, num_units: Any, input_mode: Any = ..., direction: Any = ..., dropout: float = ..., seed: Optional[Any] = ..., dtype: Any = ..., kernel_initializer: Optional[Any] = ..., bias_initializer: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    @property
    def num_layers(self): ...
    @property
    def num_units(self): ...
    @property
    def input_mode(self): ...
    @property
    def input_size(self): ...
    @property
    def rnn_mode(self): ...
    @property
    def direction(self): ...
    @property
    def num_dirs(self): ...
    @property
    def saveable(self): ...
    @property
    def canonical_weight_shapes(self): ...
    @property
    def canonical_bias_shapes(self): ...
    input_spec: Any = ...
    kernel: Any = ...
    built: bool = ...
    def build(self, input_shape: Any) -> None: ...
    def call(self, inputs: Any, initial_state: Optional[Any] = ..., training: bool = ...): ...
    def state_shape(self, batch_size: Any) -> None: ...

class CudnnLSTM(_CudnnRNN):
    def state_shape(self, batch_size: Any): ...

class _CudnnRNNNoInputC(_CudnnRNN):
    def state_shape(self, batch_size: Any): ...

class CudnnGRU(_CudnnRNNNoInputC): ...
class CudnnRNNTanh(_CudnnRNNNoInputC): ...
class CudnnRNNRelu(_CudnnRNNNoInputC): ...
