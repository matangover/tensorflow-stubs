# Stubs for tensorflow.contrib.layers.python.layers.feature_column (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.contrib import lookup as lookup
from tensorflow.contrib.framework.python.framework import checkpoint_utils as checkpoint_utils, experimental as experimental
from tensorflow.contrib.layers.python.layers import embedding_ops as embedding_ops, layers as layers
from tensorflow.contrib.layers.python.ops import bucketization_op as bucketization_op, sparse_feature_cross_op as sparse_feature_cross_op
from tensorflow.python.feature_column import feature_column as fc_core
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, init_ops as init_ops, math_ops as math_ops, parsing_ops as parsing_ops, resource_variable_ops as resource_variable_ops, sparse_ops as sparse_ops, string_ops as string_ops, variables as variables
from tensorflow.python.util import deprecation as deprecation, nest as nest
from typing import Any as Any, Optional as Optional

InputLayer = fc_core.InputLayer

class _LinearEmbeddingLookupArguments: ...
class _DeepEmbeddingLookupArguments: ...

class _FeatureColumn(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    def name(self) -> Any: ...
    def config(self) -> Any: ...
    def key(self) -> Any: ...
    @abc.abstractmethod
    def insert_transformed_feature(self, columns_to_tensors: Any) -> Any: ...

class _SparseColumn(_FeatureColumn, fc_core._CategoricalColumn, metaclass=abc.ABCMeta):
    def __new__(cls, column_name: Any, is_integerized: bool = ..., bucket_size: Optional[Any] = ..., lookup_config: Optional[Any] = ..., combiner: str = ..., dtype: Any = ...): ...
    @property
    def name(self): ...
    @property
    def length(self): ...
    @property
    def config(self): ...
    @property
    def key(self): ...
    def id_tensor(self, input_tensor: Any): ...
    def weight_tensor(self, input_tensor: Any) -> None: ...
    def is_compatible(self, other_column: Any): ...
    def insert_transformed_feature(self, columns_to_tensors: Any) -> None: ...

class _SparseColumnIntegerized(_SparseColumn): ...

def sparse_column_with_integerized_feature(column_name: Any, bucket_size: Any, combiner: str = ..., dtype: Any = ...): ...

class _SparseColumnHashed(_SparseColumn):
    def __new__(cls, column_name: Any, is_integerized: bool = ..., bucket_size: Optional[Any] = ..., lookup_config: Optional[Any] = ..., combiner: str = ..., dtype: Any = ..., hash_keys: Optional[Any] = ...): ...

def sparse_column_with_hash_bucket(column_name: Any, hash_bucket_size: Any, combiner: str = ..., dtype: Any = ..., hash_keys: Optional[Any] = ...): ...

class _SparseColumnKeys(_SparseColumn): ...

def sparse_column_with_keys(column_name: Any, keys: Any, default_value: int = ..., combiner: str = ..., dtype: Any = ...): ...

class _SparseColumnVocabulary(_SparseColumn): ...

def sparse_column_with_vocabulary_file(column_name: Any, vocabulary_file: Any, num_oov_buckets: int = ..., vocab_size: Optional[Any] = ..., default_value: int = ..., combiner: str = ..., dtype: Any = ...): ...

class _WeightedSparseColumn(_FeatureColumn, fc_core._CategoricalColumn):
    def __new__(cls, sparse_id_column: Any, weight_column_name: Any, dtype: Any): ...
    @property
    def name(self): ...
    @property
    def length(self): ...
    @property
    def config(self): ...
    @property
    def lookup_config(self): ...
    @property
    def key(self): ...
    def id_tensor(self, input_tensor: Any): ...
    def weight_tensor(self, input_tensor: Any): ...
    def insert_transformed_feature(self, columns_to_tensors: Any) -> None: ...
    def is_compatible(self, other_column: Any): ...

def weighted_sparse_column(sparse_id_column: Any, weight_column_name: Any, dtype: Any = ...): ...

class _OneHotColumn(_FeatureColumn, fc_core._DenseColumn):
    @property
    def name(self): ...
    @property
    def length(self): ...
    @property
    def config(self): ...
    @property
    def key(self): ...
    def insert_transformed_feature(self, columns_to_tensors: Any) -> None: ...

class _EmbeddingColumn(_FeatureColumn, fc_core._DenseColumn):
    def __new__(cls, sparse_id_column: Any, dimension: Any, combiner: str = ..., initializer: Optional[Any] = ..., ckpt_to_load_from: Optional[Any] = ..., tensor_name_in_ckpt: Optional[Any] = ..., shared_embedding_name: Optional[Any] = ..., shared_vocab_size: Optional[Any] = ..., max_norm: Optional[Any] = ..., trainable: bool = ...): ...
    @property
    def name(self): ...
    @property
    def length(self): ...
    @property
    def config(self): ...
    @property
    def key(self): ...
    def insert_transformed_feature(self, columns_to_tensors: Any) -> None: ...

def one_hot_column(sparse_id_column: Any): ...
def embedding_column(sparse_id_column: Any, dimension: Any, combiner: str = ..., initializer: Optional[Any] = ..., ckpt_to_load_from: Optional[Any] = ..., tensor_name_in_ckpt: Optional[Any] = ..., max_norm: Optional[Any] = ..., trainable: bool = ...): ...
def shared_embedding_columns(sparse_id_columns: Any, dimension: Any, combiner: str = ..., shared_embedding_name: Optional[Any] = ..., initializer: Optional[Any] = ..., ckpt_to_load_from: Optional[Any] = ..., tensor_name_in_ckpt: Optional[Any] = ..., max_norm: Optional[Any] = ..., trainable: bool = ...): ...

class _ScatteredEmbeddingColumn(_FeatureColumn, fc_core._DenseColumn):
    def __new__(cls, column_name: Any, size: Any, dimension: Any, hash_key: Any, combiner: str = ..., initializer: Optional[Any] = ...): ...
    @property
    def name(self): ...
    @property
    def config(self): ...
    @property
    def key(self): ...
    def insert_transformed_feature(self, columns_to_tensors: Any) -> None: ...

def scattered_embedding_column(column_name: Any, size: Any, dimension: Any, hash_key: Any, combiner: str = ..., initializer: Optional[Any] = ...): ...

class _RealValuedVarLenColumn(_FeatureColumn):
    @property
    def name(self): ...
    @property
    def config(self): ...
    @property
    def key(self): ...
    @property
    def normalizer_fn(self): ...
    def insert_transformed_feature(self, columns_to_tensors: Any) -> None: ...

class _RealValuedColumn(_FeatureColumn, fc_core._DenseColumn):
    def __new__(cls, column_name: Any, dimension: Any, default_value: Any, dtype: Any, normalizer: Any): ...
    @property
    def name(self): ...
    @property
    def config(self): ...
    @property
    def key(self): ...
    @property
    def normalizer_fn(self): ...
    def insert_transformed_feature(self, columns_to_tensors: Any) -> None: ...

def real_valued_column(column_name: Any, dimension: int = ..., default_value: Optional[Any] = ..., dtype: Any = ..., normalizer: Optional[Any] = ...): ...

class _BucketizedColumn(_FeatureColumn, fc_core._CategoricalColumn, fc_core._DenseColumn):
    def __new__(cls, source_column: Any, boundaries: Any): ...
    @property
    def name(self): ...
    @property
    def length(self): ...
    @property
    def config(self): ...
    @property
    def key(self): ...
    def to_sparse_tensor(self, input_tensor: Any): ...
    def insert_transformed_feature(self, columns_to_tensors: Any) -> None: ...

def bucketized_column(source_column: Any, boundaries: Any): ...

class _CrossedColumn(_FeatureColumn, fc_core._CategoricalColumn):
    def __new__(cls, columns: Any, hash_bucket_size: Any, hash_key: Any, combiner: str = ..., ckpt_to_load_from: Optional[Any] = ..., tensor_name_in_ckpt: Optional[Any] = ...): ...
    @property
    def name(self): ...
    @property
    def config(self): ...
    @property
    def length(self): ...
    @property
    def key(self): ...
    def id_tensor(self, input_tensor: Any): ...
    def weight_tensor(self, input_tensor: Any) -> None: ...
    def insert_transformed_feature(self, columns_to_tensors: Any) -> None: ...

class _LazyBuilderByColumnsToTensor:
    def __init__(self, columns_to_tensors: Any) -> None: ...
    def get(self, key: Any): ...

def crossed_column(columns: Any, hash_bucket_size: Any, combiner: str = ..., ckpt_to_load_from: Optional[Any] = ..., tensor_name_in_ckpt: Optional[Any] = ..., hash_key: Optional[Any] = ...): ...

class DataFrameColumn(_FeatureColumn):
    def __new__(cls, column_name: Any, series: Any): ...
    @property
    def name(self): ...
    @property
    def config(self): ...
    @property
    def key(self): ...
    def insert_transformed_feature(self, columns_to_tensors: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...

def create_feature_spec_for_parsing(feature_columns: Any): ...
def make_place_holder_tensors_for_base_features(feature_columns: Any): ...

class _SparseIdLookupConfig:
    def __new__(cls, vocabulary_file: Optional[Any] = ..., keys: Optional[Any] = ..., num_oov_buckets: int = ..., vocab_size: Optional[Any] = ..., default_value: int = ...): ...
