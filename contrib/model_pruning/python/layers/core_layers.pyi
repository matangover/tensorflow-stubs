# Stubs for tensorflow.contrib.model_pruning.python.layers.core_layers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.framework import ops as ops, tensor_shape as tensor_shape
from tensorflow.python.layers import base as base, utils as utils
from tensorflow.python.ops import array_ops as array_ops, init_ops as init_ops, math_ops as math_ops, nn as nn, standard_ops as standard_ops
from typing import Any as Any, Optional as Optional

MASK_COLLECTION: str
THRESHOLD_COLLECTION: str
MASKED_WEIGHT_COLLECTION: str
WEIGHT_COLLECTION: str
MASKED_WEIGHT_NAME: str

class _MaskedConv(base.Layer):
    rank: Any = ...
    filters: Any = ...
    kernel_size: Any = ...
    strides: Any = ...
    padding: Any = ...
    data_format: Any = ...
    dilation_rate: Any = ...
    activation: Any = ...
    use_bias: Any = ...
    kernel_initializer: Any = ...
    bias_initializer: Any = ...
    kernel_regularizer: Any = ...
    bias_regularizer: Any = ...
    input_spec: Any = ...
    def __init__(self, rank: Any, filters: Any, kernel_size: Any, strides: int = ..., padding: str = ..., data_format: str = ..., dilation_rate: int = ..., activation: Optional[Any] = ..., use_bias: bool = ..., kernel_initializer: Optional[Any] = ..., bias_initializer: Any = ..., kernel_regularizer: Optional[Any] = ..., bias_regularizer: Optional[Any] = ..., activity_regularizer: Optional[Any] = ..., trainable: bool = ..., name: Optional[Any] = ..., **kwargs: Any) -> None: ...
    mask: Any = ...
    kernel: Any = ...
    threshold: Any = ...
    masked_kernel: Any = ...
    bias: Any = ...
    built: bool = ...
    def build(self, input_shape: Any) -> None: ...
    def call(self, inputs: Any): ...
    def compute_output_shape(self, input_shape: Any): ...

class MaskedConv2D(_MaskedConv):
    def __init__(self, filters: Any, kernel_size: Any, strides: Any = ..., padding: str = ..., data_format: str = ..., dilation_rate: Any = ..., activation: Optional[Any] = ..., use_bias: bool = ..., kernel_initializer: Optional[Any] = ..., bias_initializer: Any = ..., kernel_regularizer: Optional[Any] = ..., bias_regularizer: Optional[Any] = ..., activity_regularizer: Optional[Any] = ..., trainable: bool = ..., name: Optional[Any] = ..., **kwargs: Any) -> None: ...

class MaskedFullyConnected(base.Layer):
    units: Any = ...
    activation: Any = ...
    use_bias: Any = ...
    kernel_initializer: Any = ...
    bias_initializer: Any = ...
    kernel_regularizer: Any = ...
    bias_regularizer: Any = ...
    input_spec: Any = ...
    def __init__(self, units: Any, activation: Optional[Any] = ..., use_bias: bool = ..., kernel_initializer: Optional[Any] = ..., bias_initializer: Any = ..., kernel_regularizer: Optional[Any] = ..., bias_regularizer: Optional[Any] = ..., activity_regularizer: Optional[Any] = ..., trainable: bool = ..., name: Optional[Any] = ..., **kwargs: Any) -> None: ...
    kernel: Any = ...
    mask: Any = ...
    threshold: Any = ...
    masked_kernel: Any = ...
    bias: Any = ...
    built: bool = ...
    def build(self, input_shape: Any) -> None: ...
    def call(self, inputs: Any): ...
    def compute_output_shape(self, input_shape: Any): ...
