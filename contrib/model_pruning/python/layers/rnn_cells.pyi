# Stubs for tensorflow.contrib.model_pruning.python.layers.rnn_cells (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.model_pruning.python.layers import core_layers as core_layers
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, clip_ops as clip_ops, init_ops as init_ops, math_ops as math_ops, nn_ops as nn_ops, rnn_cell as tf_rnn
from typing import Any as Any, Optional as Optional

class MaskedBasicLSTMCell(tf_rnn.BasicLSTMCell):
    def __init__(self, num_units: Any, forget_bias: float = ..., state_is_tuple: bool = ..., activation: Optional[Any] = ..., reuse: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    built: bool = ...
    def build(self, inputs_shape: Any) -> None: ...
    def call(self, inputs: Any, state: Any): ...

class MaskedLSTMCell(tf_rnn.LSTMCell):
    def __init__(self, num_units: Any, use_peepholes: bool = ..., cell_clip: Optional[Any] = ..., initializer: Optional[Any] = ..., num_proj: Optional[Any] = ..., proj_clip: Optional[Any] = ..., num_unit_shards: Optional[Any] = ..., num_proj_shards: Optional[Any] = ..., forget_bias: float = ..., state_is_tuple: bool = ..., activation: Optional[Any] = ..., reuse: Optional[Any] = ...) -> None: ...
    built: bool = ...
    def build(self, inputs_shape: Any) -> None: ...
    def call(self, inputs: Any, state: Any): ...
