# Stubs for tensorflow.contrib.eager.python.network (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.eager import context as context
from tensorflow.python.framework import ops as ops
from tensorflow.python.layers import base as base
from tensorflow.python.ops import variable_scope as variable_scope
from tensorflow.python.training import checkpoint_utils as checkpoint_utils, training_util as training_util
from tensorflow.python.util import deprecation as deprecation, function_utils as function_utils
from typing import Any as Any, Optional as Optional

class Network(base.Layer):
    def __init__(self, name: Optional[Any] = ...) -> None: ...
    def name(self): ...
    def track_layer(self, layer: Any): ...
    def get_layer(self, name: Optional[Any] = ..., index: Optional[Any] = ...): ...
    @property
    def weights(self): ...
    @property
    def trainable_weights(self): ...
    @property
    def non_trainable_weights(self): ...
    @property
    def trainable(self): ...
    @trainable.setter
    def trainable(self, value: Any) -> None: ...
    @property
    def layers(self): ...
    def add_variable(self, name: Any, shape: Any, dtype: Optional[Any] = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., trainable: bool = ..., constraint: Optional[Any] = ...) -> None: ...
    def add_loss(self, losses: Any, inputs: Optional[Any] = ...) -> None: ...
    @property
    def losses(self): ...

class Sequential(Network):
    def __init__(self, layers_funcs: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    def add(self, layer_func: Any) -> None: ...
    def call(self, inputs: Any, training: Optional[Any] = ...): ...

_DeferredRestoration = namedtuple('_DeferredRestoration', ['map_func', 'map_func_is_user', 'checkpointed_variables_to_restore', 'restored_variables', 'session', 'network_name', 'network_scope_name'])

def save_network_checkpoint(network: Any, save_path: Any, global_step: Optional[Any] = ..., map_func: Optional[Any] = ...): ...
def restore_network_checkpoint(network: Any, save_path: Any, map_func: Optional[Any] = ...) -> None: ...
