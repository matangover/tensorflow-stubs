# Stubs for tensorflow.contrib.eager.python.examples.revnet.blocks (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import tensorflow as tf
from tensorflow.contrib.eager.python.examples.revnet import ops as ops
from typing import Any as Any

class RevBlock(tf.keras.Model):
    blocks: Any = ...
    def __init__(self, n_res: Any, filters: Any, strides: Any, input_shape: Any, batch_norm_first: bool = ..., data_format: str = ..., bottleneck: bool = ..., fused: bool = ..., dtype: Any = ...) -> None: ...
    def call(self, h: Any, training: bool = ...): ...
    def backward_grads(self, x: Any, y: Any, dy: Any, training: bool = ...): ...

class _Residual(tf.keras.Model):
    filters: Any = ...
    strides: Any = ...
    axis: Any = ...
    f: Any = ...
    g: Any = ...
    def __init__(self, filters: Any, strides: Any, input_shape: Any, batch_norm_first: bool = ..., data_format: str = ..., bottleneck: bool = ..., fused: bool = ..., dtype: Any = ...) -> None: ...
    def call(self, x: Any, training: bool = ...): ...
    def backward_grads(self, y: Any, dy: Any, training: bool = ...): ...
    def backward_grads_with_downsample(self, x: Any, y: Any, dy: Any, training: bool = ...): ...

class _BottleneckResidualInner(tf.keras.Model):
    batch_norm_0: Any = ...
    conv2d_1: Any = ...
    batch_norm_1: Any = ...
    conv2d_2: Any = ...
    batch_norm_2: Any = ...
    conv2d_3: Any = ...
    batch_norm_first: Any = ...
    def __init__(self, filters: Any, strides: Any, input_shape: Any, batch_norm_first: bool = ..., data_format: str = ..., fused: bool = ..., dtype: Any = ...) -> None: ...
    def call(self, x: Any, training: bool = ...): ...

class _ResidualInner(tf.keras.Model):
    batch_norm_0: Any = ...
    conv2d_1: Any = ...
    batch_norm_1: Any = ...
    conv2d_2: Any = ...
    batch_norm_first: Any = ...
    def __init__(self, filters: Any, strides: Any, input_shape: Any, batch_norm_first: bool = ..., data_format: str = ..., fused: bool = ..., dtype: Any = ...) -> None: ...
    def call(self, x: Any, training: bool = ...): ...

class InitBlock(tf.keras.Model):
    config: Any = ...
    axis: Any = ...
    conv2d: Any = ...
    batch_norm: Any = ...
    activation: Any = ...
    max_pool: Any = ...
    def __init__(self, config: Any) -> None: ...
    def call(self, x: Any, training: bool = ...): ...

class FinalBlock(tf.keras.Model):
    config: Any = ...
    axis: Any = ...
    batch_norm: Any = ...
    activation: Any = ...
    global_avg_pool: Any = ...
    dense: Any = ...
    def __init__(self, config: Any) -> None: ...
    def call(self, x: Any, training: bool = ...): ...
