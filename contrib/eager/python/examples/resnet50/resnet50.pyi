# Stubs for tensorflow.contrib.eager.python.examples.resnet50.resnet50 (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import tensorflow as tf
from typing import Any as Any, Optional as Optional

layers: Any

class _IdentityBlock(tf.keras.Model):
    conv2a: Any = ...
    bn2a: Any = ...
    conv2b: Any = ...
    bn2b: Any = ...
    conv2c: Any = ...
    bn2c: Any = ...
    def __init__(self, kernel_size: Any, filters: Any, stage: Any, block: Any, data_format: Any) -> None: ...
    def call(self, input_tensor: Any, training: bool = ...): ...

class _ConvBlock(tf.keras.Model):
    conv2a: Any = ...
    bn2a: Any = ...
    conv2b: Any = ...
    bn2b: Any = ...
    conv2c: Any = ...
    bn2c: Any = ...
    conv_shortcut: Any = ...
    bn_shortcut: Any = ...
    def __init__(self, kernel_size: Any, filters: Any, stage: Any, block: Any, data_format: Any, strides: Any = ...) -> None: ...
    def call(self, input_tensor: Any, training: bool = ...): ...

class ResNet50(tf.keras.Model):
    include_top: Any = ...
    conv1: Any = ...
    bn_conv1: Any = ...
    max_pool: Any = ...
    l2a: Any = ...
    l2b: Any = ...
    l2c: Any = ...
    l3a: Any = ...
    l3b: Any = ...
    l3c: Any = ...
    l3d: Any = ...
    l4a: Any = ...
    l4b: Any = ...
    l4c: Any = ...
    l4d: Any = ...
    l4e: Any = ...
    l4f: Any = ...
    l5a: Any = ...
    l5b: Any = ...
    l5c: Any = ...
    avg_pool: Any = ...
    flatten: Any = ...
    fc1000: Any = ...
    global_pooling: Any = ...
    def __init__(self, data_format: Any, name: str = ..., trainable: bool = ..., include_top: bool = ..., pooling: Optional[Any] = ..., classes: int = ...) -> None: ...
    def call(self, inputs: Any, training: bool = ...): ...
