# Stubs for tensorflow.contrib.timeseries.python.timeseries.model (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from collections import namedtuple as namedtuple
from tensorflow.contrib.timeseries.python.timeseries import math_utils as math_utils
from tensorflow.contrib.timeseries.python.timeseries.feature_keys import PredictionFeatures as PredictionFeatures, TrainEvalFeatures as TrainEvalFeatures
from tensorflow.python.feature_column import feature_column as feature_column
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, math_ops as math_ops, parsing_ops as parsing_ops, tensor_array_ops as tensor_array_ops, variable_scope as variable_scope
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

ModelOutputs = namedtuple('ModelOutputs', ['loss', 'end_state', 'predictions', 'prediction_times'])

class TimeSeriesModel(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    num_features: Any = ...
    dtype: Any = ...
    def __init__(self, num_features: Any, exogenous_feature_columns: Optional[Any] = ..., dtype: Any = ...) -> None: ...
    @property
    def exogenous_feature_columns(self): ...
    def generate(self, number_of_series: Any, series_length: Any, model_parameters: Optional[Any] = ..., seed: Optional[Any] = ...) -> None: ...
    def initialize_graph(self, input_statistics: Optional[Any] = ...) -> None: ...
    def define_loss(self, features: Any, mode: Any): ...
    @abc.abstractmethod
    def get_start_state(self) -> Any: ...
    @abc.abstractmethod
    def get_batch_loss(self, features: Any, mode: Any, state: Any) -> Any: ...
    @abc.abstractmethod
    def predict(self, features: Any) -> Any: ...

class SequentialTimeSeriesModel(TimeSeriesModel, metaclass=abc.ABCMeta):
    def __init__(self, train_output_names: Any, predict_output_names: Any, num_features: Any, normalize_features: bool = ..., dtype: Any = ..., exogenous_feature_columns: Optional[Any] = ..., exogenous_update_condition: Optional[Any] = ..., static_unrolling_window_size_threshold: Optional[Any] = ...) -> None: ...
    def get_batch_loss(self, features: Any, mode: Any, state: Any): ...
    def per_step_batch_loss(self, features: Any, mode: Any, state: Any): ...
    def predict(self, features: Any): ...
    class _FakeTensorArray:
        values: Any = ...
        def __init__(self) -> None: ...
        def write(self, unused_position: Any, value: Any): ...
