# Stubs for tensorflow.contrib.timeseries.python.timeseries.head (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.contrib.timeseries.python.timeseries import feature_keys as feature_keys
from tensorflow.python.estimator import estimator_lib as estimator_lib
from tensorflow.python.estimator.canned import head as head_lib, metric_keys as metric_keys
from tensorflow.python.estimator.export import export_lib as export_lib
from tensorflow.python.framework import dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, math_ops as math_ops, metrics_impl as metrics_impl, state_ops as state_ops, variable_scope as variable_scope
from tensorflow.python.summary import summary as summary
from tensorflow.python.training import training_util as training_util
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

class _NoStatePredictOutput(export_lib.PredictOutput):
    def as_signature_def(self, receiver_tensors: Any): ...

class TimeSeriesRegressionHead(head_lib._Head):
    model: Any = ...
    state_manager: Any = ...
    optimizer: Any = ...
    input_statistics_generator: Any = ...
    def __init__(self, model: Any, state_manager: Any, optimizer: Any, input_statistics_generator: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    @property
    def name(self): ...
    def create_loss(self, features: Any, mode: Any, logits: Optional[Any] = ..., labels: Optional[Any] = ...): ...
    @property
    def logits_dimension(self): ...
    def create_estimator_spec(self, features: Any, mode: Any, labels: Optional[Any] = ...): ...

class OneShotPredictionHead(TimeSeriesRegressionHead): ...

def state_to_dictionary(state_tuple: Any): ...
