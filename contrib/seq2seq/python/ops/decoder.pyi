# Stubs for tensorflow.contrib.seq2seq.python.ops.decoder (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.python.eager import context as context
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, control_flow_util as control_flow_util, math_ops as math_ops, rnn as rnn, rnn_cell_impl as rnn_cell_impl, tensor_array_ops as tensor_array_ops, variable_scope as variable_scope
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

class Decoder(metaclass=abc.ABCMeta):
    @property
    def batch_size(self) -> None: ...
    @property
    def output_size(self) -> None: ...
    @property
    def output_dtype(self) -> None: ...
    @abc.abstractmethod
    def initialize(self, name: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def step(self, time: Any, inputs: Any, state: Any, name: Optional[Any] = ...) -> Any: ...
    def finalize(self, outputs: Any, final_state: Any, sequence_lengths: Any) -> None: ...
    @property
    def tracks_own_finished(self): ...

def dynamic_decode(decoder: Any, output_time_major: bool = ..., impute_finished: bool = ..., maximum_iterations: Optional[Any] = ..., parallel_iterations: int = ..., swap_memory: bool = ..., scope: Optional[Any] = ...): ...
