# Stubs for tensorflow.python.data.ops.dataset_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.python.compat import compat as compat
from tensorflow.python.data.ops import iterator_ops as iterator_ops
from tensorflow.python.data.util import nest as nest, random_seed as random_seed, sparse as sparse
from tensorflow.python.eager import context as context
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, function as function, ops as ops, smart_cond as smart_cond, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, gen_dataset_ops as gen_dataset_ops, gen_io_ops as gen_io_ops, math_ops as math_ops, script_ops as script_ops, string_ops as string_ops
from tensorflow.python.util import deprecation as deprecation
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

class Dataset(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    def __init__(self) -> None: ...
    def options(self): ...
    def make_initializable_iterator(self, shared_name: Optional[Any] = ...): ...
    def __iter__(self): ...
    def make_one_shot_iterator(self): ...
    def output_classes(self) -> Any: ...
    def output_shapes(self) -> Any: ...
    def output_types(self) -> Any: ...
    @staticmethod
    def from_tensors(tensors: Any): ...
    @staticmethod
    def from_tensor_slices(tensors: Any): ...
    @staticmethod
    def from_sparse_tensor_slices(sparse_tensor: Any): ...
    class _GeneratorState:
        def __init__(self, generator: Any) -> None: ...
        def get_next_id(self, *args: Any): ...
        def get_iterator(self, iterator_id: Any): ...
        def iterator_completed(self, iterator_id: Any) -> None: ...
    @staticmethod
    def from_generator(generator: Any, output_types: Any, output_shapes: Optional[Any] = ..., args: Optional[Any] = ...): ...
    @staticmethod
    def range(*args: Any): ...
    @staticmethod
    def zip(datasets: Any): ...
    def concatenate(self, dataset: Any): ...
    def prefetch(self, buffer_size: Any): ...
    @staticmethod
    def list_files(file_pattern: Any, shuffle: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    def repeat(self, count: Optional[Any] = ...): ...
    def shuffle(self, buffer_size: Any, seed: Optional[Any] = ..., reshuffle_each_iteration: Optional[Any] = ...): ...
    def cache(self, filename: str = ...): ...
    def take(self, count: Any): ...
    def skip(self, count: Any): ...
    def shard(self, num_shards: Any, index: Any): ...
    def batch(self, batch_size: Any, drop_remainder: bool = ...): ...
    def padded_batch(self, batch_size: Any, padded_shapes: Any, padding_values: Optional[Any] = ..., drop_remainder: bool = ...): ...
    def map(self, map_func: Any, num_parallel_calls: Optional[Any] = ...): ...
    def flat_map(self, map_func: Any): ...
    def interleave(self, map_func: Any, cycle_length: Any, block_length: int = ..., num_parallel_calls: Optional[Any] = ...): ...
    def filter(self, predicate: Any): ...
    def apply(self, transformation_func: Any): ...
    def window(self, size: Any, shift: Optional[Any] = ..., stride: int = ..., drop_remainder: bool = ...): ...
    def reduce(self, initial_state: Any, reduce_func: Any): ...
    def with_options(self, options: Any): ...

class Options:
    def __init__(self) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def merge(self, options: Any): ...

class DatasetSource(Dataset, metaclass=abc.ABCMeta): ...

class UnaryDataset(Dataset, metaclass=abc.ABCMeta):
    def __init__(self, input_dataset: Any) -> None: ...

class TensorDataset(DatasetSource):
    def __init__(self, tensors: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class TensorSliceDataset(DatasetSource):
    def __init__(self, tensors: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class SparseTensorSliceDataset(DatasetSource):
    def __init__(self, sparse_tensor: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class _NestedDatasetComponent:
    def __init__(self, dataset: Optional[Any] = ..., output_shapes: Optional[Any] = ..., output_types: Optional[Any] = ..., output_classes: Optional[Any] = ...) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class _VariantDataset(Dataset):
    def __init__(self, dataset_variant: Any, structure: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class StructuredFunctionWrapper:
    def __init__(self, func: Any, transformation_name: Any, dataset: Optional[Any] = ..., input_classes: Optional[Any] = ..., input_shapes: Optional[Any] = ..., input_types: Optional[Any] = ..., add_to_graph: bool = ..., experimental_nested_dataset_support: bool = ...) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...
    @property
    def function(self): ...

def flat_structure(dataset: Any): ...

class _GeneratorDataset(DatasetSource):
    def __init__(self, init_args: Any, init_func: Any, next_func: Any, finalize_func: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class ZipDataset(Dataset):
    def __init__(self, datasets: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class ConcatenateDataset(Dataset):
    def __init__(self, input_dataset: Any, dataset_to_concatenate: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class RepeatDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, count: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class RangeDataset(DatasetSource):
    def __init__(self, *args: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class CacheDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, filename: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class ShuffleDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, buffer_size: Any, seed: Optional[Any] = ..., reshuffle_each_iteration: Optional[Any] = ...) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class TakeDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, count: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class SkipDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, count: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class BatchDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, batch_size: Any, drop_remainder: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class PaddedBatchDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, drop_remainder: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class MapDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, map_func: Any, use_inter_op_parallelism: bool = ...) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class ParallelMapDataset(MapDataset):
    def __init__(self, input_dataset: Any, map_func: Any, num_parallel_calls: Any, use_inter_op_parallelism: bool = ...) -> None: ...

class FlatMapDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, map_func: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class InterleaveDataset(FlatMapDataset):
    def __init__(self, input_dataset: Any, map_func: Any, cycle_length: Any, block_length: Any) -> None: ...

class ParallelInterleaveDataset(FlatMapDataset):
    def __init__(self, input_dataset: Any, map_func: Any, cycle_length: Any, block_length: Any, num_parallel_calls: Any) -> None: ...

class FilterDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, predicate: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class PrefetchDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, buffer_size: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class WindowDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, size: Any, shift: Any, stride: Any, drop_remainder: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class _OptionsDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, options: Any) -> None: ...
    def options(self): ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class _ModelDataset(UnaryDataset):
    def __init__(self, input_dataset: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...

class _OptimizeDataset(UnaryDataset):
    def __init__(self, input_dataset: Any, optimizations: Any) -> None: ...
    @property
    def output_classes(self): ...
    @property
    def output_shapes(self): ...
    @property
    def output_types(self): ...
