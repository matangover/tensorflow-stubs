# Stubs for tensorflow.python.training.saver (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.core.protobuf import checkpointable_object_graph_pb2 as checkpointable_object_graph_pb2, meta_graph_pb2 as meta_graph_pb2, saver_pb2 as saver_pb2
from tensorflow.python import pywrap_tensorflow as pywrap_tensorflow
from tensorflow.python.client import session as session
from tensorflow.python.eager import context as context
from tensorflow.python.framework import constant_op as constant_op, errors as errors, meta_graph as meta_graph, ops as ops
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, gen_io_ops as gen_io_ops, io_ops as io_ops, resource_variable_ops as resource_variable_ops, state_ops as state_ops, string_ops as string_ops, variables as variables
from tensorflow.python.platform import gfile as gfile
from tensorflow.python.training import checkpoint_management as checkpoint_management, saveable_object as saveable_object, training_util as training_util
from tensorflow.python.util import compat as compat
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

get_checkpoint_state = checkpoint_management.get_checkpoint_state
update_checkpoint_state = checkpoint_management.update_checkpoint_state
generate_checkpoint_state_proto = checkpoint_management.generate_checkpoint_state_proto
latest_checkpoint = checkpoint_management.latest_checkpoint
checkpoint_exists = checkpoint_management.checkpoint_exists
get_checkpoint_mtimes = checkpoint_management.get_checkpoint_mtimes
remove_checkpoint = checkpoint_management.remove_checkpoint

class BaseSaverBuilder:
    SaveSpec: Any = ...
    SaveableObject: Any = ...
    class VariableSaveable(SaveableObject):
        def __init__(self, var: Any, slice_spec: Any, name: Any) -> None: ...
        def restore(self, restored_tensors: Any, restored_shapes: Any): ...
    class ResourceVariableSaveable(SaveableObject):
        handle_op: Any = ...
        def __init__(self, var: Any, slice_spec: Any, name: Any) -> None: ...
        def restore(self, restored_tensors: Any, restored_shapes: Any): ...
    def __init__(self, write_version: Any = ...) -> None: ...
    def save_op(self, filename_tensor: Any, saveables: Any): ...
    def bulk_restore(self, filename_tensor: Any, saveables: Any, preferred_shard: Any, restore_sequentially: Any): ...
    def restore_op(self, filename_tensor: Any, saveable: Any, preferred_shard: Any): ...
    def sharded_filename(self, filename_tensor: Any, shard: Any, num_shards: Any): ...
    @staticmethod
    def OpListToDict(op_list: Any, convert_variable_to_tensor: bool = ...): ...
    @staticmethod
    def SaveableObjectsForOp(op: Any, name: Any) -> None: ...
    def build(self, names_to_saveables: Any, reshape: bool = ..., sharded: bool = ..., max_to_keep: int = ..., keep_checkpoint_every_n_hours: float = ..., name: Optional[Any] = ..., restore_sequentially: bool = ..., filename: str = ...): ...

class BulkSaverBuilder(BaseSaverBuilder):
    def bulk_restore(self, filename_tensor: Any, saveables: Any, preferred_shard: Any, restore_sequentially: Any): ...

class Saver:
    saver_def: Any = ...
    def __init__(self, var_list: Optional[Any] = ..., reshape: bool = ..., sharded: bool = ..., max_to_keep: int = ..., keep_checkpoint_every_n_hours: float = ..., name: Optional[Any] = ..., restore_sequentially: bool = ..., saver_def: Optional[Any] = ..., builder: Optional[Any] = ..., defer_build: bool = ..., allow_empty: bool = ..., write_version: Any = ..., pad_step_number: bool = ..., save_relative_paths: bool = ..., filename: Optional[Any] = ...) -> None: ...
    def build(self) -> None: ...
    def as_saver_def(self): ...
    def to_proto(self, export_scope: Optional[Any] = ...): ...
    @staticmethod
    def from_proto(saver_def: Any, import_scope: Optional[Any] = ...): ...
    @property
    def last_checkpoints(self): ...
    def set_last_checkpoints(self, last_checkpoints: Any) -> None: ...
    def set_last_checkpoints_with_time(self, last_checkpoints_with_time: Any) -> None: ...
    def recover_last_checkpoints(self, checkpoint_paths: Any) -> None: ...
    def save(self, sess: Any, save_path: Any, global_step: Optional[Any] = ..., latest_filename: Optional[Any] = ..., meta_graph_suffix: str = ..., write_meta_graph: bool = ..., write_state: bool = ..., strip_default_attrs: bool = ...): ...
    def export_meta_graph(self, filename: Optional[Any] = ..., collection_list: Optional[Any] = ..., as_text: bool = ..., export_scope: Optional[Any] = ..., clear_devices: bool = ..., clear_extraneous_savers: bool = ..., strip_default_attrs: bool = ...): ...
    def restore(self, sess: Any, save_path: Any) -> None: ...

def import_meta_graph(meta_graph_or_file: Any, clear_devices: bool = ..., import_scope: Optional[Any] = ..., **kwargs: Any): ...
def export_meta_graph(filename: Optional[Any] = ..., meta_info_def: Optional[Any] = ..., graph_def: Optional[Any] = ..., saver_def: Optional[Any] = ..., collection_list: Optional[Any] = ..., as_text: bool = ..., graph: Optional[Any] = ..., export_scope: Optional[Any] = ..., clear_devices: bool = ..., clear_extraneous_savers: bool = ..., strip_default_attrs: bool = ..., **kwargs: Any): ...
def object_graph_key_mapping(checkpoint_path: Any): ...
def saver_from_object_based_checkpoint(checkpoint_path: Any, var_list: Optional[Any] = ..., builder: Optional[Any] = ..., names_to_keys: Optional[Any] = ..., cached_saver: Optional[Any] = ...): ...
