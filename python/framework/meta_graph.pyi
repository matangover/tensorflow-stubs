# Stubs for tensorflow.python.framework.meta_graph (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from google.protobuf.any_pb2 import Any as Any
from tensorflow.core.framework import attr_value_pb2 as attr_value_pb2, graph_pb2 as graph_pb2, op_def_pb2 as op_def_pb2
from tensorflow.core.protobuf import meta_graph_pb2 as meta_graph_pb2, saver_pb2 as saver_pb2
from tensorflow.python import pywrap_tensorflow as pywrap_tensorflow
from tensorflow.python.eager import context as context
from tensorflow.python.framework import graph_io as graph_io, importer as importer, op_def_registry as op_def_registry, ops as ops, versions as versions
from tensorflow.python.lib.io import file_io as file_io
from tensorflow.python.util import compat as compat
from typing import Optional as Optional

def ops_used_by_graph_def(graph_def: Any): ...
def stripped_op_list_for_graph(graph_def: Any): ...

SAVE_AND_RESTORE_OPS: Any

def add_collection_def(meta_graph_def: Any, key: Any, graph: Optional[Any] = ..., export_scope: Optional[Any] = ..., exclude_nodes: Optional[Any] = ..., override_contents: Optional[Any] = ...) -> None: ...
def create_meta_graph_def(meta_info_def: Optional[Any] = ..., graph_def: Optional[Any] = ..., saver_def: Optional[Any] = ..., collection_list: Optional[Any] = ..., graph: Optional[Any] = ..., export_scope: Optional[Any] = ..., exclude_nodes: Optional[Any] = ..., clear_extraneous_savers: bool = ..., strip_default_attrs: bool = ...): ...
def read_meta_graph_file(filename: Any): ...
def import_scoped_meta_graph(meta_graph_or_file: Any, clear_devices: bool = ..., graph: Optional[Any] = ..., import_scope: Optional[Any] = ..., input_map: Optional[Any] = ..., unbound_inputs_col_name: str = ..., restore_collections_predicate: Any = ...): ...
def import_scoped_meta_graph_with_return_elements(meta_graph_or_file: Any, clear_devices: bool = ..., graph: Optional[Any] = ..., import_scope: Optional[Any] = ..., input_map: Optional[Any] = ..., unbound_inputs_col_name: str = ..., restore_collections_predicate: Any = ..., return_elements: Optional[Any] = ...): ...
def export_scoped_meta_graph(filename: Optional[Any] = ..., graph_def: Optional[Any] = ..., graph: Optional[Any] = ..., export_scope: Optional[Any] = ..., as_text: bool = ..., unbound_inputs_col_name: str = ..., clear_devices: bool = ..., saver_def: Optional[Any] = ..., clear_extraneous_savers: bool = ..., strip_default_attrs: bool = ..., **kwargs: Any): ...
def copy_scoped_meta_graph(from_scope: Any, to_scope: Any, from_graph: Optional[Any] = ..., to_graph: Optional[Any] = ...): ...
