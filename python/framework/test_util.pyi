# Stubs for tensorflow.python.framework.test_util (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.core.framework import graph_pb2 as graph_pb2
from tensorflow.core.protobuf import config_pb2 as config_pb2, rewriter_config_pb2 as rewriter_config_pb2
from tensorflow.python import pywrap_tensorflow as pywrap_tensorflow
from tensorflow.python.client import device_lib as device_lib, session as session
from tensorflow.python.eager import context as context, tape as tape
from tensorflow.python.framework import dtypes as dtypes, errors as errors, errors_impl as errors_impl, importer as importer, ops as ops, random_seed as random_seed, tensor_shape as tensor_shape, versions as versions
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, variables as variables
from tensorflow.python.platform import googletest as googletest
from tensorflow.python.training import server_lib as server_lib
from tensorflow.python.util import compat as compat, memory as memory, nest as nest, tf_inspect as tf_inspect
from tensorflow.python.util.protobuf import compare as compare
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def gpu_device_name(): ...
def assert_ops_in_graph(expected_ops: Any, graph: Any): ...
def assert_equal_graph_def(actual: Any, expected: Any, checkpoint_v2: bool = ...) -> None: ...
def assert_meta_graph_protos_equal(tester: Any, a: Any, b: Any) -> None: ...
def IsGoogleCudaEnabled(): ...
def CudaSupportsHalfMatMulAndConv(): ...
def IsMklEnabled(): ...
def InstallStackTraceHandler() -> None: ...
def NHWCToNCHW(input_tensor: Any): ...
def NHWCToNCHW_VECT_C(input_shape_or_tensor: Any): ...
def NCHW_VECT_CToNHWC(input_shape_or_tensor: Any): ...
def NCHWToNHWC(input_tensor: Any): ...
def skip_if(condition: Any): ...
def enable_c_shapes(fn: Any): ...
def with_c_shapes(cls): ...
def enable_control_flow_v2(fn: Any): ...
def with_control_flow_v2(cls): ...
def disable_control_flow_v2(unused_msg: Any): ...
def assert_no_new_pyobjects_executing_eagerly(f: Any): ...
def assert_no_new_tensors(f: Any): ...
def assert_no_garbage_created(f: Any): ...
def generate_combinations_with_testcase_name(**kwargs: Any): ...
def run_all_in_graph_and_eager_modes(cls): ...
def run_in_graph_and_eager_modes(func: Optional[Any] = ..., config: Optional[Any] = ..., use_gpu: bool = ..., reset_test: bool = ..., assert_no_eager_garbage: bool = ...): ...
def is_gpu_available(cuda_only: bool = ..., min_cuda_compute_capability: Optional[Any] = ...): ...
def device(use_gpu: Any) -> None: ...

class CapturedWrites:
    capture_location: Any = ...
    def __init__(self, capture_location: Any) -> None: ...
    def contents(self): ...

class ErrorLoggingSession(session.Session):
    def run(self, *args: Any, **kwargs: Any): ...

class TensorFlowTestCase(googletest.TestCase):
    def __init__(self, methodName: str = ...) -> None: ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def get_temp_dir(self): ...
    def captureWritesToStream(self, stream: Any) -> None: ...
    def assertProtoEquals(self, expected_message_maybe_ascii: Any, message: Any, msg: Optional[Any] = ...) -> None: ...
    def assertProtoEqualsVersion(self, expected: Any, actual: Any, producer: Any = ..., min_consumer: Any = ..., msg: Optional[Any] = ...) -> None: ...
    def assertStartsWith(self, actual: Any, expected_start: Any, msg: Optional[Any] = ...) -> None: ...
    def evaluate(self, tensors: Any): ...
    def session(self, graph: Optional[Any] = ..., config: Optional[Any] = ..., use_gpu: bool = ..., force_gpu: bool = ...) -> None: ...
    def cached_session(self, graph: Optional[Any] = ..., config: Optional[Any] = ..., use_gpu: bool = ..., force_gpu: bool = ...) -> None: ...
    def test_session(self, graph: Optional[Any] = ..., config: Optional[Any] = ..., use_gpu: bool = ..., force_gpu: bool = ...) -> None: ...
    class _CheckedThread:
        def __init__(self, testcase: Any, target: Any, args: Optional[Any] = ..., kwargs: Optional[Any] = ...) -> None: ...
        def start(self) -> None: ...
        def join(self) -> None: ...
        def is_alive(self): ...
        def check_termination(self) -> None: ...
    def checkedThread(self, target: Any, args: Optional[Any] = ..., kwargs: Optional[Any] = ...): ...
    def assertNear(self, f1: Any, f2: Any, err: Any, msg: Optional[Any] = ...) -> None: ...
    def assertArrayNear(self, farray1: Any, farray2: Any, err: Any, msg: Optional[Any] = ...) -> None: ...
    def assertNDArrayNear(self, ndarray1: Any, ndarray2: Any, err: Any, msg: Optional[Any] = ...) -> None: ...
    def assertAllClose(self, a: Any, b: Any, rtol: float = ..., atol: float = ..., msg: Optional[Any] = ...) -> None: ...
    def assertAllCloseAccordingToType(self, a: Any, b: Any, rtol: float = ..., atol: float = ..., float_rtol: float = ..., float_atol: float = ..., half_rtol: float = ..., half_atol: float = ..., bfloat16_rtol: float = ..., bfloat16_atol: float = ..., msg: Optional[Any] = ...) -> None: ...
    def assertNotAllClose(self, a: Any, b: Any, **kwargs: Any) -> None: ...
    def assertAllEqual(self, a: Any, b: Any, msg: Optional[Any] = ...) -> None: ...
    def assertAllGreater(self, a: Any, comparison_target: Any) -> None: ...
    def assertAllLess(self, a: Any, comparison_target: Any) -> None: ...
    def assertAllGreaterEqual(self, a: Any, comparison_target: Any) -> None: ...
    def assertAllLessEqual(self, a: Any, comparison_target: Any) -> None: ...
    def assertAllInRange(self, target: Any, lower_bound: Any, upper_bound: Any, open_lower_bound: bool = ..., open_upper_bound: bool = ...) -> None: ...
    def assertAllInSet(self, target: Any, expected_set: Any) -> None: ...
    def assertDTypeEqual(self, target: Any, expected_dtype: Any) -> None: ...
    def assertRaisesWithPredicateMatch(self, exception_type: Any, expected_err_re_or_predicate: Any): ...
    def assertRaisesOpError(self, expected_err_re_or_predicate: Any): ...
    def assertShapeEqual(self, np_array: Any, tf_tensor: Any, msg: Optional[Any] = ...) -> None: ...
    def assertDeviceEqual(self, device1: Any, device2: Any, msg: Optional[Any] = ...) -> None: ...
    assertRaisesRegexp: Any = ...
    assertItemsEqual: Any = ...

def create_local_cluster(num_workers: Any, num_ps: Any, protocol: str = ..., worker_config: Optional[Any] = ..., ps_config: Optional[Any] = ...): ...
def get_node_def_from_graph(node_name: Any, graph_def: Any): ...
def set_producer_version(graph: Any, producer_version: Any) -> None: ...
def dismantle_func_graph(func_graph: Any) -> None: ...
def dismantle_polymorphic_function(func: Any) -> None: ...
