# Stubs for tensorflow.python.framework.tensor_util (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.core.framework import tensor_pb2 as tensor_pb2, tensor_shape_pb2 as tensor_shape_pb2
from tensorflow.python.framework import dtypes as dtypes, fast_tensor_util as fast_tensor_util, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.util import compat as compat
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def ExtractBitsFromFloat16(x: Any): ...
def SlowAppendFloat16ArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def ExtractBitsFromBFloat16(x: Any): ...
def SlowAppendBFloat16ArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def FastAppendBFloat16ArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendFloat32ArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendFloat64ArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendIntArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendInt64ArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendQIntArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendUInt32ArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendUInt64ArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendComplex64ArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendComplex128ArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendObjectArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def SlowAppendBoolArrayToTensorProto(tensor_proto: Any, proto_values: Any) -> None: ...
def GetFromNumpyDTypeDict(dtype_dict: Any, dtype: Any): ...
def GetNumpyAppendFn(dtype: Any): ...
def TensorShapeProtoToList(shape: Any): ...

class _Message:
    def __init__(self, message: Any) -> None: ...

def make_tensor_proto(values: Any, dtype: Optional[Any] = ..., shape: Optional[Any] = ..., verify_shape: bool = ...): ...
def MakeNdarray(tensor: Any): ...
def ShapeEquals(tensor_proto: Any, shape: Any): ...
def constant_value(tensor: Any, partial: bool = ...): ...
def constant_value_as_shape(tensor: Any): ...
def is_tensor(x: Any): ...
