# Stubs for tensorflow.python.framework.test_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def a(name: Optional[Any] = ...): ...
def a_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr(a: Any, name: Optional[Any] = ...): ...
def attr_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_bool(a: Any, name: Optional[Any] = ...): ...
def attr_bool_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_bool_list(a: Any, name: Optional[Any] = ...): ...
def attr_bool_list_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_default(a: str = ..., name: Optional[Any] = ...): ...
def attr_default_eager_fallback(a: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_empty_list_default(a: Any = ..., name: Optional[Any] = ...): ...
def attr_empty_list_default_eager_fallback(a: Any = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_enum(a: Any, name: Optional[Any] = ...): ...
def attr_enum_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_enum_list(a: Any, name: Optional[Any] = ...): ...
def attr_enum_list_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_float(a: Any, name: Optional[Any] = ...): ...
def attr_float_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_list_default(a: Any = ..., name: Optional[Any] = ...): ...
def attr_list_default_eager_fallback(a: Any = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_list_min(a: Any, name: Optional[Any] = ...): ...
def attr_list_min_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_list_type_default(a: Any, b: Any, name: Optional[Any] = ...): ...
def attr_list_type_default_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_min(a: Any, name: Optional[Any] = ...): ...
def attr_min_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_partial_shape(a: Any, name: Optional[Any] = ...): ...
def attr_partial_shape_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_partial_shape_list(a: Any, name: Optional[Any] = ...): ...
def attr_partial_shape_list_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_shape(a: Any, name: Optional[Any] = ...): ...
def attr_shape_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_shape_list(a: Any, name: Optional[Any] = ...): ...
def attr_shape_list_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def attr_type_default(a: Any, name: Optional[Any] = ...): ...
def attr_type_default_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def b(name: Optional[Any] = ...): ...
def b_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def binary(a: Any, b: Any, name: Optional[Any] = ...): ...
def binary_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _ComplexStructOutput = namedtuple('ComplexStruct', <ERROR>)

def complex_struct(n_a: Any, n_b: Any, t_c: Any, name: Optional[Any] = ...): ...
def complex_struct_eager_fallback(n_a: Any, n_b: Any, t_c: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def copy_op(a: Any, name: Optional[Any] = ...): ...
def copy_op_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def default_attrs(string_val: str = ..., string_list_val: Any = ..., int_val: int = ..., int_list_val: Any = ..., float_val: int = ..., float_list_val: Any = ..., bool_val: bool = ..., bool_list_val: Any = ..., type_val: Any = ..., type_list_val: Any = ..., shape_val: Any = ..., shape_list_val: Any = ..., tensor_val: Any = ..., tensor_list_val: Any = ..., name: Optional[Any] = ...): ...
def default_attrs_eager_fallback(string_val: str = ..., string_list_val: Any = ..., int_val: int = ..., int_list_val: Any = ..., float_val: int = ..., float_list_val: Any = ..., bool_val: bool = ..., bool_list_val: Any = ..., type_val: Any = ..., type_list_val: Any = ..., shape_val: Any = ..., shape_list_val: Any = ..., tensor_val: Any = ..., tensor_list_val: Any = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _FiveFloatOutputsOutput = namedtuple('FiveFloatOutputs', <ERROR>)

def five_float_outputs(name: Optional[Any] = ...): ...
def five_float_outputs_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def float_input(a: Any, name: Optional[Any] = ...): ...
def float_input_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def float_output(name: Optional[Any] = ...): ...
def float_output_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _FloatOutputStringOutputOutput = namedtuple('FloatOutputStringOutput', <ERROR>)

def float_output_string_output(name: Optional[Any] = ...): ...
def float_output_string_output_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _Foo1Output = namedtuple('Foo1', <ERROR>)

def foo1(a: Any, b: Any, c: Any, name: Optional[Any] = ...): ...
def foo1_eager_fallback(a: Any, b: Any, c: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _Foo2Output = namedtuple('Foo2', <ERROR>)

def foo2(a: Any, b: Any, c: Any, name: Optional[Any] = ...): ...
def foo2_eager_fallback(a: Any, b: Any, c: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _Foo3Output = namedtuple('Foo3', <ERROR>)

def foo3(a: Any, b: Any, c: Any, name: Optional[Any] = ...): ...
def foo3_eager_fallback(a: Any, b: Any, c: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def func_attr(f: Any, name: Optional[Any] = ...): ...
def func_attr_eager_fallback(f: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def graph_def_version(name: Optional[Any] = ...): ...
def graph_def_version_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def in_polymorphic_twice(a: Any, b: Any, name: Optional[Any] = ...): ...
def in_polymorphic_twice_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def int64_output(name: Optional[Any] = ...): ...
def int64_output_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def int_attr(foo: int = ..., name: Optional[Any] = ...): ...
def int_attr_eager_fallback(foo: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def int_input(a: Any, name: Optional[Any] = ...): ...
def int_input_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def int_input_float_input(a: Any, b: Any, name: Optional[Any] = ...): ...
def int_input_float_input_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def int_input_int_output(a: Any, name: Optional[Any] = ...): ...
def int_input_int_output_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def int_output(name: Optional[Any] = ...): ...
def int_output_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _IntOutputFloatOutputOutput = namedtuple('IntOutputFloatOutput', <ERROR>)

def int_output_float_output(name: Optional[Any] = ...): ...
def int_output_float_output_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def kernel_label(name: Optional[Any] = ...): ...
def kernel_label_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def kernel_label_required(input: Any, name: Optional[Any] = ...): ...
def kernel_label_required_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def list_input(a: Any, name: Optional[Any] = ...): ...
def list_input_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def list_output(T: Any, name: Optional[Any] = ...): ...
def list_output_eager_fallback(T: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _MixedStructOutput = namedtuple('MixedStruct', <ERROR>)

def mixed_struct(n_a: Any, name: Optional[Any] = ...): ...
def mixed_struct_eager_fallback(n_a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_in_polymorphic_twice(a: Any, b: Any, name: Optional[Any] = ...): ...
def n_in_polymorphic_twice_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_in_twice(a: Any, b: Any, name: Optional[Any] = ...): ...
def n_in_twice_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_in_two_type_variables(a: Any, b: Any, name: Optional[Any] = ...): ...
def n_in_two_type_variables_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_ints_in(a: Any, name: Optional[Any] = ...): ...
def n_ints_in_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_ints_out(N: Any, name: Optional[Any] = ...): ...
def n_ints_out_eager_fallback(N: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_ints_out_default(N: int = ..., name: Optional[Any] = ...): ...
def n_ints_out_default_eager_fallback(N: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_polymorphic_in(a: Any, name: Optional[Any] = ...): ...
def n_polymorphic_in_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_polymorphic_out(T: Any, N: Any, name: Optional[Any] = ...): ...
def n_polymorphic_out_eager_fallback(T: Any, N: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_polymorphic_out_default(T: Any = ..., N: int = ..., name: Optional[Any] = ...): ...
def n_polymorphic_out_default_eager_fallback(T: Any = ..., N: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_polymorphic_restrict_in(a: Any, name: Optional[Any] = ...): ...
def n_polymorphic_restrict_in_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def n_polymorphic_restrict_out(T: Any, N: Any, name: Optional[Any] = ...): ...
def n_polymorphic_restrict_out_eager_fallback(T: Any, N: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def none(name: Optional[Any] = ...): ...
def none_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def old(name: Optional[Any] = ...): ...
def old_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def op_with_default_attr(default_float: int = ..., name: Optional[Any] = ...): ...
def op_with_default_attr_eager_fallback(default_float: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def op_with_future_default_attr(name: Optional[Any] = ...): ...
def op_with_future_default_attr_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def out_t(T: Any, name: Optional[Any] = ...): ...
def out_t_eager_fallback(T: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def out_type_list(T: Any, name: Optional[Any] = ...): ...
def out_type_list_eager_fallback(T: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def out_type_list_restrict(t: Any, name: Optional[Any] = ...): ...
def out_type_list_restrict_eager_fallback(t: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def polymorphic(a: Any, name: Optional[Any] = ...): ...
def polymorphic_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def polymorphic_default_out(T: Any = ..., name: Optional[Any] = ...): ...
def polymorphic_default_out_eager_fallback(T: Any = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def polymorphic_out(T: Any, name: Optional[Any] = ...): ...
def polymorphic_out_eager_fallback(T: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def ref_in(a: Any, name: Optional[Any] = ...): ...
def ref_input_float_input(a: Any, b: Any, name: Optional[Any] = ...): ...
def ref_input_float_input_int_output(a: Any, b: Any, name: Optional[Any] = ...): ...
def ref_input_int_input(a: Any, b: Any, name: Optional[Any] = ...): ...
def ref_out(T: Any, name: Optional[Any] = ...): ...
def ref_output(name: Optional[Any] = ...): ...

# _RefOutputFloatOutputOutput = namedtuple('RefOutputFloatOutput', <ERROR>)

def ref_output_float_output(name: Optional[Any] = ...): ...
def requires_older_graph_version(name: Optional[Any] = ...): ...
def requires_older_graph_version_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def reserved_attr(range: Any, name: Optional[Any] = ...): ...
def reserved_attr_eager_fallback(range: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def reserved_input(input: Any, name: Optional[Any] = ...): ...
def reserved_input_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_create_op(resource: Any, name: Optional[Any] = ...): ...
def resource_create_op_eager_fallback(resource: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_initialized_op(resource: Any, name: Optional[Any] = ...): ...
def resource_initialized_op_eager_fallback(resource: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_using_op(resource: Any, name: Optional[Any] = ...): ...
def resource_using_op_eager_fallback(resource: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def restrict(a: Any, name: Optional[Any] = ...): ...
def restrict_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def simple(a: Any, name: Optional[Any] = ...): ...
def simple_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def simple_struct(n_a: Any, name: Optional[Any] = ...): ...
def simple_struct_eager_fallback(n_a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def string_list_attr(a: Any, b: Any, name: Optional[Any] = ...): ...
def string_list_attr_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def stub_resource_handle_op(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def stub_resource_handle_op_eager_fallback(container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def test_attr(T: Any, name: Optional[Any] = ...): ...
def test_attr_eager_fallback(T: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _TestStringOutputOutput = namedtuple('TestStringOutput', <ERROR>)

def test_string_output(input: Any, name: Optional[Any] = ...): ...
def test_string_output_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def two_float_inputs(a: Any, b: Any, name: Optional[Any] = ...): ...
def two_float_inputs_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def two_float_inputs_float_output(a: Any, b: Any, name: Optional[Any] = ...): ...
def two_float_inputs_float_output_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def two_float_inputs_int_output(a: Any, b: Any, name: Optional[Any] = ...): ...
def two_float_inputs_int_output_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _TwoFloatOutputsOutput = namedtuple('TwoFloatOutputs', <ERROR>)

def two_float_outputs(name: Optional[Any] = ...): ...
def two_float_outputs_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def two_int_inputs(a: Any, b: Any, name: Optional[Any] = ...): ...
def two_int_inputs_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _TwoIntOutputsOutput = namedtuple('TwoIntOutputs', <ERROR>)

def two_int_outputs(name: Optional[Any] = ...): ...
def two_int_outputs_eager_fallback(name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def two_refs_in(a: Any, b: Any, name: Optional[Any] = ...): ...
def type_list(a: Any, name: Optional[Any] = ...): ...
def type_list_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def type_list_restrict(a: Any, name: Optional[Any] = ...): ...
def type_list_restrict_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def type_list_twice(a: Any, b: Any, name: Optional[Any] = ...): ...
def type_list_twice_eager_fallback(a: Any, b: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def unary(a: Any, name: Optional[Any] = ...): ...
def unary_eager_fallback(a: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
