# Stubs for tensorflow.python.ops.variable_scope (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import enum as enum
import threading as threading
from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, init_ops as init_ops, resource_variable_ops as resource_variable_ops, variables as variables
from tensorflow.python.util import deprecation as deprecation, function_utils as function_utils, tf_contextlib as tf_contextlib, tf_inspect as tf_inspect
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

class _PartitionInfo:
    def __init__(self, full_shape: Any, var_offset: Any) -> None: ...
    @property
    def full_shape(self): ...
    @property
    def var_offset(self): ...
    def single_offset(self, shape: Any): ...
    def single_slice_dim(self, shape: Any): ...

class _ReuseMode(enum.Enum):
    AUTO_REUSE: int = ...
VariableSynchronization = variables.VariableSynchronization
VariableAggregation = variables.VariableAggregation
AUTO_REUSE: Any

class _VariableStore:
    def __init__(self) -> None: ...
    def get_variable(self, name: Any, shape: Optional[Any] = ..., dtype: Any = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., reuse: Optional[Any] = ..., trainable: Optional[Any] = ..., collections: Optional[Any] = ..., caching_device: Optional[Any] = ..., partitioner: Optional[Any] = ..., validate_shape: bool = ..., use_resource: Optional[Any] = ..., custom_getter: Optional[Any] = ..., constraint: Optional[Any] = ..., synchronization: Any = ..., aggregation: Any = ...): ...

def no_regularizer(_: Any) -> None: ...

class VariableScope:
    def __init__(self, reuse: Any, name: str = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., caching_device: Optional[Any] = ..., partitioner: Optional[Any] = ..., custom_getter: Optional[Any] = ..., name_scope: str = ..., dtype: Any = ..., use_resource: Optional[Any] = ..., constraint: Optional[Any] = ...) -> None: ...
    @property
    def name(self): ...
    @property
    def original_name_scope(self): ...
    @property
    def reuse(self): ...
    @property
    def initializer(self): ...
    @property
    def dtype(self): ...
    @property
    def use_resource(self): ...
    @property
    def regularizer(self): ...
    @property
    def caching_device(self): ...
    @property
    def partitioner(self): ...
    @property
    def custom_getter(self): ...
    @property
    def constraint(self): ...
    def reuse_variables(self) -> None: ...
    def set_initializer(self, initializer: Any) -> None: ...
    def set_dtype(self, dtype: Any) -> None: ...
    def set_use_resource(self, use_resource: Any) -> None: ...
    def set_regularizer(self, regularizer: Any) -> None: ...
    def set_caching_device(self, caching_device: Any) -> None: ...
    def set_partitioner(self, partitioner: Any) -> None: ...
    def set_custom_getter(self, custom_getter: Any) -> None: ...
    def get_collection(self, name: Any): ...
    def trainable_variables(self): ...
    def global_variables(self): ...
    def local_variables(self): ...
    def get_variable(self, var_store: Any, name: Any, shape: Optional[Any] = ..., dtype: Optional[Any] = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., reuse: Optional[Any] = ..., trainable: Optional[Any] = ..., collections: Optional[Any] = ..., caching_device: Optional[Any] = ..., partitioner: Optional[Any] = ..., validate_shape: bool = ..., use_resource: Optional[Any] = ..., custom_getter: Optional[Any] = ..., constraint: Optional[Any] = ..., synchronization: Any = ..., aggregation: Any = ...): ...

class _VariableScopeStore(threading.local):
    current_scope: Any = ...
    variable_scopes_count: Any = ...
    def __init__(self) -> None: ...
    def open_variable_scope(self, scope_name: Any) -> None: ...
    def close_variable_subscopes(self, scope_name: Any) -> None: ...
    def variable_scope_count(self, scope_name: Any): ...

def get_variable_scope(): ...

class EagerVariableStore:
    def __init__(self, store: Optional[Any] = ...) -> None: ...
    def as_default(self): ...
    def variables(self): ...
    def trainable_variables(self): ...
    def non_trainable_variables(self): ...
    def copy(self): ...

def get_variable(name: Any, shape: Optional[Any] = ..., dtype: Optional[Any] = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., trainable: Optional[Any] = ..., collections: Optional[Any] = ..., caching_device: Optional[Any] = ..., partitioner: Optional[Any] = ..., validate_shape: bool = ..., use_resource: Optional[Any] = ..., custom_getter: Optional[Any] = ..., constraint: Optional[Any] = ..., synchronization: Any = ..., aggregation: Any = ...): ...
def get_local_variable(name: Any, shape: Optional[Any] = ..., dtype: Optional[Any] = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., trainable: bool = ..., collections: Optional[Any] = ..., caching_device: Optional[Any] = ..., partitioner: Optional[Any] = ..., validate_shape: bool = ..., use_resource: Optional[Any] = ..., custom_getter: Optional[Any] = ..., constraint: Optional[Any] = ..., synchronization: Any = ..., aggregation: Any = ...): ...

class _pure_variable_scope:
    def __init__(self, name_or_scope: Any, reuse: Optional[Any] = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., caching_device: Optional[Any] = ..., partitioner: Optional[Any] = ..., custom_getter: Optional[Any] = ..., old_name_scope: Optional[Any] = ..., dtype: Any = ..., use_resource: Optional[Any] = ..., constraint: Optional[Any] = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type_arg: Any, value_arg: Any, traceback_arg: Any) -> None: ...

class variable_scope:
    def __init__(self, name_or_scope: Any, default_name: Optional[Any] = ..., values: Optional[Any] = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., caching_device: Optional[Any] = ..., partitioner: Optional[Any] = ..., custom_getter: Optional[Any] = ..., reuse: Optional[Any] = ..., dtype: Optional[Any] = ..., use_resource: Optional[Any] = ..., constraint: Optional[Any] = ..., auxiliary_name_scope: bool = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type_arg: Any, value_arg: Any, traceback_arg: Any) -> None: ...

def variable_op_scope(values: Any, name_or_scope: Any, default_name: Optional[Any] = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., caching_device: Optional[Any] = ..., partitioner: Optional[Any] = ..., custom_getter: Optional[Any] = ..., reuse: Optional[Any] = ..., dtype: Optional[Any] = ..., use_resource: Optional[Any] = ..., constraint: Optional[Any] = ...) -> None: ...
variable = variables.VariableV1
