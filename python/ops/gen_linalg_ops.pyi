# Stubs for tensorflow.python.ops.gen_linalg_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def batch_cholesky(input: Any, name: Optional[Any] = ...): ...
def batch_cholesky_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def batch_cholesky_grad(l: Any, grad: Any, name: Optional[Any] = ...): ...
def batch_cholesky_grad_eager_fallback(l: Any, grad: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def batch_matrix_determinant(input: Any, name: Optional[Any] = ...): ...
def batch_matrix_determinant_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def batch_matrix_inverse(input: Any, adjoint: bool = ..., name: Optional[Any] = ...): ...
def batch_matrix_inverse_eager_fallback(input: Any, adjoint: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def batch_matrix_solve(matrix: Any, rhs: Any, adjoint: bool = ..., name: Optional[Any] = ...): ...
def batch_matrix_solve_eager_fallback(matrix: Any, rhs: Any, adjoint: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def batch_matrix_solve_ls(matrix: Any, rhs: Any, l2_regularizer: Any, fast: bool = ..., name: Optional[Any] = ...): ...
def batch_matrix_solve_ls_eager_fallback(matrix: Any, rhs: Any, l2_regularizer: Any, fast: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def batch_matrix_triangular_solve(matrix: Any, rhs: Any, lower: bool = ..., adjoint: bool = ..., name: Optional[Any] = ...): ...
def batch_matrix_triangular_solve_eager_fallback(matrix: Any, rhs: Any, lower: bool = ..., adjoint: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def batch_self_adjoint_eig(input: Any, name: Optional[Any] = ...): ...
def batch_self_adjoint_eig_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _BatchSelfAdjointEigV2Output = namedtuple('BatchSelfAdjointEigV2', <ERROR>)

def batch_self_adjoint_eig_v2(input: Any, compute_v: bool = ..., name: Optional[Any] = ...): ...
def batch_self_adjoint_eig_v2_eager_fallback(input: Any, compute_v: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _BatchSvdOutput = namedtuple('BatchSvd', <ERROR>)

def batch_svd(input: Any, compute_uv: bool = ..., full_matrices: bool = ..., name: Optional[Any] = ...): ...
def batch_svd_eager_fallback(input: Any, compute_uv: bool = ..., full_matrices: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def cholesky(input: Any, name: Optional[Any] = ...): ...
def cholesky_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def cholesky_grad(l: Any, grad: Any, name: Optional[Any] = ...): ...
def cholesky_grad_eager_fallback(l: Any, grad: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _LogMatrixDeterminantOutput = namedtuple('LogMatrixDeterminant', <ERROR>)

def log_matrix_determinant(input: Any, name: Optional[Any] = ...): ...
def log_matrix_determinant_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def matrix_determinant(input: Any, name: Optional[Any] = ...): ...
def matrix_determinant_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def matrix_exponential(input: Any, name: Optional[Any] = ...): ...
def matrix_exponential_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def matrix_inverse(input: Any, adjoint: bool = ..., name: Optional[Any] = ...): ...
def matrix_inverse_eager_fallback(input: Any, adjoint: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def matrix_logarithm(input: Any, name: Optional[Any] = ...): ...
def matrix_logarithm_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def matrix_solve(matrix: Any, rhs: Any, adjoint: bool = ..., name: Optional[Any] = ...): ...
def matrix_solve_eager_fallback(matrix: Any, rhs: Any, adjoint: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def matrix_solve_ls(matrix: Any, rhs: Any, l2_regularizer: Any, fast: bool = ..., name: Optional[Any] = ...): ...
def matrix_solve_ls_eager_fallback(matrix: Any, rhs: Any, l2_regularizer: Any, fast: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def matrix_triangular_solve(matrix: Any, rhs: Any, lower: bool = ..., adjoint: bool = ..., name: Optional[Any] = ...): ...
def matrix_triangular_solve_eager_fallback(matrix: Any, rhs: Any, lower: bool = ..., adjoint: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _QrOutput = namedtuple('Qr', <ERROR>)

def qr(input: Any, full_matrices: bool = ..., name: Optional[Any] = ...): ...
def qr_eager_fallback(input: Any, full_matrices: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def self_adjoint_eig(input: Any, name: Optional[Any] = ...): ...
def self_adjoint_eig_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _SelfAdjointEigV2Output = namedtuple('SelfAdjointEigV2', <ERROR>)

def self_adjoint_eig_v2(input: Any, compute_v: bool = ..., name: Optional[Any] = ...): ...
def self_adjoint_eig_v2_eager_fallback(input: Any, compute_v: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _SvdOutput = namedtuple('Svd', <ERROR>)

def svd(input: Any, compute_uv: bool = ..., full_matrices: bool = ..., name: Optional[Any] = ...): ...
def svd_eager_fallback(input: Any, compute_uv: bool = ..., full_matrices: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
