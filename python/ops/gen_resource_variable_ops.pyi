# Stubs for tensorflow.python.ops.gen_resource_variable_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def assign_add_variable_op(resource: Any, value: Any, name: Optional[Any] = ...): ...
def assign_add_variable_op_eager_fallback(resource: Any, value: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def assign_sub_variable_op(resource: Any, value: Any, name: Optional[Any] = ...): ...
def assign_sub_variable_op_eager_fallback(resource: Any, value: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def assign_variable_op(resource: Any, value: Any, name: Optional[Any] = ...): ...
def assign_variable_op_eager_fallback(resource: Any, value: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def consume_mutex_lock(mutex_lock: Any, name: Optional[Any] = ...): ...
def consume_mutex_lock_eager_fallback(mutex_lock: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def destroy_resource_op(resource: Any, ignore_lookup_error: bool = ..., name: Optional[Any] = ...): ...
def destroy_resource_op_eager_fallback(resource: Any, ignore_lookup_error: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def mutex_lock(mutex: Any, name: Optional[Any] = ...): ...
def mutex_lock_eager_fallback(mutex: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def mutex_v2(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def mutex_v2_eager_fallback(container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def read_variable_op(resource: Any, dtype: Any, name: Optional[Any] = ...): ...
def read_variable_op_eager_fallback(resource: Any, dtype: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_gather(resource: Any, indices: Any, dtype: Any, validate_indices: bool = ..., name: Optional[Any] = ...): ...
def resource_gather_eager_fallback(resource: Any, indices: Any, dtype: Any, validate_indices: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_scatter_add(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ...): ...
def resource_scatter_add_eager_fallback(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_scatter_div(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ...): ...
def resource_scatter_div_eager_fallback(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_scatter_max(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ...): ...
def resource_scatter_max_eager_fallback(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_scatter_min(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ...): ...
def resource_scatter_min_eager_fallback(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_scatter_mul(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ...): ...
def resource_scatter_mul_eager_fallback(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_scatter_sub(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ...): ...
def resource_scatter_sub_eager_fallback(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def resource_scatter_update(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ...): ...
def resource_scatter_update_eager_fallback(resource: Any, indices: Any, updates: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def var_handle_op(dtype: Any, shape: Any, container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...
def var_handle_op_eager_fallback(dtype: Any, shape: Any, container: str = ..., shared_name: str = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def var_is_initialized_op(resource: Any, name: Optional[Any] = ...): ...
def var_is_initialized_op_eager_fallback(resource: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def variable_shape(input: Any, out_type: Any = ..., name: Optional[Any] = ...): ...
def variable_shape_eager_fallback(input: Any, out_type: Any = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
