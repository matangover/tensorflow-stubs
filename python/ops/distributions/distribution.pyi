# Stubs for tensorflow.python.ops.distributions.distribution (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, math_ops as math_ops
from tensorflow.python.ops.distributions import kullback_leibler as kullback_leibler, util as util
from tensorflow.python.util import tf_inspect as tf_inspect
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

class _BaseDistribution(metaclass=abc.ABCMeta): ...

class _DistributionMeta(abc.ABCMeta):
    def __new__(mcs: Any, classname: Any, baseclasses: Any, attrs: Any): ...

class ReparameterizationType:
    def __init__(self, rep_type: Any) -> None: ...
    def __eq__(self, other: Any): ...

FULLY_REPARAMETERIZED: Any
NOT_REPARAMETERIZED: Any

class Distribution(_BaseDistribution, metaclass=_DistributionMeta):
    def __init__(self, dtype: Any, reparameterization_type: Any, validate_args: Any, allow_nan_stats: Any, parameters: Optional[Any] = ..., graph_parents: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    @classmethod
    def param_shapes(cls, sample_shape: Any, name: str = ...): ...
    @classmethod
    def param_static_shapes(cls, sample_shape: Any): ...
    @property
    def name(self): ...
    @property
    def dtype(self): ...
    @property
    def parameters(self): ...
    @property
    def reparameterization_type(self): ...
    @property
    def allow_nan_stats(self): ...
    @property
    def validate_args(self): ...
    def copy(self, **override_parameters_kwargs: Any): ...
    def batch_shape_tensor(self, name: str = ...): ...
    @property
    def batch_shape(self): ...
    def event_shape_tensor(self, name: str = ...): ...
    @property
    def event_shape(self): ...
    def is_scalar_event(self, name: str = ...): ...
    def is_scalar_batch(self, name: str = ...): ...
    def sample(self, sample_shape: Any = ..., seed: Optional[Any] = ..., name: str = ...): ...
    def log_prob(self, value: Any, name: str = ...): ...
    def prob(self, value: Any, name: str = ...): ...
    def log_cdf(self, value: Any, name: str = ...): ...
    def cdf(self, value: Any, name: str = ...): ...
    def log_survival_function(self, value: Any, name: str = ...): ...
    def survival_function(self, value: Any, name: str = ...): ...
    def entropy(self, name: str = ...): ...
    def mean(self, name: str = ...): ...
    def quantile(self, value: Any, name: str = ...): ...
    def variance(self, name: str = ...): ...
    def stddev(self, name: str = ...): ...
    def covariance(self, name: str = ...): ...
    def mode(self, name: str = ...): ...
    def cross_entropy(self, other: Any, name: str = ...): ...
    def kl_divergence(self, other: Any, name: str = ...): ...
