# Stubs for tensorflow.python.ops.linalg.linear_operator_test_util (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.python.framework import dtypes as dtypes, ops as ops, random_seed as random_seed, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, linalg_ops as linalg_ops, math_ops as math_ops, random_ops as random_ops
from tensorflow.python.ops.linalg import linear_operator_util as linear_operator_util
from tensorflow.python.platform import test as test
from typing import Any as Any, Optional as Optional

class OperatorBuildInfo:
    shape: Any = ...
    def __init__(self, shape: Any, **kwargs: Any) -> None: ...

class LinearOperatorDerivedClassTest(test.TestCase, metaclass=abc.ABCMeta):
    def assertAC(self, x: Any, y: Any) -> None: ...
    def test_to_dense(self) -> None: ...
    def test_det(self) -> None: ...
    def test_log_abs_det(self) -> None: ...
    def test_matmul(self) -> None: ...
    def test_matmul_with_broadcast(self) -> None: ...
    def test_solve(self) -> None: ...
    def test_solve_with_broadcast(self) -> None: ...
    def test_trace(self) -> None: ...
    def test_add_to_tensor(self) -> None: ...
    def test_diag_part(self) -> None: ...

class SquareLinearOperatorDerivedClassTest(LinearOperatorDerivedClassTest, metaclass=abc.ABCMeta): ...
class NonSquareLinearOperatorDerivedClassTest(LinearOperatorDerivedClassTest, metaclass=abc.ABCMeta): ...

def random_positive_definite_matrix(shape: Any, dtype: Any, force_well_conditioned: bool = ...): ...
def random_tril_matrix(shape: Any, dtype: Any, force_well_conditioned: bool = ..., remove_upper: bool = ...): ...
def random_normal(shape: Any, mean: float = ..., stddev: float = ..., dtype: Any = ..., seed: Optional[Any] = ...): ...
def random_uniform(shape: Any, minval: Optional[Any] = ..., maxval: Optional[Any] = ..., dtype: Any = ..., seed: Optional[Any] = ...): ...
def random_sign_uniform(shape: Any, minval: Optional[Any] = ..., maxval: Optional[Any] = ..., dtype: Any = ..., seed: Optional[Any] = ...): ...
def random_normal_correlated_columns(shape: Any, mean: float = ..., stddev: float = ..., dtype: Any = ..., eps: float = ..., seed: Optional[Any] = ...): ...
