# Stubs for tensorflow.python.ops.gen_cudnn_rnn_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

# _CudnnRNNOutput = namedtuple('CudnnRNN', <ERROR>)

def cudnn_rnn(input: Any, input_h: Any, input_c: Any, params: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., is_training: bool = ..., name: Optional[Any] = ...): ...
def cudnn_rnn_eager_fallback(input: Any, input_h: Any, input_c: Any, params: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., is_training: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _CudnnRNNBackpropOutput = namedtuple('CudnnRNNBackprop', <ERROR>)

def cudnn_rnn_backprop(input: Any, input_h: Any, input_c: Any, params: Any, output: Any, output_h: Any, output_c: Any, output_backprop: Any, output_h_backprop: Any, output_c_backprop: Any, reserve_space: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., name: Optional[Any] = ...): ...
def cudnn_rnn_backprop_eager_fallback(input: Any, input_h: Any, input_c: Any, params: Any, output: Any, output_h: Any, output_c: Any, output_backprop: Any, output_h_backprop: Any, output_c_backprop: Any, reserve_space: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _CudnnRNNBackpropV2Output = namedtuple('CudnnRNNBackpropV2', <ERROR>)

def cudnn_rnn_backprop_v2(input: Any, input_h: Any, input_c: Any, params: Any, output: Any, output_h: Any, output_c: Any, output_backprop: Any, output_h_backprop: Any, output_c_backprop: Any, reserve_space: Any, host_reserved: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., name: Optional[Any] = ...): ...
def cudnn_rnn_backprop_v2_eager_fallback(input: Any, input_h: Any, input_c: Any, params: Any, output: Any, output_h: Any, output_c: Any, output_backprop: Any, output_h_backprop: Any, output_c_backprop: Any, reserve_space: Any, host_reserved: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def cudnn_rnn_canonical_to_params(num_layers: Any, num_units: Any, input_size: Any, weights: Any, biases: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., name: Optional[Any] = ...): ...
def cudnn_rnn_canonical_to_params_eager_fallback(num_layers: Any, num_units: Any, input_size: Any, weights: Any, biases: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def cudnn_rnn_params_size(num_layers: Any, num_units: Any, input_size: Any, T: Any, S: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., name: Optional[Any] = ...): ...
def cudnn_rnn_params_size_eager_fallback(num_layers: Any, num_units: Any, input_size: Any, T: Any, S: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _CudnnRNNParamsToCanonicalOutput = namedtuple('CudnnRNNParamsToCanonical', <ERROR>)

def cudnn_rnn_params_to_canonical(num_layers: Any, num_units: Any, input_size: Any, params: Any, num_params: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., name: Optional[Any] = ...): ...
def cudnn_rnn_params_to_canonical_eager_fallback(num_layers: Any, num_units: Any, input_size: Any, params: Any, num_params: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _CudnnRNNV2Output = namedtuple('CudnnRNNV2', <ERROR>)

def cudnn_rnnv2(input: Any, input_h: Any, input_c: Any, params: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., is_training: bool = ..., name: Optional[Any] = ...): ...
def cudnn_rnnv2_eager_fallback(input: Any, input_h: Any, input_c: Any, params: Any, rnn_mode: str = ..., input_mode: str = ..., direction: str = ..., dropout: int = ..., seed: int = ..., seed2: int = ..., is_training: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
