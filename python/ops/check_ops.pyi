# Stubs for tensorflow.python.ops.check_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, errors as errors, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, math_ops as math_ops
from tensorflow.python.util import compat as compat, deprecation as deprecation
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def assert_proper_iterable(values: Any) -> None: ...
def assert_negative(x: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_positive(x: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_non_negative(x: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_non_positive(x: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_equal(x: Any, y: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_none_equal(x: Any, y: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_near(x: Any, y: Any, rtol: Optional[Any] = ..., atol: Optional[Any] = ..., data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_less(x: Any, y: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_less_equal(x: Any, y: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_greater(x: Any, y: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_greater_equal(x: Any, y: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_rank(x: Any, rank: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_rank_at_least(x: Any, rank: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_rank_in(x: Any, ranks: Any, data: Optional[Any] = ..., summarize: Optional[Any] = ..., message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_integer(x: Any, message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def assert_type(tensor: Any, tf_type: Any, message: Optional[Any] = ..., name: Optional[Any] = ...): ...
def is_numeric_tensor(tensor: Any): ...
def is_non_decreasing(x: Any, name: Optional[Any] = ...): ...
def is_strictly_increasing(x: Any, name: Optional[Any] = ...): ...
def assert_same_float_dtype(tensors: Optional[Any] = ..., dtype: Optional[Any] = ...): ...
def assert_scalar(tensor: Any, name: Optional[Any] = ...): ...
