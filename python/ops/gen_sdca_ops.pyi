# Stubs for tensorflow.python.ops.gen_sdca_ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def sdca_fprint(input: Any, name: Optional[Any] = ...): ...
def sdca_fprint_eager_fallback(input: Any, name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...

# _SdcaOptimizerOutput = namedtuple('SdcaOptimizer', <ERROR>)

def sdca_optimizer(sparse_example_indices: Any, sparse_feature_indices: Any, sparse_feature_values: Any, dense_features: Any, example_weights: Any, example_labels: Any, sparse_indices: Any, sparse_weights: Any, dense_weights: Any, example_state_data: Any, loss_type: Any, l1: Any, l2: Any, num_loss_partitions: Any, num_inner_iterations: Any, adaptative: bool = ..., name: Optional[Any] = ...): ...
def sdca_optimizer_eager_fallback(sparse_example_indices: Any, sparse_feature_indices: Any, sparse_feature_values: Any, dense_features: Any, example_weights: Any, example_labels: Any, sparse_indices: Any, sparse_weights: Any, dense_weights: Any, example_state_data: Any, loss_type: Any, l1: Any, l2: Any, num_loss_partitions: Any, num_inner_iterations: Any, adaptative: bool = ..., name: Optional[Any] = ..., ctx: Optional[Any] = ...): ...
def sdca_shrink_l1(weights: Any, l1: Any, l2: Any, name: Optional[Any] = ...): ...
