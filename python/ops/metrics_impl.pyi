# Stubs for tensorflow.python.ops.metrics_impl (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, confusion_matrix as confusion_matrix, control_flow_ops as control_flow_ops, math_ops as math_ops, nn as nn, sets as sets, sparse_ops as sparse_ops, state_ops as state_ops, variable_scope as variable_scope, weights_broadcast_ops as weights_broadcast_ops
from tensorflow.python.training import distribution_strategy_context as distribution_strategy_context
from tensorflow.python.util.deprecation import deprecated as deprecated
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any as Any, Optional as Optional

def metric_variable(shape: Any, dtype: Any, validate_shape: bool = ..., name: Optional[Any] = ...): ...
def mean(values: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def accuracy(labels: Any, predictions: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def auc(labels: Any, predictions: Any, weights: Optional[Any] = ..., num_thresholds: int = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., curve: str = ..., name: Optional[Any] = ..., summation_method: str = ...): ...
def mean_absolute_error(labels: Any, predictions: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def mean_cosine_distance(labels: Any, predictions: Any, dim: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def mean_per_class_accuracy(labels: Any, predictions: Any, num_classes: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def mean_iou(labels: Any, predictions: Any, num_classes: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def mean_relative_error(labels: Any, predictions: Any, normalizer: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def mean_squared_error(labels: Any, predictions: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def mean_tensor(values: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def percentage_below(values: Any, threshold: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def false_negatives(labels: Any, predictions: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def false_negatives_at_thresholds(labels: Any, predictions: Any, thresholds: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def false_positives(labels: Any, predictions: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def false_positives_at_thresholds(labels: Any, predictions: Any, thresholds: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def true_negatives(labels: Any, predictions: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def true_negatives_at_thresholds(labels: Any, predictions: Any, thresholds: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def true_positives(labels: Any, predictions: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def true_positives_at_thresholds(labels: Any, predictions: Any, thresholds: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def precision(labels: Any, predictions: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def precision_at_thresholds(labels: Any, predictions: Any, thresholds: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def recall(labels: Any, predictions: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def recall_at_k(labels: Any, predictions: Any, k: Any, class_id: Optional[Any] = ..., weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def recall_at_top_k(labels: Any, predictions_idx: Any, k: Optional[Any] = ..., class_id: Optional[Any] = ..., weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def recall_at_thresholds(labels: Any, predictions: Any, thresholds: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def root_mean_squared_error(labels: Any, predictions: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def sensitivity_at_specificity(labels: Any, predictions: Any, specificity: Any, weights: Optional[Any] = ..., num_thresholds: int = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def sparse_average_precision_at_k(labels: Any, predictions: Any, k: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def average_precision_at_k(labels: Any, predictions: Any, k: Any, weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def precision_at_top_k(labels: Any, predictions_idx: Any, k: Optional[Any] = ..., class_id: Optional[Any] = ..., weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def sparse_precision_at_k(labels: Any, predictions: Any, k: Any, class_id: Optional[Any] = ..., weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def precision_at_k(labels: Any, predictions: Any, k: Any, class_id: Optional[Any] = ..., weights: Optional[Any] = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
def specificity_at_sensitivity(labels: Any, predictions: Any, sensitivity: Any, weights: Optional[Any] = ..., num_thresholds: int = ..., metrics_collections: Optional[Any] = ..., updates_collections: Optional[Any] = ..., name: Optional[Any] = ...): ...
