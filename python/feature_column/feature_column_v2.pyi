# Stubs for tensorflow.python.feature_column.feature_column_v2 (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from collections import namedtuple as namedtuple
from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.keras.engine.base_layer import Layer as Layer
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, embedding_ops as embedding_ops, init_ops as init_ops, lookup_ops as lookup_ops, math_ops as math_ops, nn_ops as nn_ops, parsing_ops as parsing_ops, sparse_ops as sparse_ops, string_ops as string_ops, variable_scope as variable_scope, variables as variables
from tensorflow.python.platform import gfile as gfile
from tensorflow.python.training import checkpoint_utils as checkpoint_utils
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

class StateManager:
    def create_variable(self, feature_column: Any, name: Any, shape: Any, dtype: Optional[Any] = ..., trainable: bool = ..., initializer: Optional[Any] = ...) -> None: ...
    def add_variable(self, feature_column: Any, var: Any) -> None: ...
    def get_variable(self, feature_column: Any, name: Any) -> None: ...
    def add_resource(self, feature_column: Any, name: Any, resource: Any) -> None: ...
    def get_resource(self, feature_column: Any, name: Any) -> None: ...

class _StateManagerImpl(StateManager):
    def __init__(self, layer: Any, trainable: Any) -> None: ...
    def create_variable(self, feature_column: Any, name: Any, shape: Any, dtype: Optional[Any] = ..., trainable: bool = ..., initializer: Optional[Any] = ...): ...
    def get_variable(self, feature_column: Any, name: Any): ...

class FeatureLayer(Layer):
    def __init__(self, feature_columns: Any, trainable: bool = ..., name: Optional[Any] = ..., shared_state_manager: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def build(self, _: Any): ...
    def call(self, features: Any, cols_to_output_tensors: Optional[Any] = ...): ...
    def compute_output_shape(self, input_shape: Any): ...

class LinearModel(Layer):
    def __init__(self, feature_columns: Any, units: int = ..., sparse_combiner: str = ..., trainable: bool = ..., name: Optional[Any] = ..., shared_state_manager: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def build(self, _: Any) -> None: ...
    def call(self, features: Any): ...
    @property
    def bias_variable(self): ...

def make_parse_example_spec(feature_columns: Any): ...
def embedding_column(categorical_column: Any, dimension: Any, combiner: str = ..., initializer: Optional[Any] = ..., ckpt_to_load_from: Optional[Any] = ..., tensor_name_in_ckpt: Optional[Any] = ..., max_norm: Optional[Any] = ..., trainable: bool = ...): ...
def shared_embedding_columns_v2(categorical_columns: Any, dimension: Any, combiner: str = ..., initializer: Optional[Any] = ..., shared_embedding_collection_name: Optional[Any] = ..., ckpt_to_load_from: Optional[Any] = ..., tensor_name_in_ckpt: Optional[Any] = ..., max_norm: Optional[Any] = ..., trainable: bool = ...): ...
def numeric_column(key: Any, shape: Any = ..., default_value: Optional[Any] = ..., dtype: Any = ..., normalizer_fn: Optional[Any] = ...): ...
def bucketized_column(source_column: Any, boundaries: Any): ...
def categorical_column_with_hash_bucket(key: Any, hash_bucket_size: Any, dtype: Any = ...): ...
def categorical_column_with_vocabulary_file(key: Any, vocabulary_file: Any, vocabulary_size: Optional[Any] = ..., num_oov_buckets: int = ..., default_value: Optional[Any] = ..., dtype: Any = ...): ...
def categorical_column_with_vocabulary_list(key: Any, vocabulary_list: Any, dtype: Optional[Any] = ..., default_value: int = ..., num_oov_buckets: int = ...): ...
def categorical_column_with_identity(key: Any, num_buckets: Any, default_value: Optional[Any] = ...): ...
def indicator_column(categorical_column: Any): ...
def weighted_categorical_column(categorical_column: Any, weight_feature_key: Any, dtype: Any = ...): ...
def crossed_column(keys: Any, hash_bucket_size: Any, hash_key: Optional[Any] = ...): ...

class FeatureColumn(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    def name(self) -> Any: ...
    @abc.abstractmethod
    def transform_feature(self, transformation_cache: Any, state_manager: Any) -> Any: ...
    def parse_example_spec(self) -> Any: ...
    def create_state(self, state_manager: Any) -> None: ...

class DenseColumn(FeatureColumn, metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    def variable_shape(self) -> Any: ...
    @abc.abstractmethod
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any) -> Any: ...

def is_feature_column_v2(feature_columns: Any): ...

class CategoricalColumn(FeatureColumn, metaclass=abc.ABCMeta):
    __metaclass__: Any = ...

    IdWeightPair = namedtuple('IdWeightPair', ['id_tensor', 'weight_tensor'])
    def num_buckets(self) -> Any: ...
    @abc.abstractmethod
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any) -> Any: ...

class SequenceDenseColumn(FeatureColumn, metaclass=abc.ABCMeta):
    __metaclass__: Any = ...

    TensorSequenceLengthPair = namedtuple('TensorSequenceLengthPair', ['dense_tensor', 'sequence_length'])
    @abc.abstractmethod
    def get_sequence_dense_tensor(self, transformation_cache: Any, state_manager: Any) -> Any: ...

class FeatureTransformationCache:
    def __init__(self, features: Any) -> None: ...
    def get(self, key: Any, state_manager: Any): ...

class NumericColumn(DenseColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def variable_shape(self): ...
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...

class BucketizedColumn(DenseColumn, CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def variable_shape(self): ...
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...

class EmbeddingColumn(DenseColumn, SequenceDenseColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def variable_shape(self): ...
    def create_state(self, state_manager: Any) -> None: ...
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    def get_sequence_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...

class SharedEmbeddingStateManager(Layer):
    def __init__(self, trainable: bool = ..., name: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def create_variable(self, name: Any, shape: Any, dtype: Optional[Any] = ..., trainable: bool = ..., initializer: Optional[Any] = ...): ...
    def get_variable(self, feature_column: Any, name: Any): ...

def maybe_create_shared_state_manager(feature_columns: Any): ...

class SharedEmbeddingColumn(DenseColumn, SequenceDenseColumn):
    @property
    def name(self): ...
    @property
    def shared_collection_name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def variable_shape(self): ...
    def create_state(self, state_manager: Any) -> None: ...
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    def get_sequence_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...

class HashedCategoricalColumn(CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...

class VocabularyFileCategoricalColumn(CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...

class VocabularyListCategoricalColumn(CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...

class IdentityCategoricalColumn(CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...

class WeightedCategoricalColumn(CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    @property
    def num_buckets(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...

class CrossedColumn(CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...

class IndicatorColumn(DenseColumn, SequenceDenseColumn):
    @property
    def name(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parse_example_spec(self): ...
    @property
    def variable_shape(self): ...
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    def get_sequence_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...

class SequenceCategoricalColumn(FeatureColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sequence_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...
