# Stubs for tensorflow.python.debug.wrappers.framework (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.core.protobuf import config_pb2 as config_pb2
from tensorflow.python.client import session as session
from tensorflow.python.debug.lib import debug_utils as debug_utils, stepper as stepper
from tensorflow.python.framework import errors as errors, ops as ops
from tensorflow.python.platform import tf_logging as tf_logging
from tensorflow.python.training import monitored_session as monitored_session
from tensorflow.python.util import nest as nest
from typing import Any as Any, Optional as Optional

class OnSessionInitRequest:
    session: Any = ...
    def __init__(self, sess: Any) -> None: ...

class OnSessionInitAction:
    PROCEED: str = ...
    REMOTE_INSTR_LOOP: str = ...

class OnSessionInitResponse:
    action: Any = ...
    def __init__(self, action: Any) -> None: ...

class OnRunStartRequest:
    fetches: Any = ...
    feed_dict: Any = ...
    run_options: Any = ...
    run_metadata: Any = ...
    run_call_count: Any = ...
    is_callable_runner: Any = ...
    def __init__(self, fetches: Any, feed_dict: Any, run_options: Any, run_metadata: Any, run_call_count: Any, is_callable_runner: bool = ...) -> None: ...

class OnRunStartAction:
    DEBUG_RUN: str = ...
    PROFILE_RUN: str = ...
    NON_DEBUG_RUN: str = ...
    INVOKE_STEPPER: str = ...

class OnRunStartResponse:
    action: Any = ...
    debug_urls: Any = ...
    debug_ops: Any = ...
    node_name_regex_whitelist: Any = ...
    op_type_regex_whitelist: Any = ...
    tensor_dtype_regex_whitelist: Any = ...
    tolerate_debug_op_creation_failures: Any = ...
    def __init__(self, action: Any, debug_urls: Any, debug_ops: str = ..., node_name_regex_whitelist: Optional[Any] = ..., op_type_regex_whitelist: Optional[Any] = ..., tensor_dtype_regex_whitelist: Optional[Any] = ..., tolerate_debug_op_creation_failures: bool = ...) -> None: ...

class OnRunEndRequest:
    performed_action: Any = ...
    run_metadata: Any = ...
    client_graph_def: Any = ...
    tf_error: Any = ...
    def __init__(self, performed_action: Any, run_metadata: Optional[Any] = ..., client_graph_def: Optional[Any] = ..., tf_error: Optional[Any] = ...) -> None: ...

class OnRunEndResponse:
    def __init__(self) -> None: ...

class BaseDebugWrapperSession(session.SessionInterface, metaclass=abc.ABCMeta):
    def __init__(self, sess: Any, thread_name_filter: Optional[Any] = ..., pass_through_operrors: bool = ...) -> None: ...
    @property
    def graph(self): ...
    @property
    def graph_def(self): ...
    @property
    def sess_str(self): ...
    @property
    def session(self): ...
    def run(self, fetches: Any, feed_dict: Optional[Any] = ..., options: Optional[Any] = ..., run_metadata: Optional[Any] = ..., callable_runner: Optional[Any] = ..., callable_runner_args: Optional[Any] = ..., callable_options: Optional[Any] = ...): ...
    def run_step_fn(self, step_fn: Any): ...
    def partial_run_setup(self, fetches: Any, feeds: Optional[Any] = ...) -> None: ...
    def partial_run(self, handle: Any, fetches: Any, feed_dict: Optional[Any] = ...) -> None: ...
    def list_devices(self, *args: Any, **kwargs: Any): ...
    def reset(self, *args: Any, **kwargs: Any): ...
    def make_callable(self, fetches: Any, feed_list: Optional[Any] = ..., accept_options: bool = ...): ...
    @property
    def run_call_count(self): ...
    def increment_run_call_count(self) -> None: ...
    @abc.abstractmethod
    def on_session_init(self, request: Any) -> Any: ...
    @abc.abstractmethod
    def on_run_start(self, request: Any) -> Any: ...
    @abc.abstractmethod
    def on_run_end(self, request: Any) -> Any: ...
    def as_default(self): ...
    def __enter__(self): ...
    def __exit__(self, exec_type: Any, exec_value: Any, exec_tb: Any) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    @abc.abstractmethod
    def invoke_node_stepper(self, node_stepper: Any, restore_variable_values_on_exit: bool = ...) -> Any: ...
    def should_stop(self): ...

class WatchOptions:
    debug_ops: Any = ...
    node_name_regex_whitelist: Any = ...
    op_type_regex_whitelist: Any = ...
    tensor_dtype_regex_whitelist: Any = ...
    tolerate_debug_op_creation_failures: Any = ...
    def __init__(self, debug_ops: Optional[Any] = ..., node_name_regex_whitelist: Optional[Any] = ..., op_type_regex_whitelist: Optional[Any] = ..., tensor_dtype_regex_whitelist: Optional[Any] = ..., tolerate_debug_op_creation_failures: bool = ...) -> None: ...

class NonInteractiveDebugWrapperSession(BaseDebugWrapperSession, metaclass=abc.ABCMeta):
    def __init__(self, sess: Any, watch_fn: Optional[Any] = ..., thread_name_filter: Optional[Any] = ..., pass_through_operrors: bool = ...) -> None: ...
    def on_session_init(self, request: Any): ...
    @abc.abstractmethod
    def prepare_run_debug_urls(self, fetches: Any, feed_dict: Any) -> Any: ...
    def on_run_start(self, request: Any): ...
    def on_run_end(self, request: Any): ...
    def invoke_node_stepper(self, node_stepper: Any, restore_variable_values_on_exit: bool = ...) -> None: ...
