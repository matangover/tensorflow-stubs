# Stubs for tensorflow.python.debug.cli.analyzer_cli (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.debug.cli import cli_config as cli_config, cli_shared as cli_shared, command_parser as command_parser, debugger_cli_common as debugger_cli_common, evaluator as evaluator, ui_factory as ui_factory
from tensorflow.python.debug.lib import debug_graphs as debug_graphs, source_utils as source_utils
from typing import Any as Any, Optional as Optional

RL = debugger_cli_common.RichLine
HANG_UNFINISHED: str
HANG_FINISHED: str
HANG_SUFFIX: str
DEPTH_TEMPLATE: str
OP_TYPE_TEMPLATE: str
CTRL_LABEL: str
ELLIPSIS: str
SORT_TENSORS_BY_TIMESTAMP: str
SORT_TENSORS_BY_DUMP_SIZE: str
SORT_TENSORS_BY_OP_TYPE: str
SORT_TENSORS_BY_TENSOR_NAME: str

class DebugAnalyzer:
    def __init__(self, debug_dump: Any, config: Any) -> None: ...
    def add_tensor_filter(self, filter_name: Any, filter_callable: Any) -> None: ...
    def get_tensor_filter(self, filter_name: Any): ...
    def get_help(self, handler_name: Any): ...
    def list_tensors(self, args: Any, screen_info: Optional[Any] = ...): ...
    def node_info(self, args: Any, screen_info: Optional[Any] = ...): ...
    def list_inputs(self, args: Any, screen_info: Optional[Any] = ...): ...
    def print_tensor(self, args: Any, screen_info: Optional[Any] = ...): ...
    def list_outputs(self, args: Any, screen_info: Optional[Any] = ...): ...
    def evaluate_expression(self, args: Any, screen_info: Optional[Any] = ...): ...
    def print_source(self, args: Any, screen_info: Optional[Any] = ...): ...
    def list_source(self, args: Any, screen_info: Optional[Any] = ...): ...

def create_analyzer_ui(debug_dump: Any, tensor_filters: Optional[Any] = ..., ui_type: str = ..., on_ui_exit: Optional[Any] = ..., config: Optional[Any] = ...): ...
