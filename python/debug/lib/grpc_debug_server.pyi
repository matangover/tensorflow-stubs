# Stubs for tensorflow.python.debug.lib.grpc_debug_server (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple as namedtuple
from tensorflow.core.debug import debug_service_pb2 as debug_service_pb2
from tensorflow.core.framework import graph_pb2 as graph_pb2
from tensorflow.python.debug.lib import debug_graphs as debug_graphs, debug_service_pb2_grpc as debug_service_pb2_grpc
from tensorflow.python.util import compat as compat
from typing import Any as Any

DebugWatch = namedtuple('DebugWatch', ['node_name', 'output_slot', 'debug_op'])

class EventListenerBaseStreamHandler:
    def __init__(self) -> None: ...
    def on_core_metadata_event(self, event: Any) -> None: ...
    def on_graph_def(self, graph_def: Any, device_name: Any, wall_time: Any) -> None: ...
    def on_value_event(self, event: Any) -> None: ...

class EventListenerBaseServicer(debug_service_pb2_grpc.EventListenerServicer):
    def __init__(self, server_port: Any, stream_handler_class: Any) -> None: ...
    def SendEvents(self, request_iterator: Any, context: Any) -> None: ...
    server: Any = ...
    def run_server(self, blocking: bool = ...) -> None: ...
    def stop_server(self, grace: float = ...): ...
    def request_watch(self, node_name: Any, output_slot: Any, debug_op: Any, breakpoint: bool = ...) -> None: ...
    def request_unwatch(self, node_name: Any, output_slot: Any, debug_op: Any) -> None: ...
    @property
    def breakpoints(self): ...
    def gated_grpc_debug_watches(self): ...
    def SendTracebacks(self, request: Any, context: Any): ...
    def SendSourceFiles(self, request: Any, context: Any): ...
