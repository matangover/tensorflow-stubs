# Stubs for tensorflow.python.keras.engine.training_eager (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.data.ops import iterator_ops as iterator_ops
from tensorflow.python.eager.backprop import GradientTape as GradientTape
from tensorflow.python.framework import errors as errors, ops as ops, tensor_util as tensor_util
from tensorflow.python.keras import backend as backend
from tensorflow.python.keras.engine import training_utils as training_utils
from tensorflow.python.keras.utils import generic_utils as generic_utils
from typing import Any as Any, Optional as Optional

def iterator_fit_loop(model: Any, inputs: Any, class_weight: Any, steps_per_epoch: Any, epoch_logs: Any, val_inputs: Optional[Any] = ..., val_targets: Optional[Any] = ..., val_sample_weights: Optional[Any] = ..., epochs: int = ..., verbose: int = ..., callbacks: Optional[Any] = ..., validation_steps: Optional[Any] = ..., do_validation: bool = ..., batch_size: Optional[Any] = ...) -> None: ...
def iterator_test_loop(model: Any, inputs: Any, steps: Any, verbose: int = ...): ...
def iterator_predict_loop(model: Any, inputs: Any, steps: Any, verbose: int = ...): ...
def train_on_batch(model: Any, inputs: Any, targets: Any, sample_weights: Optional[Any] = ...): ...
def test_on_batch(model: Any, inputs: Any, targets: Any, sample_weights: Optional[Any] = ...): ...
def fit_loop(model: Any, inputs: Any, targets: Any, sample_weights: Optional[Any] = ..., class_weight: Optional[Any] = ..., val_inputs: Optional[Any] = ..., val_targets: Optional[Any] = ..., val_sample_weights: Optional[Any] = ..., batch_size: Optional[Any] = ..., epochs: int = ..., verbose: int = ..., callbacks: Optional[Any] = ..., shuffle: bool = ..., initial_epoch: int = ..., steps_per_epoch: Optional[Any] = ..., validation_steps: Optional[Any] = ...): ...
def test_loop(model: Any, inputs: Any, targets: Any, sample_weights: Optional[Any] = ..., batch_size: Optional[Any] = ..., verbose: int = ..., steps: Optional[Any] = ...): ...
def predict_loop(model: Any, inputs: Any, batch_size: int = ..., verbose: int = ..., steps: Optional[Any] = ...): ...
