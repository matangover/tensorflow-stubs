# Stubs for tensorflow.python.estimator.export.export_output (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc as abc
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops
from tensorflow.python.saved_model import signature_def_utils as signature_def_utils
from tensorflow.python.util.tf_export import estimator_export as estimator_export
from typing import Any as Any, Optional as Optional

class ExportOutput(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    @abc.abstractmethod
    def as_signature_def(self, receiver_tensors: Any) -> Any: ...

class ClassificationOutput(ExportOutput):
    def __init__(self, scores: Optional[Any] = ..., classes: Optional[Any] = ...) -> None: ...
    @property
    def scores(self): ...
    @property
    def classes(self): ...
    def as_signature_def(self, receiver_tensors: Any): ...

class RegressionOutput(ExportOutput):
    def __init__(self, value: Any) -> None: ...
    @property
    def value(self): ...
    def as_signature_def(self, receiver_tensors: Any): ...

class PredictOutput(ExportOutput):
    def __init__(self, outputs: Any) -> None: ...
    @property
    def outputs(self): ...
    def as_signature_def(self, receiver_tensors: Any): ...

class _SupervisedOutput(ExportOutput, metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    LOSS_NAME: str = ...
    PREDICTIONS_NAME: str = ...
    METRICS_NAME: str = ...
    METRIC_VALUE_SUFFIX: str = ...
    METRIC_UPDATE_SUFFIX: str = ...
    def __init__(self, loss: Optional[Any] = ..., predictions: Optional[Any] = ..., metrics: Optional[Any] = ...) -> None: ...
    @property
    def loss(self): ...
    @property
    def predictions(self): ...
    @property
    def metrics(self): ...
    def as_signature_def(self, receiver_tensors: Any): ...

class TrainOutput(_SupervisedOutput): ...
class EvalOutput(_SupervisedOutput): ...
