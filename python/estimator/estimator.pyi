# Stubs for tensorflow.python.estimator.estimator (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.core.framework import summary_pb2 as summary_pb2
from tensorflow.python.eager import context as context
from tensorflow.python.estimator import run_config as run_config
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, errors as errors, ops as ops, random_seed as random_seed, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, variables as variables
from tensorflow.python.platform import gfile as gfile
from tensorflow.python.summary import summary as summary
from tensorflow.python.summary.writer import writer_cache as writer_cache
from tensorflow.python.training import basic_session_run_hooks as basic_session_run_hooks, checkpoint_management as checkpoint_management, device_setter as device_setter, evaluation as evaluation, monitored_session as monitored_session, saver as saver, training as training, training_util as training_util, warm_starting_util as warm_starting_util
from tensorflow.python.util import compat as compat, compat_internal as compat_internal, function_utils as function_utils, nest as nest
from tensorflow.python.util.tf_export import estimator_export as estimator_export
from typing import Any as Any, Optional as Optional

class Estimator:
    def __init__(self, model_fn: Any, model_dir: Optional[Any] = ..., config: Optional[Any] = ..., params: Optional[Any] = ..., warm_start_from: Optional[Any] = ...) -> None: ...
    @property
    def model_dir(self): ...
    @property
    def config(self): ...
    @property
    def params(self): ...
    @property
    def model_fn(self): ...
    def get_variable_value(self, name: Any): ...
    def get_variable_names(self): ...
    def latest_checkpoint(self): ...
    def train(self, input_fn: Any, hooks: Optional[Any] = ..., steps: Optional[Any] = ..., max_steps: Optional[Any] = ..., saving_listeners: Optional[Any] = ...): ...
    def eval_dir(self, name: Optional[Any] = ...): ...
    def evaluate(self, input_fn: Any, steps: Optional[Any] = ..., hooks: Optional[Any] = ..., checkpoint_path: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def predict(self, input_fn: Any, predict_keys: Optional[Any] = ..., hooks: Optional[Any] = ..., checkpoint_path: Optional[Any] = ..., yield_single_examples: bool = ...) -> None: ...
    def export_savedmodel(self, export_dir_base: Any, serving_input_receiver_fn: Any, assets_extra: Optional[Any] = ..., as_text: bool = ..., checkpoint_path: Optional[Any] = ..., strip_default_attrs: bool = ...): ...
    def export_saved_model(self, export_dir_base: Any, serving_input_receiver_fn: Any, assets_extra: Optional[Any] = ..., as_text: bool = ..., checkpoint_path: Optional[Any] = ...): ...

def maybe_overwrite_model_dir_and_session_config(config: Any, model_dir: Any): ...
def create_per_tower_ready_for_local_init_op(scaffold: Any): ...
VocabInfo = warm_starting_util.VocabInfo

class WarmStartSettings:
    def __new__(cls, ckpt_to_initialize_from: Any, vars_to_warm_start: str = ..., var_name_to_vocab_info: Optional[Any] = ..., var_name_to_prev_var_name: Optional[Any] = ...): ...
