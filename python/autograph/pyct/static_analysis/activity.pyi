# Stubs for tensorflow.python.autograph.pyct.static_analysis.activity (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from tensorflow.python.autograph.pyct import anno as anno, qual_names as qual_names, transformer as transformer
from tensorflow.python.autograph.pyct.static_analysis.annos import NodeAnno as NodeAnno
from typing import Any as Any, Optional as Optional

class Scope:
    isolated: Any = ...
    parent: Any = ...
    add_unknown_symbols: Any = ...
    modified: Any = ...
    created: Any = ...
    used: Any = ...
    params: Any = ...
    returned: Any = ...
    def __init__(self, parent: Any, isolated: bool = ..., add_unknown_symbols: bool = ...) -> None: ...
    @property
    def referenced(self): ...
    def copy_from(self, other: Any) -> None: ...
    @classmethod
    def copy_of(cls, other: Any): ...
    def merge_from(self, other: Any) -> None: ...
    def has(self, name: Any): ...
    def mark_read(self, name: Any) -> None: ...
    def mark_param(self, name: Any, owner: Any) -> None: ...
    def mark_creation(self, name: Any, writes_create_symbol: bool = ...) -> None: ...
    def mark_write(self, name: Any) -> None: ...
    def mark_returned(self, name: Any) -> None: ...

class ActivityAnalyzer(transformer.Base):
    scope: Any = ...
    def __init__(self, context: Any, parent_scope: Optional[Any] = ..., add_unknown_symbols: bool = ...) -> None: ...
    def visit_Expr(self, node: Any): ...
    def visit_Return(self, node: Any): ...
    def visit_Assign(self, node: Any): ...
    def visit_AugAssign(self, node: Any): ...
    def visit_Name(self, node: Any): ...
    def visit_Attribute(self, node: Any): ...
    def visit_Subscript(self, node: Any): ...
    def visit_Print(self, node: Any): ...
    def visit_Assert(self, node: Any): ...
    def visit_Call(self, node: Any): ...
    def visit_arguments(self, node: Any): ...
    def visit_FunctionDef(self, node: Any): ...
    def visit_With(self, node: Any): ...
    def visit_withitem(self, node: Any): ...
    def visit_If(self, node: Any): ...
    def visit_For(self, node: Any): ...
    def visit_While(self, node: Any): ...

def resolve(node: Any, context: Any, parent_scope: Optional[Any] = ...): ...
