# Stubs for tensorflow.python.autograph.impl.api (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from enum import Enum as Enum
from tensorflow.python.autograph.core import config as config, converter as converter
from tensorflow.python.autograph.impl import conversion as conversion
from tensorflow.python.autograph.operators import py_builtins as py_builtins
from tensorflow.python.autograph.pyct import compiler as compiler, inspect_utils as inspect_utils
from tensorflow.python.autograph.utils import py_func as py_func
from tensorflow.python.util import tf_decorator as tf_decorator, tf_inspect as tf_inspect
from typing import Any as Any, Optional as Optional

class ConversionOptions:
    @classmethod
    def new(cls, recursive: bool = ..., verbose: bool = ..., strip_decorators: Optional[Any] = ..., force_conversion: bool = ..., arg_types: Optional[Any] = ...): ...

def convert(recursive: bool = ..., verbose: bool = ...): ...

class RunMode(Enum):
    GRAPH: int = ...
    PY_FUNC: int = ...

def do_not_convert(run_as: Any = ..., return_dtypes: Optional[Any] = ...): ...
def converted_call(f: Any, options: Any, *args: Any, **kwargs: Any): ...
def to_graph(e: Any, recursive: bool = ..., verbose: bool = ..., arg_values: Optional[Any] = ..., arg_types: Optional[Any] = ..., partial_types: Optional[Any] = ..., strip_decorators: Optional[Any] = ...): ...
def to_code(e: Any, recursive: bool = ..., arg_values: Optional[Any] = ..., arg_types: Optional[Any] = ..., partial_types: Optional[Any] = ..., indentation: str = ...): ...
