# Stubs for tensorflow.python.autograph.converters.return_statements (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import gast as gast
from tensorflow.python.autograph.core import converter as converter
from tensorflow.python.autograph.pyct import anno as anno, ast_util as ast_util, templates as templates
from tensorflow.python.autograph.pyct.static_analysis.annos import NodeAnno as NodeAnno
from typing import Any as Any

class BodyVisitor(converter.Base):
    depth_first: Any = ...
    changes_made: bool = ...
    def __init__(self, ctx: Any, depth_first: bool = ...) -> None: ...
    def visit_nodelist(self, nodelist: Any): ...
    def visit_If(self, node: Any): ...
    def visit_For(self, node: Any): ...
    def visit_While(self, node: Any): ...
    def visit_Try(self, node: Any): ...
    def visit_With(self, node: Any): ...
    def visit_FunctionDef(self, node: Any): ...

class FoldElse(BodyVisitor):
    changes_made: bool = ...
    def visit_nodelist(self, nodelist: Any): ...

def contains_return(node: Any): ...

class LiftReturn(converter.Base):
    changes_made: bool = ...
    common_return_name: Any = ...
    def __init__(self, ctx: Any) -> None: ...
    def visit_If(self, node: Any): ...
    def visit_With(self, node: Any): ...
    def visit_FunctionDef(self, node: Any): ...

class DetectReturnInUnsupportedControlFlow(gast.NodeVisitor):
    cant_return: bool = ...
    function_level: int = ...
    def __init__(self) -> None: ...
    def visit_While(self, node: Any) -> None: ...
    def visit_For(self, node: Any) -> None: ...
    def visit_Try(self, node: Any) -> None: ...
    def visit_FunctionDef(self, node: Any) -> None: ...
    def visit_Return(self, node: Any) -> None: ...

class DetectReturnInConditional(gast.NodeVisitor):
    cant_return: bool = ...
    function_level: int = ...
    def __init__(self) -> None: ...
    def visit_If(self, node: Any) -> None: ...
    def visit_FunctionDef(self, node: Any) -> None: ...
    def visit_Return(self, node: Any) -> None: ...

class DetectReturnInFunctionDef(gast.NodeVisitor):
    def visit_FunctionDef(self, node: Any) -> None: ...

def transform(node: Any, ctx: Any): ...
